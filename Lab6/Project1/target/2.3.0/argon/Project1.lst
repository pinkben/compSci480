
/Users/pinkb95/Desktop/compSci480/Lab6/Project1/target/2.3.0/argon/Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002884  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d68a0  000d68a0  000068a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d68a8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e508  000d68ac  0001e508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000270  2003e580  2003e580  0002e580  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000d6924  000d6924  00026924  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d694c  000d694c  0002694c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00142229  00000000  00000000  00026950  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00015bc7  00000000  00000000  00168b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002964a  00000000  00000000  0017e740  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000025b8  00000000  00000000  001a7d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007220  00000000  00000000  001aa342  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003696b  00000000  00000000  001b1562  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00035d2a  00000000  00000000  001e7ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001083a6  00000000  00000000  0021dbf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000689c  00000000  00000000  00325fa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fa7f 	bl	d6530 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fa87 	bl	d654c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e508 	.word	0x2003e508
   d4048:	000d68ac 	.word	0x000d68ac
   d404c:	2003e580 	.word	0x2003e580
   d4050:	2003e580 	.word	0x2003e580
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fb5f 	bl	d5720 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6870 	.word	0x000d6870
   d407c:	000d6894 	.word	0x000d6894

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b816 	b.w	d40b0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f823 	bl	d40d0 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 baff 	b.w	d5690 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bb17 	b.w	d46c4 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bb15 	b.w	d46c4 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bb1b 	b.w	d46d4 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <setup>:
int echoPin = D5;
double inches = 0.0;
int buttonTimer;
HC_SR04 rangeFinder = HC_SR04(trigPin, echoPin);

void setup() {
   d40b0:	b508      	push	{r3, lr}
  pinMode(button, INPUT_PULLUP);
   d40b2:	4b05      	ldr	r3, [pc, #20]	; (d40c8 <setup+0x18>)
   d40b4:	2102      	movs	r1, #2
   d40b6:	8818      	ldrh	r0, [r3, #0]
   d40b8:	f001 fba2 	bl	d5800 <pinMode>
  buttonTimer = Time.now();
   d40bc:	f001 f938 	bl	d5330 <_ZN9TimeClass3nowEv>
   d40c0:	4b02      	ldr	r3, [pc, #8]	; (d40cc <setup+0x1c>)
   d40c2:	6018      	str	r0, [r3, #0]
}
   d40c4:	bd08      	pop	{r3, pc}
   d40c6:	bf00      	nop
   d40c8:	2003e508 	.word	0x2003e508
   d40cc:	2003e584 	.word	0x2003e584

000d40d0 <loop>:

void loop() {
   d40d0:	b510      	push	{r4, lr}
  if (digitalRead(button) == LOW && Time.now() - buttonTimer < 1)
   d40d2:	4b27      	ldr	r3, [pc, #156]	; (d4170 <loop+0xa0>)
   d40d4:	4c27      	ldr	r4, [pc, #156]	; (d4174 <loop+0xa4>)
   d40d6:	8818      	ldrh	r0, [r3, #0]
void loop() {
   d40d8:	b08a      	sub	sp, #40	; 0x28
  if (digitalRead(button) == LOW && Time.now() - buttonTimer < 1)
   d40da:	f001 fbbb 	bl	d5854 <digitalRead>
   d40de:	2800      	cmp	r0, #0
   d40e0:	d141      	bne.n	d4166 <loop+0x96>
   d40e2:	f001 f925 	bl	d5330 <_ZN9TimeClass3nowEv>
   d40e6:	6823      	ldr	r3, [r4, #0]
   d40e8:	1ac0      	subs	r0, r0, r3
   d40ea:	2800      	cmp	r0, #0
   d40ec:	dc3b      	bgt.n	d4166 <loop+0x96>
  {
    buttonTimer--;
   d40ee:	3b01      	subs	r3, #1
    inches = rangeFinder.getDistanceInch();
   d40f0:	4821      	ldr	r0, [pc, #132]	; (d4178 <loop+0xa8>)
    buttonTimer--;
   d40f2:	6023      	str	r3, [r4, #0]
    inches = rangeFinder.getDistanceInch();
   d40f4:	f000 f8d6 	bl	d42a4 <_ZN7HC_SR0415getDistanceInchEv>
   d40f8:	4c20      	ldr	r4, [pc, #128]	; (d417c <loop+0xac>)
    delay(50);
   d40fa:	2032      	movs	r0, #50	; 0x32
    inches = rangeFinder.getDistanceInch();
   d40fc:	ed84 0b00 	vstr	d0, [r4]
    delay(50);
   d4100:	f000 fb10 	bl	d4724 <delay>
    if (inches <= 24)
   d4104:	ed94 0b00 	vldr	d0, [r4]
   d4108:	4b1d      	ldr	r3, [pc, #116]	; (d4180 <loop+0xb0>)
   d410a:	ec51 0b10 	vmov	r0, r1, d0
   d410e:	2200      	movs	r2, #0
   d4110:	ed8d 0b02 	vstr	d0, [sp, #8]
   d4114:	f002 f82e 	bl	d6174 <__aeabi_dcmple>
   d4118:	ed9d 0b02 	vldr	d0, [sp, #8]
   d411c:	b330      	cbz	r0, d416c <loop+0x9c>
    {
      Particle.publish("Close_Contact", String(inches), PRIVATE);
   d411e:	2106      	movs	r1, #6
   d4120:	a806      	add	r0, sp, #24
   d4122:	f001 f8b4 	bl	d528e <_ZN6StringC1Edi>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4126:	4b17      	ldr	r3, [pc, #92]	; (d4184 <loop+0xb4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4128:	9a06      	ldr	r2, [sp, #24]
   d412a:	781b      	ldrb	r3, [r3, #0]
   d412c:	f88d 3000 	strb.w	r3, [sp]
   d4130:	4915      	ldr	r1, [pc, #84]	; (d4188 <loop+0xb8>)
   d4132:	233c      	movs	r3, #60	; 0x3c
   d4134:	a804      	add	r0, sp, #16
   d4136:	f000 fc79 	bl	d4a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d413a:	9c05      	ldr	r4, [sp, #20]
   d413c:	b17c      	cbz	r4, d415e <loop+0x8e>
      if (--_M_use_count == 0)
   d413e:	6863      	ldr	r3, [r4, #4]
   d4140:	3b01      	subs	r3, #1
   d4142:	6063      	str	r3, [r4, #4]
   d4144:	b95b      	cbnz	r3, d415e <loop+0x8e>
          _M_dispose();
   d4146:	6823      	ldr	r3, [r4, #0]
   d4148:	4620      	mov	r0, r4
   d414a:	689b      	ldr	r3, [r3, #8]
   d414c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d414e:	68a3      	ldr	r3, [r4, #8]
   d4150:	3b01      	subs	r3, #1
   d4152:	60a3      	str	r3, [r4, #8]
   d4154:	b91b      	cbnz	r3, d415e <loop+0x8e>
            _M_destroy();
   d4156:	6823      	ldr	r3, [r4, #0]
   d4158:	4620      	mov	r0, r4
   d415a:	68db      	ldr	r3, [r3, #12]
   d415c:	4798      	blx	r3
   d415e:	a806      	add	r0, sp, #24
   d4160:	f001 f838 	bl	d51d4 <_ZN6StringD1Ev>
  }
  else
  {
    buttonTimer = Time.now();
  }
   d4164:	e002      	b.n	d416c <loop+0x9c>
    buttonTimer = Time.now();
   d4166:	f001 f8e3 	bl	d5330 <_ZN9TimeClass3nowEv>
   d416a:	6020      	str	r0, [r4, #0]
   d416c:	b00a      	add	sp, #40	; 0x28
   d416e:	bd10      	pop	{r4, pc}
   d4170:	2003e508 	.word	0x2003e508
   d4174:	2003e584 	.word	0x2003e584
   d4178:	2003e590 	.word	0x2003e590
   d417c:	2003e588 	.word	0x2003e588
   d4180:	40380000 	.word	0x40380000
   d4184:	2003e580 	.word	0x2003e580
   d4188:	000d66d0 	.word	0x000d66d0

000d418c <_GLOBAL__sub_I_button>:
        val_(val) {
   d418c:	4b04      	ldr	r3, [pc, #16]	; (d41a0 <_GLOBAL__sub_I_button+0x14>)
HC_SR04 rangeFinder = HC_SR04(trigPin, echoPin);
   d418e:	4805      	ldr	r0, [pc, #20]	; (d41a4 <_GLOBAL__sub_I_button+0x18>)
   d4190:	2201      	movs	r2, #1
   d4192:	701a      	strb	r2, [r3, #0]
   d4194:	4b04      	ldr	r3, [pc, #16]	; (d41a8 <_GLOBAL__sub_I_button+0x1c>)
   d4196:	681a      	ldr	r2, [r3, #0]
   d4198:	4b04      	ldr	r3, [pc, #16]	; (d41ac <_GLOBAL__sub_I_button+0x20>)
   d419a:	6819      	ldr	r1, [r3, #0]
   d419c:	f000 b808 	b.w	d41b0 <_ZN7HC_SR04C1Eii>
   d41a0:	2003e580 	.word	0x2003e580
   d41a4:	2003e590 	.word	0x2003e590
   d41a8:	2003e50c 	.word	0x2003e50c
   d41ac:	2003e510 	.word	0x2003e510

000d41b0 <_ZN7HC_SR04C1Eii>:
#include "HC_SR04.h"
HC_SR04::HC_SR04(int trigPin, int echoPin){
   d41b0:	b5d0      	push	{r4, r6, r7, lr}
  _minCM = 10.0;
   d41b2:	4f0b      	ldr	r7, [pc, #44]	; (d41e0 <_ZN7HC_SR04C1Eii+0x30>)
HC_SR04::HC_SR04(int trigPin, int echoPin){
   d41b4:	4604      	mov	r4, r0
  _minCM = 10.0;
   d41b6:	2600      	movs	r6, #0
   d41b8:	e9c4 6702 	strd	r6, r7, [r4, #8]
  _maxCM = 250.0;
   d41bc:	4f09      	ldr	r7, [pc, #36]	; (d41e4 <_ZN7HC_SR04C1Eii+0x34>)
HC_SR04::HC_SR04(int trigPin, int echoPin){
   d41be:	4608      	mov	r0, r1
  _maxCM = 250.0;
   d41c0:	2600      	movs	r6, #0
  _trigPin = trigPin;
  _echoPin = echoPin;
   d41c2:	e9c4 2100 	strd	r2, r1, [r4]
  _maxCM = 250.0;
   d41c6:	e9c4 6704 	strd	r6, r7, [r4, #16]
  pinMode(_trigPin, OUTPUT);
   d41ca:	2101      	movs	r1, #1
   d41cc:	b280      	uxth	r0, r0
   d41ce:	f001 fb17 	bl	d5800 <pinMode>
  pinMode(_echoPin, INPUT);
   d41d2:	8820      	ldrh	r0, [r4, #0]
   d41d4:	2100      	movs	r1, #0
   d41d6:	f001 fb13 	bl	d5800 <pinMode>
}
   d41da:	4620      	mov	r0, r4
   d41dc:	bdd0      	pop	{r4, r6, r7, pc}
   d41de:	bf00      	nop
   d41e0:	40240000 	.word	0x40240000
   d41e4:	406f4000 	.word	0x406f4000

000d41e8 <_ZN7HC_SR0416sendTriggerPulseEi>:
     return -1;
  }
  return (distCM / 2.5);
}

void HC_SR04::sendTriggerPulse(int pin){
   d41e8:	b510      	push	{r4, lr}
    digitalWrite(pin, HIGH);
   d41ea:	b28c      	uxth	r4, r1
   d41ec:	4620      	mov	r0, r4
   d41ee:	2101      	movs	r1, #1
   d41f0:	f001 fb17 	bl	d5822 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d41f4:	200a      	movs	r0, #10
   d41f6:	f000 f881 	bl	d42fc <HAL_Delay_Microseconds>
    delayMicroseconds(10);
    digitalWrite(pin, LOW);
   d41fa:	4620      	mov	r0, r4
   d41fc:	2100      	movs	r1, #0
}
   d41fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(pin, LOW);
   d4202:	f001 bb0e 	b.w	d5822 <digitalWrite>

000d4206 <_ZN7HC_SR0411waitForEchoEiil>:

void HC_SR04::waitForEcho(int pin, int value, long timeout){
   d4206:	b570      	push	{r4, r5, r6, lr}
   d4208:	460d      	mov	r5, r1
   d420a:	461c      	mov	r4, r3
   d420c:	4616      	mov	r6, r2
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d420e:	f000 f885 	bl	d431c <HAL_Timer_Get_Milli_Seconds>
    long giveupTime = millis() + timeout;
    while (digitalRead(pin) != value && millis() < giveupTime) {}
   d4212:	b2ad      	uxth	r5, r5
    long giveupTime = millis() + timeout;
   d4214:	4404      	add	r4, r0
    while (digitalRead(pin) != value && millis() < giveupTime) {}
   d4216:	4628      	mov	r0, r5
   d4218:	f001 fb1c 	bl	d5854 <digitalRead>
   d421c:	42b0      	cmp	r0, r6
   d421e:	d003      	beq.n	d4228 <_ZN7HC_SR0411waitForEchoEiil+0x22>
   d4220:	f000 f87c 	bl	d431c <HAL_Timer_Get_Milli_Seconds>
   d4224:	4284      	cmp	r4, r0
   d4226:	d8f6      	bhi.n	d4216 <_ZN7HC_SR0411waitForEchoEiil+0x10>
}
   d4228:	bd70      	pop	{r4, r5, r6, pc}
	...

000d422c <_ZN7HC_SR0413getDistanceCMEv>:
double HC_SR04::getDistanceCM(){
   d422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d422e:	4604      	mov	r4, r0
  sendTriggerPulse(_trigPin);
   d4230:	6841      	ldr	r1, [r0, #4]
   d4232:	f7ff ffd9 	bl	d41e8 <_ZN7HC_SR0416sendTriggerPulseEi>
  waitForEcho(_echoPin, HIGH, 100);
   d4236:	6821      	ldr	r1, [r4, #0]
   d4238:	2364      	movs	r3, #100	; 0x64
   d423a:	2201      	movs	r2, #1
   d423c:	4620      	mov	r0, r4
   d423e:	f7ff ffe2 	bl	d4206 <_ZN7HC_SR0411waitForEchoEiil>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4242:	f000 f863 	bl	d430c <HAL_Timer_Get_Micro_Seconds>
  waitForEcho(_echoPin, LOW, 100);
   d4246:	2364      	movs	r3, #100	; 0x64
   d4248:	2200      	movs	r2, #0
   d424a:	6821      	ldr	r1, [r4, #0]
   d424c:	4605      	mov	r5, r0
   d424e:	4620      	mov	r0, r4
   d4250:	f7ff ffd9 	bl	d4206 <_ZN7HC_SR0411waitForEchoEiil>
   d4254:	f000 f85a 	bl	d430c <HAL_Timer_Get_Micro_Seconds>
  double distance = duration / 29.0 / 2.0;
   d4258:	1b40      	subs	r0, r0, r5
   d425a:	f001 fca5 	bl	d5ba8 <__aeabi_i2d>
   d425e:	4b0e      	ldr	r3, [pc, #56]	; (d4298 <_ZN7HC_SR0413getDistanceCMEv+0x6c>)
   d4260:	2200      	movs	r2, #0
   d4262:	f001 fe35 	bl	d5ed0 <__aeabi_ddiv>
   d4266:	4b0d      	ldr	r3, [pc, #52]	; (d429c <_ZN7HC_SR0413getDistanceCMEv+0x70>)
   d4268:	2200      	movs	r2, #0
   d426a:	f001 fd07 	bl	d5c7c <__aeabi_dmul>
   d426e:	4606      	mov	r6, r0
   d4270:	460f      	mov	r7, r1
  if (distance < _minCM || distance > _maxCM){
   d4272:	4602      	mov	r2, r0
   d4274:	460b      	mov	r3, r1
   d4276:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   d427a:	f001 ff8f 	bl	d619c <__aeabi_dcmpgt>
   d427e:	b930      	cbnz	r0, d428e <_ZN7HC_SR0413getDistanceCMEv+0x62>
   d4280:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   d4284:	4632      	mov	r2, r6
   d4286:	463b      	mov	r3, r7
   d4288:	f001 ff6a 	bl	d6160 <__aeabi_dcmplt>
   d428c:	b108      	cbz	r0, d4292 <_ZN7HC_SR0413getDistanceCMEv+0x66>
   return -1;
   d428e:	4f04      	ldr	r7, [pc, #16]	; (d42a0 <_ZN7HC_SR0413getDistanceCMEv+0x74>)
   d4290:	2600      	movs	r6, #0
}
   d4292:	ec47 6b10 	vmov	d0, r6, r7
   d4296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4298:	403d0000 	.word	0x403d0000
   d429c:	3fe00000 	.word	0x3fe00000
   d42a0:	bff00000 	.word	0xbff00000

000d42a4 <_ZN7HC_SR0415getDistanceInchEv>:
double HC_SR04::getDistanceInch(){
   d42a4:	b538      	push	{r3, r4, r5, lr}
  double distCM = getDistanceCM();
   d42a6:	f7ff ffc1 	bl	d422c <_ZN7HC_SR0413getDistanceCMEv>
   d42aa:	ec55 4b10 	vmov	r4, r5, d0
  if (distCM == -1){
   d42ae:	4b09      	ldr	r3, [pc, #36]	; (d42d4 <_ZN7HC_SR0415getDistanceInchEv+0x30>)
   d42b0:	ee10 0a10 	vmov	r0, s0
   d42b4:	2200      	movs	r2, #0
   d42b6:	4629      	mov	r1, r5
   d42b8:	f001 ff48 	bl	d614c <__aeabi_dcmpeq>
   d42bc:	b938      	cbnz	r0, d42ce <_ZN7HC_SR0415getDistanceInchEv+0x2a>
  return (distCM / 2.5);
   d42be:	4620      	mov	r0, r4
   d42c0:	4629      	mov	r1, r5
   d42c2:	4b05      	ldr	r3, [pc, #20]	; (d42d8 <_ZN7HC_SR0415getDistanceInchEv+0x34>)
   d42c4:	2200      	movs	r2, #0
   d42c6:	f001 fe03 	bl	d5ed0 <__aeabi_ddiv>
   d42ca:	4604      	mov	r4, r0
   d42cc:	460d      	mov	r5, r1
}
   d42ce:	ec45 4b10 	vmov	d0, r4, r5
   d42d2:	bd38      	pop	{r3, r4, r5, pc}
   d42d4:	bff00000 	.word	0xbff00000
   d42d8:	40040000 	.word	0x40040000

000d42dc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <os_mutex_recursive_create+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	00030248 	.word	0x00030248

000d42ec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <HAL_RNG_GetRandomNumber+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	685b      	ldr	r3, [r3, #4]
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	00030218 	.word	0x00030218

000d42fc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <HAL_Delay_Microseconds+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	68db      	ldr	r3, [r3, #12]
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	00030218 	.word	0x00030218

000d430c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	691b      	ldr	r3, [r3, #16]
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	00030218 	.word	0x00030218

000d431c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	695b      	ldr	r3, [r3, #20]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	00030218 	.word	0x00030218

000d432c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <hal_rtc_time_is_valid+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	00030218 	.word	0x00030218

000d433c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <hal_rtc_get_time+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	00030218 	.word	0x00030218

000d434c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <HAL_Pin_Mode+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	689b      	ldr	r3, [r3, #8]
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	0003022c 	.word	0x0003022c

000d435c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <HAL_Get_Pin_Mode+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	68db      	ldr	r3, [r3, #12]
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	0003022c 	.word	0x0003022c

000d436c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <HAL_GPIO_Write+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	691b      	ldr	r3, [r3, #16]
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	0003022c 	.word	0x0003022c

000d437c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <HAL_GPIO_Read+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	695b      	ldr	r3, [r3, #20]
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	0003022c 	.word	0x0003022c

000d438c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <hal_i2c_write+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	6a1b      	ldr	r3, [r3, #32]
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	00030228 	.word	0x00030228

000d439c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <hal_i2c_available+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	00030228 	.word	0x00030228

000d43ac <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <hal_i2c_read+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	00030228 	.word	0x00030228

000d43bc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <hal_i2c_peek+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	00030228 	.word	0x00030228

000d43cc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <hal_i2c_flush+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	00030228 	.word	0x00030228

000d43dc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <hal_i2c_is_enabled+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	00030228 	.word	0x00030228

000d43ec <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <hal_i2c_init+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	00030228 	.word	0x00030228

000d43fc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <inet_inet_ntop+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	695b      	ldr	r3, [r3, #20]
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	00030264 	.word	0x00030264

000d440c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <netdb_freeaddrinfo+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	689b      	ldr	r3, [r3, #8]
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	00030268 	.word	0x00030268

000d441c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <netdb_getaddrinfo+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	68db      	ldr	r3, [r3, #12]
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	00030268 	.word	0x00030268

000d442c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <hal_spi_init+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	69db      	ldr	r3, [r3, #28]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	00030230 	.word	0x00030230

000d443c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <hal_spi_is_enabled+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	6a1b      	ldr	r3, [r3, #32]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	00030230 	.word	0x00030230

000d444c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <hal_usart_init+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	681b      	ldr	r3, [r3, #0]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	0003023c 	.word	0x0003023c

000d445c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <hal_usart_write+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	68db      	ldr	r3, [r3, #12]
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	0003023c 	.word	0x0003023c

000d446c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <hal_usart_available+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	691b      	ldr	r3, [r3, #16]
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	0003023c 	.word	0x0003023c

000d447c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <hal_usart_read+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	695b      	ldr	r3, [r3, #20]
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	0003023c 	.word	0x0003023c

000d448c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <hal_usart_peek+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	699b      	ldr	r3, [r3, #24]
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	0003023c 	.word	0x0003023c

000d449c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <hal_usart_flush+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	69db      	ldr	r3, [r3, #28]
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	0003023c 	.word	0x0003023c

000d44ac <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <hal_usart_is_enabled+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	6a1b      	ldr	r3, [r3, #32]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	0003023c 	.word	0x0003023c

000d44bc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <hal_usart_available_data_for_write+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	0003023c 	.word	0x0003023c

000d44cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <HAL_USB_USART_Init+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	681b      	ldr	r3, [r3, #0]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	0003024c 	.word	0x0003024c

000d44dc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <HAL_USB_USART_Available_Data+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	691b      	ldr	r3, [r3, #16]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	0003024c 	.word	0x0003024c

000d44ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	695b      	ldr	r3, [r3, #20]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	0003024c 	.word	0x0003024c

000d44fc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <HAL_USB_USART_Receive_Data+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	699b      	ldr	r3, [r3, #24]
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	0003024c 	.word	0x0003024c

000d450c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <HAL_USB_USART_Send_Data+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	69db      	ldr	r3, [r3, #28]
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	0003024c 	.word	0x0003024c

000d451c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <HAL_USB_USART_Flush_Data+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	6a1b      	ldr	r3, [r3, #32]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	0003024c 	.word	0x0003024c

000d452c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <system_mode+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	681b      	ldr	r3, [r3, #0]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030220 	.word	0x00030220

000d453c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <set_system_mode+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	685b      	ldr	r3, [r3, #4]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030220 	.word	0x00030220

000d454c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <system_delay_ms+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	695b      	ldr	r3, [r3, #20]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	00030220 	.word	0x00030220

000d455c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <application_thread_current+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030220 	.word	0x00030220

000d456c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <application_thread_invoke+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030220 	.word	0x00030220

000d457c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <system_thread_get_state+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030220 	.word	0x00030220

000d458c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b03      	ldr	r3, [pc, #12]	; (d459c <system_ctrl_set_app_request_handler+0x10>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4596:	9301      	str	r3, [sp, #4]
   d4598:	bd08      	pop	{r3, pc}
   d459a:	0000      	.short	0x0000
   d459c:	00030220 	.word	0x00030220

000d45a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b03      	ldr	r3, [pc, #12]	; (d45b0 <system_ctrl_set_result+0x10>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d45aa:	9301      	str	r3, [sp, #4]
   d45ac:	bd08      	pop	{r3, pc}
   d45ae:	0000      	.short	0x0000
   d45b0:	00030220 	.word	0x00030220

000d45b4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <spark_process+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	689b      	ldr	r3, [r3, #8]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030244 	.word	0x00030244

000d45c4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <spark_cloud_flag_connected+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	695b      	ldr	r3, [r3, #20]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030244 	.word	0x00030244

000d45d4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <spark_send_event+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	6a1b      	ldr	r3, [r3, #32]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030244 	.word	0x00030244

000d45e4 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <spark_sync_time_pending+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030244 	.word	0x00030244

000d45f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <spark_set_random_seed_from_cloud_handler+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030244 	.word	0x00030244

000d4604 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <network_connect+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	685b      	ldr	r3, [r3, #4]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030240 	.word	0x00030240

000d4614 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <network_connecting+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	689b      	ldr	r3, [r3, #8]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030240 	.word	0x00030240

000d4624 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <network_disconnect+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	68db      	ldr	r3, [r3, #12]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030240 	.word	0x00030240

000d4634 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <network_ready+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	691b      	ldr	r3, [r3, #16]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030240 	.word	0x00030240

000d4644 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <network_on+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	695b      	ldr	r3, [r3, #20]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030240 	.word	0x00030240

000d4654 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <network_off+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	699b      	ldr	r3, [r3, #24]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030240 	.word	0x00030240

000d4664 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <network_listen+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	69db      	ldr	r3, [r3, #28]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030240 	.word	0x00030240

000d4674 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <network_listening+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6a1b      	ldr	r3, [r3, #32]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030240 	.word	0x00030240

000d4684 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <network_set_listen_timeout+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030240 	.word	0x00030240

000d4694 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <network_get_listen_timeout+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030240 	.word	0x00030240

000d46a4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <network_is_on+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030240 	.word	0x00030240

000d46b4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <network_is_off+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030240 	.word	0x00030240

000d46c4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <malloc+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	681b      	ldr	r3, [r3, #0]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003021c 	.word	0x0003021c

000d46d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <free+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	685b      	ldr	r3, [r3, #4]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003021c 	.word	0x0003021c

000d46e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <realloc+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	689b      	ldr	r3, [r3, #8]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003021c 	.word	0x0003021c

000d46f4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <abort+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003021c 	.word	0x0003021c

000d4704 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <_malloc_r+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003021c 	.word	0x0003021c

000d4714 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <newlib_impure_ptr_callback+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003021c 	.word	0x0003021c

000d4724 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4724:	2100      	movs	r1, #0
   d4726:	f7ff bf11 	b.w	d454c <system_delay_ms>

000d472a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d472a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d472c:	6883      	ldr	r3, [r0, #8]
   d472e:	4604      	mov	r4, r0
   d4730:	b90b      	cbnz	r3, d4736 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4732:	f001 f8e3 	bl	d58fc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4736:	68c3      	ldr	r3, [r0, #12]
   d4738:	4798      	blx	r3
      if (_M_manager)
   d473a:	68a3      	ldr	r3, [r4, #8]
   d473c:	b11b      	cbz	r3, d4746 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d473e:	2203      	movs	r2, #3
   d4740:	4621      	mov	r1, r4
   d4742:	4620      	mov	r0, r4
   d4744:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4746:	4620      	mov	r0, r4
   d4748:	2110      	movs	r1, #16
}
   d474a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d474e:	f001 b8d1 	b.w	d58f4 <_ZdlPvj>

000d4752 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4752:	b510      	push	{r4, lr}
          _M_dispose();
   d4754:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4756:	4604      	mov	r4, r0
          _M_dispose();
   d4758:	689b      	ldr	r3, [r3, #8]
   d475a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d475c:	68a3      	ldr	r3, [r4, #8]
   d475e:	3b01      	subs	r3, #1
   d4760:	60a3      	str	r3, [r4, #8]
   d4762:	b92b      	cbnz	r3, d4770 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4764:	6823      	ldr	r3, [r4, #0]
   d4766:	4620      	mov	r0, r4
   d4768:	68db      	ldr	r3, [r3, #12]
    }
   d476a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d476e:	4718      	bx	r3
    }
   d4770:	bd10      	pop	{r4, pc}

000d4772 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4772:	680b      	ldr	r3, [r1, #0]
   d4774:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4776:	b113      	cbz	r3, d477e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4778:	685a      	ldr	r2, [r3, #4]
   d477a:	3201      	adds	r2, #1
   d477c:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d477e:	4770      	bx	lr

000d4780 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4780:	b510      	push	{r4, lr}
   d4782:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d4784:	6800      	ldr	r0, [r0, #0]
   d4786:	b128      	cbz	r0, d4794 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d4788:	6843      	ldr	r3, [r0, #4]
   d478a:	3b01      	subs	r3, #1
   d478c:	6043      	str	r3, [r0, #4]
   d478e:	b90b      	cbnz	r3, d4794 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4790:	f7ff ffdf 	bl	d4752 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d4794:	4620      	mov	r0, r4
   d4796:	bd10      	pop	{r4, pc}

000d4798 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4798:	4802      	ldr	r0, [pc, #8]	; (d47a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d479a:	2300      	movs	r3, #0
   d479c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d479e:	f7ff bd9d 	b.w	d42dc <os_mutex_recursive_create>
   d47a2:	bf00      	nop
   d47a4:	2003e5a8 	.word	0x2003e5a8

000d47a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d47a8:	4770      	bx	lr

000d47aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d47aa:	2000      	movs	r0, #0
   d47ac:	4770      	bx	lr

000d47ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d47ae:	b510      	push	{r4, lr}
   d47b0:	2110      	movs	r1, #16
   d47b2:	4604      	mov	r4, r0
   d47b4:	f001 f89e 	bl	d58f4 <_ZdlPvj>
   d47b8:	4620      	mov	r0, r4
   d47ba:	bd10      	pop	{r4, pc}

000d47bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d47bc:	b508      	push	{r3, lr}
      { delete this; }
   d47be:	f7ff fff6 	bl	d47ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d47c2:	bd08      	pop	{r3, pc}

000d47c4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d47c4:	b510      	push	{r4, lr}
      if (_M_manager)
   d47c6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d47c8:	4604      	mov	r4, r0
      if (_M_manager)
   d47ca:	b113      	cbz	r3, d47d2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d47cc:	2203      	movs	r2, #3
   d47ce:	4601      	mov	r1, r0
   d47d0:	4798      	blx	r3
    }
   d47d2:	4620      	mov	r0, r4
   d47d4:	bd10      	pop	{r4, pc}

000d47d6 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d47d6:	b530      	push	{r4, r5, lr}
        type_(type) {
   d47d8:	2200      	movs	r2, #0
   d47da:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d47de:	6002      	str	r2, [r0, #0]
   d47e0:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d47e2:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d47e4:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d47e6:	680c      	ldr	r4, [r1, #0]
   d47e8:	8085      	strh	r5, [r0, #4]
   d47ea:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d47ec:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d47ee:	bd30      	pop	{r4, r5, pc}

000d47f0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d47f0:	b510      	push	{r4, lr}
   d47f2:	4604      	mov	r4, r0
    free((void*)msg_);
   d47f4:	6800      	ldr	r0, [r0, #0]
   d47f6:	f7ff ff6d 	bl	d46d4 <free>
}
   d47fa:	4620      	mov	r0, r4
   d47fc:	bd10      	pop	{r4, pc}

000d47fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d47fe:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4800:	68c4      	ldr	r4, [r0, #12]
   d4802:	b1f4      	cbz	r4, d4842 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4804:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4806:	2b02      	cmp	r3, #2
   d4808:	d103      	bne.n	d4812 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d480a:	f104 000c 	add.w	r0, r4, #12
   d480e:	f7ff ffef 	bl	d47f0 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4812:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4814:	b135      	cbz	r5, d4824 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d4816:	4628      	mov	r0, r5
   d4818:	f7ff ffd4 	bl	d47c4 <_ZNSt14_Function_baseD1Ev>
   d481c:	2110      	movs	r1, #16
   d481e:	4628      	mov	r0, r5
   d4820:	f001 f868 	bl	d58f4 <_ZdlPvj>
   d4824:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4826:	b135      	cbz	r5, d4836 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4828:	4628      	mov	r0, r5
   d482a:	f7ff ffcb 	bl	d47c4 <_ZNSt14_Function_baseD1Ev>
   d482e:	2110      	movs	r1, #16
   d4830:	4628      	mov	r0, r5
   d4832:	f001 f85f 	bl	d58f4 <_ZdlPvj>
   d4836:	4620      	mov	r0, r4
   d4838:	2114      	movs	r1, #20
   d483a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d483e:	f001 b859 	b.w	d58f4 <_ZdlPvj>
   d4842:	bd38      	pop	{r3, r4, r5, pc}

000d4844 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4844:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4846:	460e      	mov	r6, r1
   d4848:	4604      	mov	r4, r0
   d484a:	f856 3b04 	ldr.w	r3, [r6], #4
   d484e:	9300      	str	r3, [sp, #0]
   d4850:	460d      	mov	r5, r1
   d4852:	a801      	add	r0, sp, #4
   d4854:	4631      	mov	r1, r6
   d4856:	f7ff ff8c 	bl	d4772 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d485a:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d485c:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d485e:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4860:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4862:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4864:	2300      	movs	r3, #0
   d4866:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4868:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d486a:	f7ff ff89 	bl	d4780 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d486e:	4630      	mov	r0, r6
   d4870:	f7ff ff86 	bl	d4780 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4874:	4628      	mov	r0, r5
   d4876:	2108      	movs	r1, #8
   d4878:	f001 f83c 	bl	d58f4 <_ZdlPvj>
        return p;
    }
   d487c:	4620      	mov	r0, r4
   d487e:	b002      	add	sp, #8
   d4880:	bd70      	pop	{r4, r5, r6, pc}

000d4882 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d4882:	b513      	push	{r0, r1, r4, lr}
   d4884:	460b      	mov	r3, r1
   d4886:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4888:	e9d0 0100 	ldrd	r0, r1, [r0]
   d488c:	466c      	mov	r4, sp
   d488e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4892:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4896:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d489a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d489e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d48a2:	b002      	add	sp, #8
   d48a4:	bd10      	pop	{r4, pc}

000d48a6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d48a6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d48a8:	b510      	push	{r4, lr}
      if (_M_empty())
   d48aa:	b90a      	cbnz	r2, d48b0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d48ac:	f001 f826 	bl	d58fc <_ZSt25__throw_bad_function_callv>
    }
   d48b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d48b4:	68c3      	ldr	r3, [r0, #12]
   d48b6:	4718      	bx	r3

000d48b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d48b8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d48ba:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d48bc:	f100 0110 	add.w	r1, r0, #16
   d48c0:	f7ff fff1 	bl	d48a6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d48c4:	bd08      	pop	{r3, pc}

000d48c6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d48c6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d48c8:	b510      	push	{r4, lr}
      if (_M_empty())
   d48ca:	b90a      	cbnz	r2, d48d0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d48cc:	f001 f816 	bl	d58fc <_ZSt25__throw_bad_function_callv>
    }
   d48d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d48d4:	68c3      	ldr	r3, [r0, #12]
   d48d6:	4718      	bx	r3

000d48d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d48d8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d48da:	6800      	ldr	r0, [r0, #0]
   d48dc:	f100 0110 	add.w	r1, r0, #16
   d48e0:	f7ff fff1 	bl	d48c6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d48e4:	bd08      	pop	{r3, pc}
	...

000d48e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d48e8:	b538      	push	{r3, r4, r5, lr}
   d48ea:	2300      	movs	r3, #0
   d48ec:	4604      	mov	r4, r0
   d48ee:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d48f0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d48f2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d48f4:	f7ff fbcd 	bl	d4092 <_Znwj>
   d48f8:	b128      	cbz	r0, d4906 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d48fa:	2301      	movs	r3, #1
   d48fc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4900:	4b02      	ldr	r3, [pc, #8]	; (d490c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4902:	6003      	str	r3, [r0, #0]
   d4904:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4906:	6020      	str	r0, [r4, #0]
	}
   d4908:	4620      	mov	r0, r4
   d490a:	bd38      	pop	{r3, r4, r5, pc}
   d490c:	000d66e8 	.word	0x000d66e8

000d4910 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d4910:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4912:	2300      	movs	r3, #0
   d4914:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4916:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4918:	4604      	mov	r4, r0
   d491a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d491c:	b12b      	cbz	r3, d492a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d491e:	2202      	movs	r2, #2
   d4920:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4922:	68eb      	ldr	r3, [r5, #12]
   d4924:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4926:	68ab      	ldr	r3, [r5, #8]
   d4928:	60a3      	str	r3, [r4, #8]
    }
   d492a:	4620      	mov	r0, r4
   d492c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4930 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d4930:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4932:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4934:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4936:	4668      	mov	r0, sp
   d4938:	f7ff ff4d 	bl	d47d6 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d493c:	f04f 0302 	mov.w	r3, #2
   d4940:	e8d4 2f4f 	ldrexb	r2, [r4]
   d4944:	2a00      	cmp	r2, #0
   d4946:	d103      	bne.n	d4950 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4948:	e8c4 3f41 	strexb	r1, r3, [r4]
   d494c:	2900      	cmp	r1, #0
   d494e:	d1f7      	bne.n	d4940 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d4950:	d125      	bne.n	d499e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d4952:	f104 050c 	add.w	r5, r4, #12
   d4956:	4669      	mov	r1, sp
   d4958:	4628      	mov	r0, r5
   d495a:	f7ff ff3c 	bl	d47d6 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d495e:	f3bf 8f5b 	dmb	ish
   d4962:	2301      	movs	r3, #1
   d4964:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4966:	2000      	movs	r0, #0
   d4968:	f104 0308 	add.w	r3, r4, #8
   d496c:	f3bf 8f5b 	dmb	ish
   d4970:	e853 6f00 	ldrex	r6, [r3]
   d4974:	e843 0200 	strex	r2, r0, [r3]
   d4978:	2a00      	cmp	r2, #0
   d497a:	d1f9      	bne.n	d4970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d497c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4980:	b16e      	cbz	r6, d499e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4982:	f7ff fdeb 	bl	d455c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4986:	b178      	cbz	r0, d49a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4988:	4629      	mov	r1, r5
   d498a:	4630      	mov	r0, r6
   d498c:	f7ff ff8b 	bl	d48a6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4990:	4630      	mov	r0, r6
   d4992:	f7ff ff17 	bl	d47c4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4996:	2110      	movs	r1, #16
   d4998:	4630      	mov	r0, r6
   d499a:	f000 ffab 	bl	d58f4 <_ZdlPvj>
        p_->setError(std::move(error));
   d499e:	4668      	mov	r0, sp
   d49a0:	f7ff ff26 	bl	d47f0 <_ZN8particle5ErrorD1Ev>
    }
   d49a4:	b009      	add	sp, #36	; 0x24
   d49a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d49a8:	4631      	mov	r1, r6
   d49aa:	a802      	add	r0, sp, #8
   d49ac:	f7ff ffb0 	bl	d4910 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d49b0:	68e0      	ldr	r0, [r4, #12]
   d49b2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d49b6:	b108      	cbz	r0, d49bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d49b8:	f001 fdf4 	bl	d65a4 <strdup>
        type_(type) {
   d49bc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d49be:	2010      	movs	r0, #16
   d49c0:	f8ad 501c 	strh.w	r5, [sp, #28]
   d49c4:	f7ff fb65 	bl	d4092 <_Znwj>
   d49c8:	4605      	mov	r5, r0
   d49ca:	b1e8      	cbz	r0, d4a08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d49cc:	2700      	movs	r7, #0
   d49ce:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d49d0:	2018      	movs	r0, #24
   d49d2:	f7ff fb5e 	bl	d4092 <_Znwj>
   d49d6:	4604      	mov	r4, r0
   d49d8:	b188      	cbz	r0, d49fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d49da:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d49dc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d49de:	a802      	add	r0, sp, #8
   d49e0:	f7ff ff4f 	bl	d4882 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49e4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d49e6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d49e8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49ea:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d49ec:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d49ee:	a906      	add	r1, sp, #24
   d49f0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d49f2:	60e3      	str	r3, [r4, #12]
   d49f4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d49f8:	9205      	str	r2, [sp, #20]
   d49fa:	f7ff feec 	bl	d47d6 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d49fe:	4b08      	ldr	r3, [pc, #32]	; (d4a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d4a00:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4a02:	4b08      	ldr	r3, [pc, #32]	; (d4a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4a04:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4a06:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d4a08:	a806      	add	r0, sp, #24
   d4a0a:	f7ff fef1 	bl	d47f0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4a0e:	a802      	add	r0, sp, #8
   d4a10:	f7ff fed8 	bl	d47c4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4a14:	2200      	movs	r2, #0
   d4a16:	4629      	mov	r1, r5
   d4a18:	4803      	ldr	r0, [pc, #12]	; (d4a28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d4a1a:	f7ff fda7 	bl	d456c <application_thread_invoke>
   d4a1e:	e7b7      	b.n	d4990 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d4a20:	000d48b9 	.word	0x000d48b9
   d4a24:	000d4b51 	.word	0x000d4b51
   d4a28:	000d472b 	.word	0x000d472b

000d4a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4a30:	b08a      	sub	sp, #40	; 0x28
   d4a32:	4605      	mov	r5, r0
   d4a34:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d4a38:	460c      	mov	r4, r1
   d4a3a:	4617      	mov	r7, r2
   d4a3c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4a3e:	f7ff fdc1 	bl	d45c4 <spark_cloud_flag_connected>
   d4a42:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d4a44:	4682      	mov	sl, r0
   d4a46:	bb38      	cbnz	r0, d4a98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d4a48:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4a4c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4a4e:	a905      	add	r1, sp, #20
   d4a50:	4630      	mov	r0, r6
   d4a52:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4a56:	f7ff febe 	bl	d47d6 <_ZN8particle5ErrorC1EOS0_>
   d4a5a:	2014      	movs	r0, #20
   d4a5c:	f7ff fb19 	bl	d4092 <_Znwj>
   d4a60:	4604      	mov	r4, r0
   d4a62:	b148      	cbz	r0, d4a78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4a64:	2302      	movs	r3, #2
   d4a66:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4a68:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4a6a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4a6e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d4a70:	4631      	mov	r1, r6
   d4a72:	300c      	adds	r0, #12
   d4a74:	f7ff feaf 	bl	d47d6 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4a78:	4628      	mov	r0, r5
	: __shared_count(__p)
   d4a7a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4a7c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d4a80:	f7ff ff32 	bl	d48e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4a84:	4630      	mov	r0, r6
   d4a86:	f7ff feb3 	bl	d47f0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4a8a:	a805      	add	r0, sp, #20
   d4a8c:	f7ff feb0 	bl	d47f0 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d4a90:	4628      	mov	r0, r5
   d4a92:	b00a      	add	sp, #40	; 0x28
   d4a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4a98:	230c      	movs	r3, #12
   d4a9a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4a9e:	2014      	movs	r0, #20
   d4aa0:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d4aa4:	9307      	str	r3, [sp, #28]
   d4aa6:	f7ff faf4 	bl	d4092 <_Znwj>
   d4aaa:	4601      	mov	r1, r0
   d4aac:	b128      	cbz	r0, d4aba <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4aae:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d4ab2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4ab6:	f880 a001 	strb.w	sl, [r0, #1]
   d4aba:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4abc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d4abe:	f7ff ff13 	bl	d48e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d4ac2:	4b22      	ldr	r3, [pc, #136]	; (d4b4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d4ac4:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4ac6:	2008      	movs	r0, #8
   d4ac8:	f7ff fae3 	bl	d4092 <_Znwj>
   d4acc:	4682      	mov	sl, r0
   d4ace:	b128      	cbz	r0, d4adc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4ad0:	9b03      	ldr	r3, [sp, #12]
   d4ad2:	f840 3b04 	str.w	r3, [r0], #4
   d4ad6:	a904      	add	r1, sp, #16
   d4ad8:	f7ff fe4b 	bl	d4772 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4adc:	9600      	str	r6, [sp, #0]
   d4ade:	fa5f f389 	uxtb.w	r3, r9
   d4ae2:	4642      	mov	r2, r8
   d4ae4:	4639      	mov	r1, r7
   d4ae6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d4ae8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4aec:	f7ff fd72 	bl	d45d4 <spark_send_event>
   d4af0:	b9b8      	cbnz	r0, d4b22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d4af2:	9b03      	ldr	r3, [sp, #12]
   d4af4:	785b      	ldrb	r3, [r3, #1]
   d4af6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4afa:	b993      	cbnz	r3, d4b22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d4afc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d4b00:	a905      	add	r1, sp, #20
   d4b02:	a803      	add	r0, sp, #12
   d4b04:	9205      	str	r2, [sp, #20]
   d4b06:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4b0a:	f7ff ff11 	bl	d4930 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4b0e:	a805      	add	r0, sp, #20
   d4b10:	f7ff fe6e 	bl	d47f0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4b14:	a805      	add	r0, sp, #20
   d4b16:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4b18:	f7ff fe94 	bl	d4844 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d4b1c:	a806      	add	r0, sp, #24
   d4b1e:	f7ff fe2f 	bl	d4780 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b22:	9b03      	ldr	r3, [sp, #12]
   d4b24:	9305      	str	r3, [sp, #20]
   d4b26:	a904      	add	r1, sp, #16
   d4b28:	a806      	add	r0, sp, #24
   d4b2a:	f7ff fe22 	bl	d4772 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4b2e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4b30:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4b32:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d4b34:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d4b36:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d4b38:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d4b3a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d4b3c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d4b3e:	f7ff fe1f 	bl	d4780 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b42:	a804      	add	r0, sp, #16
   d4b44:	f7ff fe1c 	bl	d4780 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d4b48:	e7a2      	b.n	d4a90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d4b4a:	bf00      	nop
   d4b4c:	000d4c15 	.word	0x000d4c15

000d4b50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d4b50:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b54:	4605      	mov	r5, r0
	  switch (__op)
   d4b56:	d007      	beq.n	d4b68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d4b58:	2a03      	cmp	r2, #3
   d4b5a:	d018      	beq.n	d4b8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d4b5c:	2a01      	cmp	r2, #1
   d4b5e:	d101      	bne.n	d4b64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4b60:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4b62:	6003      	str	r3, [r0, #0]
	}
   d4b64:	2000      	movs	r0, #0
   d4b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4b68:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d4b6a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4b6c:	f7ff fa91 	bl	d4092 <_Znwj>
   d4b70:	4604      	mov	r4, r0
   d4b72:	b150      	cbz	r0, d4b8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4b74:	4631      	mov	r1, r6
   d4b76:	f7ff fecb 	bl	d4910 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4b7a:	6930      	ldr	r0, [r6, #16]
   d4b7c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4b80:	b108      	cbz	r0, d4b86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d4b82:	f001 fd0f 	bl	d65a4 <strdup>
        type_(type) {
   d4b86:	6120      	str	r0, [r4, #16]
   d4b88:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d4b8a:	602c      	str	r4, [r5, #0]
	}
   d4b8c:	e7ea      	b.n	d4b64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4b8e:	6804      	ldr	r4, [r0, #0]
   d4b90:	2c00      	cmp	r4, #0
   d4b92:	d0e7      	beq.n	d4b64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d4b94:	f104 0010 	add.w	r0, r4, #16
   d4b98:	f7ff fe2a 	bl	d47f0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	f7ff fe11 	bl	d47c4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4ba2:	2118      	movs	r1, #24
   d4ba4:	4620      	mov	r0, r4
   d4ba6:	f000 fea5 	bl	d58f4 <_ZdlPvj>
   d4baa:	e7db      	b.n	d4b64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d4bac <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d4bac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4bae:	2300      	movs	r3, #0
   d4bb0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4bb2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4bb4:	4604      	mov	r4, r0
   d4bb6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4bb8:	b12b      	cbz	r3, d4bc6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4bba:	2202      	movs	r2, #2
   d4bbc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4bbe:	68eb      	ldr	r3, [r5, #12]
   d4bc0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4bc2:	68ab      	ldr	r3, [r5, #8]
   d4bc4:	60a3      	str	r3, [r4, #8]
    }
   d4bc6:	4620      	mov	r0, r4
   d4bc8:	bd38      	pop	{r3, r4, r5, pc}

000d4bca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d4bca:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4bcc:	b570      	push	{r4, r5, r6, lr}
   d4bce:	4604      	mov	r4, r0
	  switch (__op)
   d4bd0:	d007      	beq.n	d4be2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d4bd2:	2a03      	cmp	r2, #3
   d4bd4:	d012      	beq.n	d4bfc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d4bd6:	2a01      	cmp	r2, #1
   d4bd8:	d101      	bne.n	d4bde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4bda:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4bdc:	6003      	str	r3, [r0, #0]
	}
   d4bde:	2000      	movs	r0, #0
   d4be0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4be2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d4be4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4be6:	f7ff fa54 	bl	d4092 <_Znwj>
   d4bea:	4605      	mov	r5, r0
   d4bec:	b120      	cbz	r0, d4bf8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d4bee:	4631      	mov	r1, r6
   d4bf0:	f7ff ffdc 	bl	d4bac <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4bf4:	7c33      	ldrb	r3, [r6, #16]
   d4bf6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d4bf8:	6025      	str	r5, [r4, #0]
	}
   d4bfa:	e7f0      	b.n	d4bde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4bfc:	6804      	ldr	r4, [r0, #0]
   d4bfe:	2c00      	cmp	r4, #0
   d4c00:	d0ed      	beq.n	d4bde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d4c02:	4620      	mov	r0, r4
   d4c04:	f7ff fdde 	bl	d47c4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4c08:	2114      	movs	r1, #20
   d4c0a:	4620      	mov	r0, r4
   d4c0c:	f000 fe72 	bl	d58f4 <_ZdlPvj>
   d4c10:	e7e5      	b.n	d4bde <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d4c14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4c14:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c16:	b089      	sub	sp, #36	; 0x24
   d4c18:	4604      	mov	r4, r0
   d4c1a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4c1c:	a801      	add	r0, sp, #4
   d4c1e:	4611      	mov	r1, r2
   d4c20:	f7ff fe10 	bl	d4844 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4c24:	b1a4      	cbz	r4, d4c50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4c26:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4c28:	b11d      	cbz	r5, d4c32 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d4c2a:	4628      	mov	r0, r5
   d4c2c:	f001 fcba 	bl	d65a4 <strdup>
   d4c30:	4605      	mov	r5, r0
   d4c32:	a801      	add	r0, sp, #4
   d4c34:	a903      	add	r1, sp, #12
        type_(type) {
   d4c36:	9503      	str	r5, [sp, #12]
   d4c38:	f8ad 4010 	strh.w	r4, [sp, #16]
   d4c3c:	f7ff fe78 	bl	d4930 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4c40:	a803      	add	r0, sp, #12
   d4c42:	f7ff fdd5 	bl	d47f0 <_ZN8particle5ErrorD1Ev>
   d4c46:	a802      	add	r0, sp, #8
   d4c48:	f7ff fd9a 	bl	d4780 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4c4c:	b009      	add	sp, #36	; 0x24
   d4c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4c50:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4c52:	2301      	movs	r3, #1
   d4c54:	e8d5 2f4f 	ldrexb	r2, [r5]
   d4c58:	2a00      	cmp	r2, #0
   d4c5a:	d103      	bne.n	d4c64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d4c5c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d4c60:	2900      	cmp	r1, #0
   d4c62:	d1f7      	bne.n	d4c54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d4c64:	d1ef      	bne.n	d4c46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d4c66:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d4c68:	f3bf 8f5b 	dmb	ish
   d4c6c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4c6e:	1d2b      	adds	r3, r5, #4
   d4c70:	f3bf 8f5b 	dmb	ish
   d4c74:	e853 6f00 	ldrex	r6, [r3]
   d4c78:	e843 4200 	strex	r2, r4, [r3]
   d4c7c:	2a00      	cmp	r2, #0
   d4c7e:	d1f9      	bne.n	d4c74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d4c80:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4c84:	2e00      	cmp	r6, #0
   d4c86:	d0de      	beq.n	d4c46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d4c88:	4620      	mov	r0, r4
   d4c8a:	f7ff fc67 	bl	d455c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4c8e:	4607      	mov	r7, r0
   d4c90:	b160      	cbz	r0, d4cac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4c92:	f105 010c 	add.w	r1, r5, #12
   d4c96:	4630      	mov	r0, r6
   d4c98:	f7ff fe15 	bl	d48c6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d4c9c:	4630      	mov	r0, r6
   d4c9e:	f7ff fd91 	bl	d47c4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4ca2:	2110      	movs	r1, #16
   d4ca4:	4630      	mov	r0, r6
   d4ca6:	f000 fe25 	bl	d58f4 <_ZdlPvj>
   d4caa:	e7cc      	b.n	d4c46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4cac:	4631      	mov	r1, r6
   d4cae:	a803      	add	r0, sp, #12
   d4cb0:	f7ff ff7c 	bl	d4bac <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4cb4:	7b2b      	ldrb	r3, [r5, #12]
   d4cb6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4cba:	2010      	movs	r0, #16
   d4cbc:	f7ff f9e9 	bl	d4092 <_Znwj>
   d4cc0:	4605      	mov	r5, r0
   d4cc2:	b1d0      	cbz	r0, d4cfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d4cc4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4cc6:	2014      	movs	r0, #20
   d4cc8:	f7ff f9e3 	bl	d4092 <_Znwj>
   d4ccc:	4604      	mov	r4, r0
   d4cce:	b178      	cbz	r0, d4cf0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d4cd0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4cd2:	4601      	mov	r1, r0
   d4cd4:	a803      	add	r0, sp, #12
   d4cd6:	f7ff fdd4 	bl	d4882 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cda:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4cdc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cde:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ce0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d4ce2:	9205      	str	r2, [sp, #20]
   d4ce4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ce6:	60e3      	str	r3, [r4, #12]
   d4ce8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d4cec:	9206      	str	r2, [sp, #24]
   d4cee:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d4cf0:	4b06      	ldr	r3, [pc, #24]	; (d4d0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d4cf2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4cf4:	4b06      	ldr	r3, [pc, #24]	; (d4d10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4cf6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4cf8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d4cfa:	a803      	add	r0, sp, #12
   d4cfc:	f7ff fd62 	bl	d47c4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4d00:	2200      	movs	r2, #0
   d4d02:	4629      	mov	r1, r5
   d4d04:	4803      	ldr	r0, [pc, #12]	; (d4d14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d4d06:	f7ff fc31 	bl	d456c <application_thread_invoke>
   d4d0a:	e7c7      	b.n	d4c9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d4d0c:	000d48d9 	.word	0x000d48d9
   d4d10:	000d4bcb 	.word	0x000d4bcb
   d4d14:	000d472b 	.word	0x000d472b

000d4d18 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d18:	2200      	movs	r2, #0
   d4d1a:	6840      	ldr	r0, [r0, #4]
   d4d1c:	4611      	mov	r1, r2
   d4d1e:	f7ff bca9 	b.w	d4674 <network_listening>

000d4d22 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4d22:	2200      	movs	r2, #0
   d4d24:	6840      	ldr	r0, [r0, #4]
   d4d26:	4611      	mov	r1, r2
   d4d28:	f7ff bcb4 	b.w	d4694 <network_get_listen_timeout>

000d4d2c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4d2c:	6840      	ldr	r0, [r0, #4]
   d4d2e:	2200      	movs	r2, #0
   d4d30:	f7ff bca8 	b.w	d4684 <network_set_listen_timeout>

000d4d34 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d34:	6840      	ldr	r0, [r0, #4]
   d4d36:	2200      	movs	r2, #0
   d4d38:	f081 0101 	eor.w	r1, r1, #1
   d4d3c:	f7ff bc92 	b.w	d4664 <network_listen>

000d4d40 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4d40:	2300      	movs	r3, #0
   d4d42:	6840      	ldr	r0, [r0, #4]
   d4d44:	461a      	mov	r2, r3
   d4d46:	4619      	mov	r1, r3
   d4d48:	f7ff bc84 	b.w	d4654 <network_off>

000d4d4c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4d4c:	2300      	movs	r3, #0
   d4d4e:	6840      	ldr	r0, [r0, #4]
   d4d50:	461a      	mov	r2, r3
   d4d52:	4619      	mov	r1, r3
   d4d54:	f7ff bc76 	b.w	d4644 <network_on>

000d4d58 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4d58:	2200      	movs	r2, #0
   d4d5a:	6840      	ldr	r0, [r0, #4]
   d4d5c:	4611      	mov	r1, r2
   d4d5e:	f7ff bc69 	b.w	d4634 <network_ready>

000d4d62 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4d62:	2200      	movs	r2, #0
   d4d64:	6840      	ldr	r0, [r0, #4]
   d4d66:	4611      	mov	r1, r2
   d4d68:	f7ff bc54 	b.w	d4614 <network_connecting>

000d4d6c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d6c:	6840      	ldr	r0, [r0, #4]
   d4d6e:	2200      	movs	r2, #0
   d4d70:	2102      	movs	r1, #2
   d4d72:	f7ff bc57 	b.w	d4624 <network_disconnect>

000d4d76 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d76:	2300      	movs	r3, #0
   d4d78:	6840      	ldr	r0, [r0, #4]
   d4d7a:	461a      	mov	r2, r3
   d4d7c:	f7ff bc42 	b.w	d4604 <network_connect>

000d4d80 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4d80:	4b02      	ldr	r3, [pc, #8]	; (d4d8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4d82:	2203      	movs	r2, #3
   d4d84:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4d86:	4a02      	ldr	r2, [pc, #8]	; (d4d90 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d88:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4d8a:	4770      	bx	lr
   d4d8c:	2003e5ac 	.word	0x2003e5ac
   d4d90:	000d6704 	.word	0x000d6704

000d4d94 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4d94:	4770      	bx	lr

000d4d96 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d98:	4606      	mov	r6, r0
   d4d9a:	4615      	mov	r5, r2
   d4d9c:	460c      	mov	r4, r1
   d4d9e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4da0:	42bc      	cmp	r4, r7
   d4da2:	d006      	beq.n	d4db2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4da4:	6833      	ldr	r3, [r6, #0]
   d4da6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4daa:	689b      	ldr	r3, [r3, #8]
   d4dac:	4630      	mov	r0, r6
   d4dae:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4db0:	e7f6      	b.n	d4da0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4db2:	4628      	mov	r0, r5
   d4db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4db6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4db6:	7c00      	ldrb	r0, [r0, #16]
   d4db8:	2200      	movs	r2, #0
   d4dba:	f7ff bae7 	b.w	d438c <hal_i2c_write>

000d4dbe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4dbe:	7c00      	ldrb	r0, [r0, #16]
   d4dc0:	2100      	movs	r1, #0
   d4dc2:	f7ff baeb 	b.w	d439c <hal_i2c_available>

000d4dc6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4dc6:	7c00      	ldrb	r0, [r0, #16]
   d4dc8:	2100      	movs	r1, #0
   d4dca:	f7ff baef 	b.w	d43ac <hal_i2c_read>

000d4dce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4dce:	7c00      	ldrb	r0, [r0, #16]
   d4dd0:	2100      	movs	r1, #0
   d4dd2:	f7ff baf3 	b.w	d43bc <hal_i2c_peek>

000d4dd6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4dd6:	7c00      	ldrb	r0, [r0, #16]
   d4dd8:	2100      	movs	r1, #0
   d4dda:	f7ff baf7 	b.w	d43cc <hal_i2c_flush>

000d4dde <_ZN7TwoWireD0Ev>:
   d4dde:	b510      	push	{r4, lr}
   d4de0:	2114      	movs	r1, #20
   d4de2:	4604      	mov	r4, r0
   d4de4:	f000 fd86 	bl	d58f4 <_ZdlPvj>
   d4de8:	4620      	mov	r0, r4
   d4dea:	bd10      	pop	{r4, pc}

000d4dec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4dec:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4df2:	4604      	mov	r4, r0
   d4df4:	4608      	mov	r0, r1
   d4df6:	2100      	movs	r1, #0
   d4df8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4dfc:	4b03      	ldr	r3, [pc, #12]	; (d4e0c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4dfe:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4e00:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4e02:	4611      	mov	r1, r2
   d4e04:	f7ff faf2 	bl	d43ec <hal_i2c_init>
}
   d4e08:	4620      	mov	r0, r4
   d4e0a:	bd10      	pop	{r4, pc}
   d4e0c:	000d6740 	.word	0x000d6740

000d4e10 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e10:	4770      	bx	lr

000d4e12 <_ZN9IPAddressD0Ev>:
   d4e12:	b510      	push	{r4, lr}
   d4e14:	2118      	movs	r1, #24
   d4e16:	4604      	mov	r4, r0
   d4e18:	f000 fd6c 	bl	d58f4 <_ZdlPvj>
   d4e1c:	4620      	mov	r0, r4
   d4e1e:	bd10      	pop	{r4, pc}

000d4e20 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e20:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e22:	7d03      	ldrb	r3, [r0, #20]
   d4e24:	2b06      	cmp	r3, #6
{
   d4e26:	b08d      	sub	sp, #52	; 0x34
   d4e28:	460e      	mov	r6, r1
   d4e2a:	f100 0704 	add.w	r7, r0, #4
   d4e2e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4e32:	d012      	beq.n	d4e5a <_ZNK9IPAddress7printToER5Print+0x3a>
   d4e34:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4e38:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4e3c:	220a      	movs	r2, #10
   d4e3e:	4630      	mov	r0, r6
   d4e40:	f000 f93b 	bl	d50ba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e44:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e46:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4e48:	d019      	beq.n	d4e7e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4e4a:	2c00      	cmp	r4, #0
   d4e4c:	d0f4      	beq.n	d4e38 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4e4e:	212e      	movs	r1, #46	; 0x2e
   d4e50:	4630      	mov	r0, r6
   d4e52:	f000 f92f 	bl	d50b4 <_ZN5Print5printEc>
   d4e56:	4404      	add	r4, r0
   d4e58:	e7ee      	b.n	d4e38 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e5a:	232f      	movs	r3, #47	; 0x2f
   d4e5c:	466a      	mov	r2, sp
   d4e5e:	4639      	mov	r1, r7
   d4e60:	200a      	movs	r0, #10
		buf[0] = 0;
   d4e62:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e66:	f7ff fac9 	bl	d43fc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4e6a:	4668      	mov	r0, sp
   d4e6c:	f001 fbb7 	bl	d65de <strlen>
   d4e70:	6833      	ldr	r3, [r6, #0]
   d4e72:	4602      	mov	r2, r0
   d4e74:	68db      	ldr	r3, [r3, #12]
   d4e76:	4669      	mov	r1, sp
   d4e78:	4630      	mov	r0, r6
   d4e7a:	4798      	blx	r3
   d4e7c:	4604      	mov	r4, r0
    }
    return n;
}
   d4e7e:	4620      	mov	r0, r4
   d4e80:	b00d      	add	sp, #52	; 0x34
   d4e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e84 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4e84:	b510      	push	{r4, lr}
   d4e86:	4b05      	ldr	r3, [pc, #20]	; (d4e9c <_ZN9IPAddressC1Ev+0x18>)
   d4e88:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4e8a:	2211      	movs	r2, #17
   d4e8c:	f840 3b04 	str.w	r3, [r0], #4
   d4e90:	2100      	movs	r1, #0
   d4e92:	f001 fb5b 	bl	d654c <memset>
}
   d4e96:	4620      	mov	r0, r4
   d4e98:	bd10      	pop	{r4, pc}
   d4e9a:	bf00      	nop
   d4e9c:	000d6768 	.word	0x000d6768

000d4ea0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4ea0:	4603      	mov	r3, r0
   d4ea2:	4a07      	ldr	r2, [pc, #28]	; (d4ec0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ea4:	b510      	push	{r4, lr}
   d4ea6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4eaa:	f101 0210 	add.w	r2, r1, #16
   d4eae:	f851 4b04 	ldr.w	r4, [r1], #4
   d4eb2:	f843 4b04 	str.w	r4, [r3], #4
   d4eb6:	4291      	cmp	r1, r2
   d4eb8:	d1f9      	bne.n	d4eae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4eba:	780a      	ldrb	r2, [r1, #0]
   d4ebc:	701a      	strb	r2, [r3, #0]
}
   d4ebe:	bd10      	pop	{r4, pc}
   d4ec0:	000d6768 	.word	0x000d6768

000d4ec4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4ec4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4ec6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4eca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4ece:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4ed2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4ed6:	2304      	movs	r3, #4
   d4ed8:	6041      	str	r1, [r0, #4]
   d4eda:	7503      	strb	r3, [r0, #20]
}
   d4edc:	bd10      	pop	{r4, pc}

000d4ede <_ZN9IPAddressaSEPKh>:
{
   d4ede:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4ee0:	78cb      	ldrb	r3, [r1, #3]
   d4ee2:	9300      	str	r3, [sp, #0]
   d4ee4:	788b      	ldrb	r3, [r1, #2]
   d4ee6:	784a      	ldrb	r2, [r1, #1]
   d4ee8:	7809      	ldrb	r1, [r1, #0]
   d4eea:	f7ff ffeb 	bl	d4ec4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4eee:	b002      	add	sp, #8
   d4ef0:	bd10      	pop	{r4, pc}
	...

000d4ef4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4ef4:	4b01      	ldr	r3, [pc, #4]	; (d4efc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4ef6:	4a02      	ldr	r2, [pc, #8]	; (d4f00 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4ef8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4efa:	4770      	bx	lr
   d4efc:	2003e5b4 	.word	0x2003e5b4
   d4f00:	000d6774 	.word	0x000d6774

000d4f04 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4f04:	2300      	movs	r3, #0
   d4f06:	6840      	ldr	r0, [r0, #4]
   d4f08:	461a      	mov	r2, r3
   d4f0a:	f7ff bb7b 	b.w	d4604 <network_connect>

000d4f0e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4f0e:	6840      	ldr	r0, [r0, #4]
   d4f10:	2200      	movs	r2, #0
   d4f12:	2102      	movs	r1, #2
   d4f14:	f7ff bb86 	b.w	d4624 <network_disconnect>

000d4f18 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4f18:	2200      	movs	r2, #0
   d4f1a:	6840      	ldr	r0, [r0, #4]
   d4f1c:	4611      	mov	r1, r2
   d4f1e:	f7ff bb79 	b.w	d4614 <network_connecting>

000d4f22 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4f22:	2200      	movs	r2, #0
   d4f24:	6840      	ldr	r0, [r0, #4]
   d4f26:	4611      	mov	r1, r2
   d4f28:	f7ff bb84 	b.w	d4634 <network_ready>

000d4f2c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4f2c:	2300      	movs	r3, #0
   d4f2e:	6840      	ldr	r0, [r0, #4]
   d4f30:	461a      	mov	r2, r3
   d4f32:	4619      	mov	r1, r3
   d4f34:	f7ff bb86 	b.w	d4644 <network_on>

000d4f38 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4f38:	2300      	movs	r3, #0
   d4f3a:	6840      	ldr	r0, [r0, #4]
   d4f3c:	461a      	mov	r2, r3
   d4f3e:	4619      	mov	r1, r3
   d4f40:	f7ff bb88 	b.w	d4654 <network_off>

000d4f44 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4f44:	6840      	ldr	r0, [r0, #4]
   d4f46:	2100      	movs	r1, #0
   d4f48:	f7ff bbac 	b.w	d46a4 <network_is_on>

000d4f4c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4f4c:	6840      	ldr	r0, [r0, #4]
   d4f4e:	2100      	movs	r1, #0
   d4f50:	f7ff bbb0 	b.w	d46b4 <network_is_off>

000d4f54 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4f54:	6840      	ldr	r0, [r0, #4]
   d4f56:	2200      	movs	r2, #0
   d4f58:	f081 0101 	eor.w	r1, r1, #1
   d4f5c:	f7ff bb82 	b.w	d4664 <network_listen>

000d4f60 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4f60:	6840      	ldr	r0, [r0, #4]
   d4f62:	2200      	movs	r2, #0
   d4f64:	f7ff bb8e 	b.w	d4684 <network_set_listen_timeout>

000d4f68 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4f68:	2200      	movs	r2, #0
   d4f6a:	6840      	ldr	r0, [r0, #4]
   d4f6c:	4611      	mov	r1, r2
   d4f6e:	f7ff bb91 	b.w	d4694 <network_get_listen_timeout>

000d4f72 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4f72:	2200      	movs	r2, #0
   d4f74:	6840      	ldr	r0, [r0, #4]
   d4f76:	4611      	mov	r1, r2
   d4f78:	f7ff bb7c 	b.w	d4674 <network_listening>

000d4f7c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4f80:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4f82:	b095      	sub	sp, #84	; 0x54
   d4f84:	4616      	mov	r6, r2
   d4f86:	460d      	mov	r5, r1
   d4f88:	4607      	mov	r7, r0
    IPAddress addr;
   d4f8a:	f7ff ff7b 	bl	d4e84 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4f8e:	4621      	mov	r1, r4
   d4f90:	2218      	movs	r2, #24
   d4f92:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4f94:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4f96:	f001 fad9 	bl	d654c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4f9a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4f9c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4fa0:	4621      	mov	r1, r4
   d4fa2:	466b      	mov	r3, sp
   d4fa4:	aa0c      	add	r2, sp, #48	; 0x30
   d4fa6:	4630      	mov	r0, r6
   d4fa8:	f7ff fa38 	bl	d441c <netdb_getaddrinfo>
    if (!r) {
   d4fac:	4604      	mov	r4, r0
   d4fae:	2800      	cmp	r0, #0
   d4fb0:	d146      	bne.n	d5040 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4fb2:	4602      	mov	r2, r0
   d4fb4:	2101      	movs	r1, #1
   d4fb6:	6868      	ldr	r0, [r5, #4]
   d4fb8:	f7ff fb3c 	bl	d4634 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fbc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4fbe:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fc0:	4622      	mov	r2, r4
   d4fc2:	6868      	ldr	r0, [r5, #4]
   d4fc4:	f7ff fb36 	bl	d4634 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4fc8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4fca:	4681      	mov	r9, r0
        bool ok = false;
   d4fcc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4fce:	2e00      	cmp	r6, #0
   d4fd0:	d036      	beq.n	d5040 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4fd2:	2900      	cmp	r1, #0
   d4fd4:	d134      	bne.n	d5040 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4fd6:	6873      	ldr	r3, [r6, #4]
   d4fd8:	2b02      	cmp	r3, #2
   d4fda:	d003      	beq.n	d4fe4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4fdc:	2b0a      	cmp	r3, #10
   d4fde:	d00b      	beq.n	d4ff8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4fe0:	69f6      	ldr	r6, [r6, #28]
   d4fe2:	e7f4      	b.n	d4fce <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4fe4:	f1b8 0f00 	cmp.w	r8, #0
   d4fe8:	d004      	beq.n	d4ff4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4fea:	6971      	ldr	r1, [r6, #20]
   d4fec:	4638      	mov	r0, r7
   d4fee:	3104      	adds	r1, #4
   d4ff0:	f7ff ff75 	bl	d4ede <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4ff4:	4641      	mov	r1, r8
   d4ff6:	e7f3      	b.n	d4fe0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4ff8:	f1b9 0f00 	cmp.w	r9, #0
   d4ffc:	d101      	bne.n	d5002 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4ffe:	4649      	mov	r1, r9
   d5000:	e7ee      	b.n	d4fe0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5002:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5004:	2210      	movs	r2, #16
   d5006:	a801      	add	r0, sp, #4
   d5008:	f001 faa0 	bl	d654c <memset>
                    a.v = 6;
   d500c:	2306      	movs	r3, #6
   d500e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5012:	ad01      	add	r5, sp, #4
   d5014:	f104 0308 	add.w	r3, r4, #8
   d5018:	3418      	adds	r4, #24
   d501a:	6818      	ldr	r0, [r3, #0]
   d501c:	6859      	ldr	r1, [r3, #4]
   d501e:	462a      	mov	r2, r5
   d5020:	c203      	stmia	r2!, {r0, r1}
   d5022:	3308      	adds	r3, #8
   d5024:	42a3      	cmp	r3, r4
   d5026:	4615      	mov	r5, r2
   d5028:	d1f7      	bne.n	d501a <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d502a:	a901      	add	r1, sp, #4
   d502c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d502e:	ad07      	add	r5, sp, #28
   d5030:	f7ff ff36 	bl	d4ea0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5036:	1d3c      	adds	r4, r7, #4
   d5038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d503a:	682b      	ldr	r3, [r5, #0]
   d503c:	7023      	strb	r3, [r4, #0]
   d503e:	e7de      	b.n	d4ffe <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5040:	9800      	ldr	r0, [sp, #0]
   d5042:	f7ff f9e3 	bl	d440c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5046:	4638      	mov	r0, r7
   d5048:	b015      	add	sp, #84	; 0x54
   d504a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5050 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5050:	4b02      	ldr	r3, [pc, #8]	; (d505c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5052:	4a03      	ldr	r2, [pc, #12]	; (d5060 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5054:	601a      	str	r2, [r3, #0]
   d5056:	2200      	movs	r2, #0
   d5058:	605a      	str	r2, [r3, #4]

} // spark
   d505a:	4770      	bx	lr
   d505c:	2003e5b8 	.word	0x2003e5b8
   d5060:	000d6780 	.word	0x000d6780

000d5064 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5066:	4606      	mov	r6, r0
   d5068:	460d      	mov	r5, r1
  size_t n = 0;
   d506a:	188f      	adds	r7, r1, r2
   d506c:	2400      	movs	r4, #0
  while (size--) {
   d506e:	42bd      	cmp	r5, r7
   d5070:	d00c      	beq.n	d508c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5072:	6833      	ldr	r3, [r6, #0]
   d5074:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5078:	689b      	ldr	r3, [r3, #8]
   d507a:	4630      	mov	r0, r6
   d507c:	4798      	blx	r3
     if (chunk>=0)
   d507e:	1e03      	subs	r3, r0, #0
   d5080:	db01      	blt.n	d5086 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5082:	441c      	add	r4, r3
  while (size--) {
   d5084:	e7f3      	b.n	d506e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5086:	2c00      	cmp	r4, #0
   d5088:	bf08      	it	eq
   d508a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d508c:	4620      	mov	r0, r4
   d508e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5090 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5090:	b513      	push	{r0, r1, r4, lr}
   d5092:	4604      	mov	r4, r0
    }
   d5094:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5096:	b159      	cbz	r1, d50b0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5098:	9101      	str	r1, [sp, #4]
   d509a:	f001 faa0 	bl	d65de <strlen>
   d509e:	6823      	ldr	r3, [r4, #0]
   d50a0:	9901      	ldr	r1, [sp, #4]
   d50a2:	68db      	ldr	r3, [r3, #12]
   d50a4:	4602      	mov	r2, r0
   d50a6:	4620      	mov	r0, r4
    }
   d50a8:	b002      	add	sp, #8
   d50aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d50ae:	4718      	bx	r3
    }
   d50b0:	b002      	add	sp, #8
   d50b2:	bd10      	pop	{r4, pc}

000d50b4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d50b4:	6803      	ldr	r3, [r0, #0]
   d50b6:	689b      	ldr	r3, [r3, #8]
   d50b8:	4718      	bx	r3

000d50ba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d50ba:	b530      	push	{r4, r5, lr}
   d50bc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d50be:	2300      	movs	r3, #0
   d50c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d50c4:	2a01      	cmp	r2, #1
   d50c6:	bf98      	it	ls
   d50c8:	220a      	movls	r2, #10
   d50ca:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d50cc:	460d      	mov	r5, r1
   d50ce:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d50d2:	fb01 5312 	mls	r3, r1, r2, r5
   d50d6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d50da:	2b09      	cmp	r3, #9
   d50dc:	bf94      	ite	ls
   d50de:	3330      	addls	r3, #48	; 0x30
   d50e0:	3337      	addhi	r3, #55	; 0x37
   d50e2:	b2db      	uxtb	r3, r3
  } while(n);
   d50e4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d50e6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d50ea:	d9ef      	bls.n	d50cc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d50ec:	4621      	mov	r1, r4
   d50ee:	f7ff ffcf 	bl	d5090 <_ZN5Print5writeEPKc>
}
   d50f2:	b00b      	add	sp, #44	; 0x2c
   d50f4:	bd30      	pop	{r4, r5, pc}
	...

000d50f8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d50f8:	4b01      	ldr	r3, [pc, #4]	; (d5100 <_GLOBAL__sub_I_RGB+0x8>)
   d50fa:	2200      	movs	r2, #0
   d50fc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d50fe:	4770      	bx	lr
   d5100:	2003e5c0 	.word	0x2003e5c0

000d5104 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5104:	b510      	push	{r4, lr}
   d5106:	4604      	mov	r4, r0
   d5108:	4608      	mov	r0, r1
{
    _spi = spi;
   d510a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d510c:	f7ff f98e 	bl	d442c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5110:	2300      	movs	r3, #0
   d5112:	6063      	str	r3, [r4, #4]
}
   d5114:	4620      	mov	r0, r4
   d5116:	bd10      	pop	{r4, pc}

000d5118 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d5118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d511c:	ec57 6b10 	vmov	r6, r7, d0
   d5120:	4680      	mov	r8, r0
   d5122:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d5124:	ee10 0a10 	vmov	r0, s0
   d5128:	2200      	movs	r2, #0
   d512a:	2300      	movs	r3, #0
   d512c:	4639      	mov	r1, r7
   d512e:	f001 f817 	bl	d6160 <__aeabi_dcmplt>
   d5132:	b128      	cbz	r0, d5140 <_Z4dtoadhPc+0x28>
        val = -val;
   d5134:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d5138:	461f      	mov	r7, r3
        *sout++ = '-';
   d513a:	232d      	movs	r3, #45	; 0x2d
   d513c:	f804 3b01 	strb.w	r3, [r4], #1
   d5140:	2300      	movs	r3, #0
    }
    long scale = 1;
   d5142:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d5146:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d5148:	b2d9      	uxtb	r1, r3
   d514a:	4588      	cmp	r8, r1
   d514c:	d903      	bls.n	d5156 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d514e:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d5152:	3301      	adds	r3, #1
   d5154:	e7f8      	b.n	d5148 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d5156:	4648      	mov	r0, r9
   d5158:	f000 fd26 	bl	d5ba8 <__aeabi_i2d>
   d515c:	4632      	mov	r2, r6
   d515e:	463b      	mov	r3, r7
   d5160:	f000 fd8c 	bl	d5c7c <__aeabi_dmul>
   d5164:	4606      	mov	r6, r0
   d5166:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d5168:	f001 f85a 	bl	d6220 <__aeabi_d2ulz>
   d516c:	4605      	mov	r5, r0
   d516e:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d5170:	f000 fd4e 	bl	d5c10 <__aeabi_ul2d>
   d5174:	4602      	mov	r2, r0
   d5176:	460b      	mov	r3, r1
   d5178:	4630      	mov	r0, r6
   d517a:	4639      	mov	r1, r7
   d517c:	f000 fbc6 	bl	d590c <__aeabi_dsub>
   d5180:	4b13      	ldr	r3, [pc, #76]	; (d51d0 <_Z4dtoadhPc+0xb8>)
   d5182:	2200      	movs	r2, #0
   d5184:	f001 f800 	bl	d6188 <__aeabi_dcmpge>
   d5188:	b110      	cbz	r0, d5190 <_Z4dtoadhPc+0x78>
        fixed++;
   d518a:	3501      	adds	r5, #1
   d518c:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d5190:	464a      	mov	r2, r9
   d5192:	4628      	mov	r0, r5
   d5194:	17d3      	asrs	r3, r2, #31
   d5196:	4651      	mov	r1, sl
   d5198:	f001 f82a 	bl	d61f0 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d519c:	2301      	movs	r3, #1
   d519e:	4615      	mov	r5, r2
   d51a0:	4621      	mov	r1, r4
   d51a2:	220a      	movs	r2, #10
   d51a4:	f000 fa27 	bl	d55f6 <ultoa>
    if (prec) {
   d51a8:	f1b8 0f00 	cmp.w	r8, #0
   d51ac:	d00d      	beq.n	d51ca <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d51ae:	4620      	mov	r0, r4
   d51b0:	f001 fa15 	bl	d65de <strlen>
        *sout++ = '.';
   d51b4:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d51b6:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d51b8:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d51ba:	220a      	movs	r2, #10
   d51bc:	4643      	mov	r3, r8
   d51be:	4628      	mov	r0, r5
   d51c0:	3101      	adds	r1, #1
    }
}
   d51c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d51c6:	f000 ba16 	b.w	d55f6 <ultoa>
}
   d51ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d51ce:	bf00      	nop
   d51d0:	3fe00000 	.word	0x3fe00000

000d51d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d51d4:	b510      	push	{r4, lr}
   d51d6:	4604      	mov	r4, r0
{
	free(buffer);
   d51d8:	6800      	ldr	r0, [r0, #0]
   d51da:	f7ff fa7b 	bl	d46d4 <free>
}
   d51de:	4620      	mov	r0, r4
   d51e0:	bd10      	pop	{r4, pc}

000d51e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d51e2:	b510      	push	{r4, lr}
   d51e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d51e6:	6800      	ldr	r0, [r0, #0]
   d51e8:	b108      	cbz	r0, d51ee <_ZN6String10invalidateEv+0xc>
   d51ea:	f7ff fa73 	bl	d46d4 <free>
	buffer = NULL;
   d51ee:	2300      	movs	r3, #0
	capacity = len = 0;
   d51f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d51f4:	6023      	str	r3, [r4, #0]
}
   d51f6:	bd10      	pop	{r4, pc}

000d51f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d51f8:	b538      	push	{r3, r4, r5, lr}
   d51fa:	4604      	mov	r4, r0
   d51fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d51fe:	6800      	ldr	r0, [r0, #0]
   d5200:	3101      	adds	r1, #1
   d5202:	f7ff fa6f 	bl	d46e4 <realloc>
	if (newbuffer) {
   d5206:	b110      	cbz	r0, d520e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5208:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d520c:	2001      	movs	r0, #1
	}
	return 0;
}
   d520e:	bd38      	pop	{r3, r4, r5, pc}

000d5210 <_ZN6String7reserveEj>:
{
   d5210:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5212:	6803      	ldr	r3, [r0, #0]
{
   d5214:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5216:	b123      	cbz	r3, d5222 <_ZN6String7reserveEj+0x12>
   d5218:	6843      	ldr	r3, [r0, #4]
   d521a:	428b      	cmp	r3, r1
   d521c:	d301      	bcc.n	d5222 <_ZN6String7reserveEj+0x12>
   d521e:	2001      	movs	r0, #1
}
   d5220:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5222:	4620      	mov	r0, r4
   d5224:	f7ff ffe8 	bl	d51f8 <_ZN6String12changeBufferEj>
   d5228:	2800      	cmp	r0, #0
   d522a:	d0f9      	beq.n	d5220 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d522c:	68a3      	ldr	r3, [r4, #8]
   d522e:	2b00      	cmp	r3, #0
   d5230:	d1f5      	bne.n	d521e <_ZN6String7reserveEj+0xe>
   d5232:	6822      	ldr	r2, [r4, #0]
   d5234:	7013      	strb	r3, [r2, #0]
   d5236:	e7f2      	b.n	d521e <_ZN6String7reserveEj+0xe>

000d5238 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5238:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d523a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d523c:	4611      	mov	r1, r2
   d523e:	9201      	str	r2, [sp, #4]
{
   d5240:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5242:	f7ff ffe5 	bl	d5210 <_ZN6String7reserveEj>
   d5246:	9a01      	ldr	r2, [sp, #4]
   d5248:	b928      	cbnz	r0, d5256 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d524a:	4620      	mov	r0, r4
   d524c:	f7ff ffc9 	bl	d51e2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5250:	4620      	mov	r0, r4
   d5252:	b003      	add	sp, #12
   d5254:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5256:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5258:	4629      	mov	r1, r5
   d525a:	6820      	ldr	r0, [r4, #0]
   d525c:	f001 f968 	bl	d6530 <memcpy>
	buffer[len] = 0;
   d5260:	6822      	ldr	r2, [r4, #0]
   d5262:	68a3      	ldr	r3, [r4, #8]
   d5264:	2100      	movs	r1, #0
   d5266:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5268:	e7f2      	b.n	d5250 <_ZN6String4copyEPKcj+0x18>

000d526a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d526a:	b513      	push	{r0, r1, r4, lr}
   d526c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d526e:	b159      	cbz	r1, d5288 <_ZN6StringaSEPKc+0x1e>
   d5270:	4608      	mov	r0, r1
   d5272:	9101      	str	r1, [sp, #4]
   d5274:	f001 f9b3 	bl	d65de <strlen>
   d5278:	9901      	ldr	r1, [sp, #4]
   d527a:	4602      	mov	r2, r0
   d527c:	4620      	mov	r0, r4
   d527e:	f7ff ffdb 	bl	d5238 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5282:	4620      	mov	r0, r4
   d5284:	b002      	add	sp, #8
   d5286:	bd10      	pop	{r4, pc}
	else invalidate();
   d5288:	f7ff ffab 	bl	d51e2 <_ZN6String10invalidateEv>
   d528c:	e7f9      	b.n	d5282 <_ZN6StringaSEPKc+0x18>

000d528e <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d528e:	b510      	push	{r4, lr}
   d5290:	4604      	mov	r4, r0
   d5292:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d5294:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d5296:	4608      	mov	r0, r1
	capacity = 0;
   d5298:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d529c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d529e:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d52a0:	a901      	add	r1, sp, #4
   d52a2:	b2c0      	uxtb	r0, r0
   d52a4:	f7ff ff38 	bl	d5118 <_Z4dtoadhPc>
        *this = buf;
   d52a8:	a901      	add	r1, sp, #4
   d52aa:	4620      	mov	r0, r4
   d52ac:	f7ff ffdd 	bl	d526a <_ZN6StringaSEPKc>
}
   d52b0:	4620      	mov	r0, r4
   d52b2:	b00a      	add	sp, #40	; 0x28
   d52b4:	bd10      	pop	{r4, pc}
	...

000d52b8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d52b8:	4b05      	ldr	r3, [pc, #20]	; (d52d0 <_GLOBAL__sub_I_System+0x18>)
   d52ba:	2202      	movs	r2, #2
   d52bc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d52be:	4b05      	ldr	r3, [pc, #20]	; (d52d4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d52c0:	4a05      	ldr	r2, [pc, #20]	; (d52d8 <_GLOBAL__sub_I_System+0x20>)
   d52c2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d52c4:	2000      	movs	r0, #0
   d52c6:	6018      	str	r0, [r3, #0]
   d52c8:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d52ca:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d52cc:	f7ff b936 	b.w	d453c <set_system_mode>
   d52d0:	2003e5dc 	.word	0x2003e5dc
   d52d4:	2003e5d0 	.word	0x2003e5d0
   d52d8:	ffff0000 	.word	0xffff0000

000d52dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d52dc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d52de:	2000      	movs	r0, #0
   d52e0:	f7ff f980 	bl	d45e4 <spark_sync_time_pending>
   d52e4:	b128      	cbz	r0, d52f2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d52e6:	f7ff f96d 	bl	d45c4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d52ea:	f080 0001 	eor.w	r0, r0, #1
   d52ee:	b2c0      	uxtb	r0, r0
    }
   d52f0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d52f2:	2001      	movs	r0, #1
   d52f4:	e7fc      	b.n	d52f0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d52f6 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d52f6:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d52f8:	2000      	movs	r0, #0
   d52fa:	f7ff f817 	bl	d432c <hal_rtc_time_is_valid>
    if (rtcstate)
   d52fe:	4604      	mov	r4, r0
   d5300:	b9a0      	cbnz	r0, d532c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5302:	f7ff f913 	bl	d452c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5306:	2801      	cmp	r0, #1
   d5308:	d110      	bne.n	d532c <_ZN9TimeClass7isValidEv+0x36>
   d530a:	4620      	mov	r0, r4
   d530c:	f7ff f936 	bl	d457c <system_thread_get_state>
   d5310:	b960      	cbnz	r0, d532c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d5312:	f7ff ffe3 	bl	d52dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5316:	b910      	cbnz	r0, d531e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d5318:	f7ff f94c 	bl	d45b4 <spark_process>
        while (_while() && !_condition()) {
   d531c:	e7f9      	b.n	d5312 <_ZN9TimeClass7isValidEv+0x1c>
   d531e:	f7ff ffdd 	bl	d52dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d5322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d5326:	2000      	movs	r0, #0
   d5328:	f7ff b800 	b.w	d432c <hal_rtc_time_is_valid>
}
   d532c:	4620      	mov	r0, r4
   d532e:	bd10      	pop	{r4, pc}

000d5330 <_ZN9TimeClass3nowEv>:
{
   d5330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d5332:	f7ff ffe0 	bl	d52f6 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d5336:	2210      	movs	r2, #16
   d5338:	2100      	movs	r1, #0
   d533a:	4668      	mov	r0, sp
   d533c:	f001 f906 	bl	d654c <memset>
    hal_rtc_get_time(&tv, nullptr);
   d5340:	2100      	movs	r1, #0
   d5342:	4668      	mov	r0, sp
   d5344:	f7fe fffa 	bl	d433c <hal_rtc_get_time>
}
   d5348:	9800      	ldr	r0, [sp, #0]
   d534a:	b005      	add	sp, #20
   d534c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5350 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5350:	4b02      	ldr	r3, [pc, #8]	; (d535c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5352:	681a      	ldr	r2, [r3, #0]
   d5354:	4b02      	ldr	r3, [pc, #8]	; (d5360 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5356:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5358:	4770      	bx	lr
   d535a:	bf00      	nop
   d535c:	2003e514 	.word	0x2003e514
   d5360:	2003e5e0 	.word	0x2003e5e0

000d5364 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5364:	4770      	bx	lr

000d5366 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5366:	7441      	strb	r1, [r0, #17]
}
   d5368:	4770      	bx	lr

000d536a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d536a:	4770      	bx	lr

000d536c <_ZN11USARTSerial17availableForWriteEv>:
{
   d536c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d536e:	7c00      	ldrb	r0, [r0, #16]
   d5370:	f7ff f8a4 	bl	d44bc <hal_usart_available_data_for_write>
}
   d5374:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5378:	bd08      	pop	{r3, pc}

000d537a <_ZN11USARTSerial9availableEv>:
{
   d537a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d537c:	7c00      	ldrb	r0, [r0, #16]
   d537e:	f7ff f875 	bl	d446c <hal_usart_available>
}
   d5382:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5386:	bd08      	pop	{r3, pc}

000d5388 <_ZN11USARTSerial4peekEv>:
{
   d5388:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d538a:	7c00      	ldrb	r0, [r0, #16]
   d538c:	f7ff f87e 	bl	d448c <hal_usart_peek>
}
   d5390:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5394:	bd08      	pop	{r3, pc}

000d5396 <_ZN11USARTSerial4readEv>:
{
   d5396:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5398:	7c00      	ldrb	r0, [r0, #16]
   d539a:	f7ff f86f 	bl	d447c <hal_usart_read>
}
   d539e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d53a2:	bd08      	pop	{r3, pc}

000d53a4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d53a4:	7c00      	ldrb	r0, [r0, #16]
   d53a6:	f7ff b879 	b.w	d449c <hal_usart_flush>

000d53aa <_ZN11USARTSerial5writeEh>:
{
   d53aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d53ac:	7c45      	ldrb	r5, [r0, #17]
{
   d53ae:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d53b0:	b12d      	cbz	r5, d53be <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d53b2:	7c20      	ldrb	r0, [r4, #16]
}
   d53b4:	b003      	add	sp, #12
   d53b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d53ba:	f7ff b84f 	b.w	d445c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d53be:	7c00      	ldrb	r0, [r0, #16]
   d53c0:	9101      	str	r1, [sp, #4]
   d53c2:	f7ff f87b 	bl	d44bc <hal_usart_available_data_for_write>
   d53c6:	2800      	cmp	r0, #0
   d53c8:	9901      	ldr	r1, [sp, #4]
   d53ca:	dcf2      	bgt.n	d53b2 <_ZN11USARTSerial5writeEh+0x8>
}
   d53cc:	4628      	mov	r0, r5
   d53ce:	b003      	add	sp, #12
   d53d0:	bd30      	pop	{r4, r5, pc}

000d53d2 <_ZN11USARTSerialD0Ev>:
   d53d2:	b510      	push	{r4, lr}
   d53d4:	2114      	movs	r1, #20
   d53d6:	4604      	mov	r4, r0
   d53d8:	f000 fa8c 	bl	d58f4 <_ZdlPvj>
   d53dc:	4620      	mov	r0, r4
   d53de:	bd10      	pop	{r4, pc}

000d53e0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d53e0:	b510      	push	{r4, lr}
   d53e2:	f04f 0c00 	mov.w	ip, #0
   d53e6:	4604      	mov	r4, r0
   d53e8:	4608      	mov	r0, r1
   d53ea:	4611      	mov	r1, r2
   d53ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d53f0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d53f4:	4a04      	ldr	r2, [pc, #16]	; (d5408 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d53f6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d53f8:	2201      	movs	r2, #1
  _serial = serial;
   d53fa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d53fc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d53fe:	461a      	mov	r2, r3
   d5400:	f7ff f824 	bl	d444c <hal_usart_init>
}
   d5404:	4620      	mov	r0, r4
   d5406:	bd10      	pop	{r4, pc}
   d5408:	000d67d8 	.word	0x000d67d8

000d540c <_Z22__fetch_global_Serial1v>:
{
   d540c:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d540e:	4c0d      	ldr	r4, [pc, #52]	; (d5444 <_Z22__fetch_global_Serial1v+0x38>)
   d5410:	7821      	ldrb	r1, [r4, #0]
   d5412:	f3bf 8f5b 	dmb	ish
   d5416:	f011 0101 	ands.w	r1, r1, #1
   d541a:	d110      	bne.n	d543e <_Z22__fetch_global_Serial1v+0x32>
   d541c:	4620      	mov	r0, r4
   d541e:	9101      	str	r1, [sp, #4]
   d5420:	f7fe fe3d 	bl	d409e <__cxa_guard_acquire>
   d5424:	9901      	ldr	r1, [sp, #4]
   d5426:	b150      	cbz	r0, d543e <_Z22__fetch_global_Serial1v+0x32>
   d5428:	4b07      	ldr	r3, [pc, #28]	; (d5448 <_Z22__fetch_global_Serial1v+0x3c>)
   d542a:	4a08      	ldr	r2, [pc, #32]	; (d544c <_Z22__fetch_global_Serial1v+0x40>)
   d542c:	4808      	ldr	r0, [pc, #32]	; (d5450 <_Z22__fetch_global_Serial1v+0x44>)
   d542e:	f7ff ffd7 	bl	d53e0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5432:	4620      	mov	r0, r4
   d5434:	f7fe fe38 	bl	d40a8 <__cxa_guard_release>
   d5438:	4806      	ldr	r0, [pc, #24]	; (d5454 <_Z22__fetch_global_Serial1v+0x48>)
   d543a:	f001 f873 	bl	d6524 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d543e:	4804      	ldr	r0, [pc, #16]	; (d5450 <_Z22__fetch_global_Serial1v+0x44>)
   d5440:	b002      	add	sp, #8
   d5442:	bd10      	pop	{r4, pc}
   d5444:	2003e5e4 	.word	0x2003e5e4
   d5448:	2003e66c 	.word	0x2003e66c
   d544c:	2003e5e8 	.word	0x2003e5e8
   d5450:	2003e6f0 	.word	0x2003e6f0
   d5454:	000d536b 	.word	0x000d536b

000d5458 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5458:	7441      	strb	r1, [r0, #17]
}
   d545a:	4770      	bx	lr

000d545c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d545c:	4770      	bx	lr

000d545e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d545e:	4770      	bx	lr

000d5460 <_ZN9USBSerial4readEv>:
{
   d5460:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5462:	2100      	movs	r1, #0
   d5464:	7c00      	ldrb	r0, [r0, #16]
   d5466:	f7ff f849 	bl	d44fc <HAL_USB_USART_Receive_Data>
}
   d546a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d546e:	bd08      	pop	{r3, pc}

000d5470 <_ZN9USBSerial4peekEv>:
{
   d5470:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5472:	2101      	movs	r1, #1
   d5474:	7c00      	ldrb	r0, [r0, #16]
   d5476:	f7ff f841 	bl	d44fc <HAL_USB_USART_Receive_Data>
}
   d547a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d547e:	bd08      	pop	{r3, pc}

000d5480 <_ZN9USBSerial17availableForWriteEv>:
{
   d5480:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5482:	7c00      	ldrb	r0, [r0, #16]
   d5484:	f7ff f832 	bl	d44ec <HAL_USB_USART_Available_Data_For_Write>
}
   d5488:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d548c:	bd08      	pop	{r3, pc}

000d548e <_ZN9USBSerial9availableEv>:
{
   d548e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5490:	7c00      	ldrb	r0, [r0, #16]
   d5492:	f7ff f823 	bl	d44dc <HAL_USB_USART_Available_Data>
}
   d5496:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d549a:	bd08      	pop	{r3, pc}

000d549c <_ZN9USBSerial5writeEh>:
{
   d549c:	b513      	push	{r0, r1, r4, lr}
   d549e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d54a0:	7c00      	ldrb	r0, [r0, #16]
{
   d54a2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d54a4:	f7ff f822 	bl	d44ec <HAL_USB_USART_Available_Data_For_Write>
   d54a8:	2800      	cmp	r0, #0
   d54aa:	9901      	ldr	r1, [sp, #4]
   d54ac:	dc01      	bgt.n	d54b2 <_ZN9USBSerial5writeEh+0x16>
   d54ae:	7c60      	ldrb	r0, [r4, #17]
   d54b0:	b120      	cbz	r0, d54bc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d54b2:	7c20      	ldrb	r0, [r4, #16]
   d54b4:	f7ff f82a 	bl	d450c <HAL_USB_USART_Send_Data>
   d54b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d54bc:	b002      	add	sp, #8
   d54be:	bd10      	pop	{r4, pc}

000d54c0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d54c0:	7c00      	ldrb	r0, [r0, #16]
   d54c2:	f7ff b82b 	b.w	d451c <HAL_USB_USART_Flush_Data>

000d54c6 <_ZN9USBSerialD0Ev>:
   d54c6:	b510      	push	{r4, lr}
   d54c8:	2114      	movs	r1, #20
   d54ca:	4604      	mov	r4, r0
   d54cc:	f000 fa12 	bl	d58f4 <_ZdlPvj>
   d54d0:	4620      	mov	r0, r4
   d54d2:	bd10      	pop	{r4, pc}

000d54d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d54d4:	b510      	push	{r4, lr}
   d54d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54da:	4604      	mov	r4, r0
   d54dc:	4608      	mov	r0, r1
   d54de:	2100      	movs	r1, #0
   d54e0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d54e4:	4b04      	ldr	r3, [pc, #16]	; (d54f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d54e6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d54e8:	2301      	movs	r3, #1
  _serial = serial;
   d54ea:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d54ec:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d54ee:	4611      	mov	r1, r2
   d54f0:	f7fe ffec 	bl	d44cc <HAL_USB_USART_Init>
}
   d54f4:	4620      	mov	r0, r4
   d54f6:	bd10      	pop	{r4, pc}
   d54f8:	000d6808 	.word	0x000d6808

000d54fc <_Z19acquireSerialBufferv>:
{
   d54fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d54fe:	2214      	movs	r2, #20
{
   d5500:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5502:	2100      	movs	r1, #0
   d5504:	f001 f822 	bl	d654c <memset>
}
   d5508:	4620      	mov	r0, r4
   d550a:	bd10      	pop	{r4, pc}

000d550c <_Z16_fetch_usbserialv>:
{
   d550c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d550e:	4c0f      	ldr	r4, [pc, #60]	; (d554c <_Z16_fetch_usbserialv+0x40>)
{
   d5510:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5512:	a803      	add	r0, sp, #12
   d5514:	f7ff fff2 	bl	d54fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5518:	7821      	ldrb	r1, [r4, #0]
   d551a:	f3bf 8f5b 	dmb	ish
   d551e:	f011 0101 	ands.w	r1, r1, #1
   d5522:	d10f      	bne.n	d5544 <_Z16_fetch_usbserialv+0x38>
   d5524:	4620      	mov	r0, r4
   d5526:	9101      	str	r1, [sp, #4]
   d5528:	f7fe fdb9 	bl	d409e <__cxa_guard_acquire>
   d552c:	9901      	ldr	r1, [sp, #4]
   d552e:	b148      	cbz	r0, d5544 <_Z16_fetch_usbserialv+0x38>
   d5530:	aa03      	add	r2, sp, #12
   d5532:	4807      	ldr	r0, [pc, #28]	; (d5550 <_Z16_fetch_usbserialv+0x44>)
   d5534:	f7ff ffce 	bl	d54d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5538:	4620      	mov	r0, r4
   d553a:	f7fe fdb5 	bl	d40a8 <__cxa_guard_release>
   d553e:	4805      	ldr	r0, [pc, #20]	; (d5554 <_Z16_fetch_usbserialv+0x48>)
   d5540:	f000 fff0 	bl	d6524 <atexit>
	return _usbserial;
}
   d5544:	4802      	ldr	r0, [pc, #8]	; (d5550 <_Z16_fetch_usbserialv+0x44>)
   d5546:	b008      	add	sp, #32
   d5548:	bd10      	pop	{r4, pc}
   d554a:	bf00      	nop
   d554c:	2003e704 	.word	0x2003e704
   d5550:	2003e708 	.word	0x2003e708
   d5554:	000d545d 	.word	0x000d545d

000d5558 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5558:	2200      	movs	r2, #0
   d555a:	6840      	ldr	r0, [r0, #4]
   d555c:	4611      	mov	r1, r2
   d555e:	f7ff b869 	b.w	d4634 <network_ready>

000d5562 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5562:	2200      	movs	r2, #0
   d5564:	6840      	ldr	r0, [r0, #4]
   d5566:	4611      	mov	r1, r2
   d5568:	f7ff b884 	b.w	d4674 <network_listening>

000d556c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d556c:	2200      	movs	r2, #0
   d556e:	6840      	ldr	r0, [r0, #4]
   d5570:	4611      	mov	r1, r2
   d5572:	f7ff b88f 	b.w	d4694 <network_get_listen_timeout>

000d5576 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5576:	6840      	ldr	r0, [r0, #4]
   d5578:	2200      	movs	r2, #0
   d557a:	f7ff b883 	b.w	d4684 <network_set_listen_timeout>

000d557e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d557e:	6840      	ldr	r0, [r0, #4]
   d5580:	2200      	movs	r2, #0
   d5582:	f081 0101 	eor.w	r1, r1, #1
   d5586:	f7ff b86d 	b.w	d4664 <network_listen>

000d558a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d558a:	2300      	movs	r3, #0
   d558c:	6840      	ldr	r0, [r0, #4]
   d558e:	461a      	mov	r2, r3
   d5590:	4619      	mov	r1, r3
   d5592:	f7ff b85f 	b.w	d4654 <network_off>

000d5596 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5596:	2300      	movs	r3, #0
   d5598:	6840      	ldr	r0, [r0, #4]
   d559a:	461a      	mov	r2, r3
   d559c:	4619      	mov	r1, r3
   d559e:	f7ff b851 	b.w	d4644 <network_on>

000d55a2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d55a2:	2200      	movs	r2, #0
   d55a4:	6840      	ldr	r0, [r0, #4]
   d55a6:	4611      	mov	r1, r2
   d55a8:	f7ff b834 	b.w	d4614 <network_connecting>

000d55ac <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d55ac:	6840      	ldr	r0, [r0, #4]
   d55ae:	2200      	movs	r2, #0
   d55b0:	2102      	movs	r1, #2
   d55b2:	f7ff b837 	b.w	d4624 <network_disconnect>

000d55b6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d55b6:	2300      	movs	r3, #0
   d55b8:	6840      	ldr	r0, [r0, #4]
   d55ba:	461a      	mov	r2, r3
   d55bc:	f7ff b822 	b.w	d4604 <network_connect>

000d55c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d55c0:	4b02      	ldr	r3, [pc, #8]	; (d55cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d55c2:	2204      	movs	r2, #4
   d55c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d55c6:	4a02      	ldr	r2, [pc, #8]	; (d55d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d55c8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d55ca:	4770      	bx	lr
   d55cc:	2003e71c 	.word	0x2003e71c
   d55d0:	000d6838 	.word	0x000d6838

000d55d4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d55d4:	b510      	push	{r4, lr}
   d55d6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d55d8:	f001 f801 	bl	d65de <strlen>
   d55dc:	3801      	subs	r0, #1
   d55de:	1823      	adds	r3, r4, r0
   d55e0:	4620      	mov	r0, r4
	while(i<j){
   d55e2:	4283      	cmp	r3, r0
   d55e4:	d906      	bls.n	d55f4 <_Z11str_reversePc+0x20>
		c = *i;
   d55e6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d55e8:	7819      	ldrb	r1, [r3, #0]
   d55ea:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d55ee:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d55f2:	e7f6      	b.n	d55e2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d55f4:	bd10      	pop	{r4, pc}

000d55f6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d55f6:	b570      	push	{r4, r5, r6, lr}
   d55f8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d55fa:	1e91      	subs	r1, r2, #2
   d55fc:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d55fe:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d5600:	d822      	bhi.n	d5648 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d5602:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d5604:	b16d      	cbz	r5, d5622 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5606:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d560a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d560e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d5610:	2d09      	cmp	r5, #9
                *ptr += '0';
   d5612:	bf94      	ite	ls
   d5614:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5616:	3157      	addhi	r1, #87	; 0x57
   d5618:	b2c9      	uxtb	r1, r1
   d561a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d561e:	4635      	mov	r5, r6
	while(a){
   d5620:	e7f0      	b.n	d5604 <ultoa+0xe>
   d5622:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d5624:	4423      	add	r3, r4
            *ptr++ = '0';
   d5626:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d5628:	4293      	cmp	r3, r2
   d562a:	d902      	bls.n	d5632 <ultoa+0x3c>
            *ptr++ = '0';
   d562c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d5630:	e7fa      	b.n	d5628 <ultoa+0x32>
   d5632:	1a1a      	subs	r2, r3, r0
   d5634:	4283      	cmp	r3, r0
   d5636:	bf38      	it	cc
   d5638:	2200      	movcc	r2, #0

	*ptr = '\0';
   d563a:	2300      	movs	r3, #0
   d563c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d563e:	4620      	mov	r0, r4
   d5640:	f7ff ffc8 	bl	d55d4 <_Z11str_reversePc>
	return buffer;
   d5644:	4620      	mov	r0, r4
}
   d5646:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d5648:	2000      	movs	r0, #0
   d564a:	e7fc      	b.n	d5646 <ultoa+0x50>

000d564c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d564c:	4b01      	ldr	r3, [pc, #4]	; (d5654 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d564e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5650:	4770      	bx	lr
   d5652:	bf00      	nop
   d5654:	2003e518 	.word	0x2003e518

000d5658 <serialEventRun>:
{
   d5658:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d565a:	4b0b      	ldr	r3, [pc, #44]	; (d5688 <serialEventRun+0x30>)
   d565c:	b143      	cbz	r3, d5670 <serialEventRun+0x18>
   d565e:	f7ff ff55 	bl	d550c <_Z16_fetch_usbserialv>
   d5662:	6803      	ldr	r3, [r0, #0]
   d5664:	691b      	ldr	r3, [r3, #16]
   d5666:	4798      	blx	r3
   d5668:	2800      	cmp	r0, #0
   d566a:	dd01      	ble.n	d5670 <serialEventRun+0x18>
        serialEvent();
   d566c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5670:	4b06      	ldr	r3, [pc, #24]	; (d568c <serialEventRun+0x34>)
   d5672:	b143      	cbz	r3, d5686 <serialEventRun+0x2e>
   d5674:	f7ff feca 	bl	d540c <_Z22__fetch_global_Serial1v>
   d5678:	6803      	ldr	r3, [r0, #0]
   d567a:	691b      	ldr	r3, [r3, #16]
   d567c:	4798      	blx	r3
   d567e:	2800      	cmp	r0, #0
   d5680:	dd01      	ble.n	d5686 <serialEventRun+0x2e>
        serialEvent1();
   d5682:	f3af 8000 	nop.w
}
   d5686:	bd08      	pop	{r3, pc}
	...

000d5690 <_post_loop>:
{
   d5690:	b508      	push	{r3, lr}
	serialEventRun();
   d5692:	f7ff ffe1 	bl	d5658 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5696:	f7fe fe41 	bl	d431c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d569a:	4b01      	ldr	r3, [pc, #4]	; (d56a0 <_post_loop+0x10>)
   d569c:	6018      	str	r0, [r3, #0]
}
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	2003e738 	.word	0x2003e738

000d56a4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d56a4:	4805      	ldr	r0, [pc, #20]	; (d56bc <_Z33system_initialize_user_backup_ramv+0x18>)
   d56a6:	4a06      	ldr	r2, [pc, #24]	; (d56c0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d56a8:	4906      	ldr	r1, [pc, #24]	; (d56c4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d56aa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d56ac:	1a12      	subs	r2, r2, r0
   d56ae:	f000 ff3f 	bl	d6530 <memcpy>
    __backup_sram_signature = signature;
   d56b2:	4b05      	ldr	r3, [pc, #20]	; (d56c8 <_Z33system_initialize_user_backup_ramv+0x24>)
   d56b4:	4a05      	ldr	r2, [pc, #20]	; (d56cc <_Z33system_initialize_user_backup_ramv+0x28>)
   d56b6:	601a      	str	r2, [r3, #0]
}
   d56b8:	bd08      	pop	{r3, pc}
   d56ba:	bf00      	nop
   d56bc:	2003f400 	.word	0x2003f400
   d56c0:	2003f404 	.word	0x2003f404
   d56c4:	000d68a8 	.word	0x000d68a8
   d56c8:	2003f400 	.word	0x2003f400
   d56cc:	9a271c1e 	.word	0x9a271c1e

000d56d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d56d0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d56d2:	2300      	movs	r3, #0
   d56d4:	9300      	str	r3, [sp, #0]
   d56d6:	461a      	mov	r2, r3
   d56d8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d56dc:	f7fe ff60 	bl	d45a0 <system_ctrl_set_result>
}
   d56e0:	b003      	add	sp, #12
   d56e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d56e8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d56e8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d56ea:	8843      	ldrh	r3, [r0, #2]
   d56ec:	2b0a      	cmp	r3, #10
   d56ee:	d008      	beq.n	d5702 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d56f0:	2b50      	cmp	r3, #80	; 0x50
   d56f2:	d10b      	bne.n	d570c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d56f4:	4b09      	ldr	r3, [pc, #36]	; (d571c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d56f6:	681b      	ldr	r3, [r3, #0]
   d56f8:	b14b      	cbz	r3, d570e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d56fa:	b003      	add	sp, #12
   d56fc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5700:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5702:	f7ff ffe5 	bl	d56d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5706:	b003      	add	sp, #12
   d5708:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d570c:	2300      	movs	r3, #0
   d570e:	9300      	str	r3, [sp, #0]
   d5710:	461a      	mov	r2, r3
   d5712:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5716:	f7fe ff43 	bl	d45a0 <system_ctrl_set_result>
}
   d571a:	e7f4      	b.n	d5706 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d571c:	2003e728 	.word	0x2003e728

000d5720 <module_user_init_hook>:
{
   d5720:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5722:	4812      	ldr	r0, [pc, #72]	; (d576c <module_user_init_hook+0x4c>)
   d5724:	2100      	movs	r1, #0
   d5726:	f7fe fff5 	bl	d4714 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d572a:	4b11      	ldr	r3, [pc, #68]	; (d5770 <module_user_init_hook+0x50>)
   d572c:	681a      	ldr	r2, [r3, #0]
   d572e:	4b11      	ldr	r3, [pc, #68]	; (d5774 <module_user_init_hook+0x54>)
   d5730:	429a      	cmp	r2, r3
   d5732:	4b11      	ldr	r3, [pc, #68]	; (d5778 <module_user_init_hook+0x58>)
   d5734:	bf0c      	ite	eq
   d5736:	2201      	moveq	r2, #1
   d5738:	2200      	movne	r2, #0
   d573a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d573c:	d001      	beq.n	d5742 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d573e:	f7ff ffb1 	bl	d56a4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5742:	f7fe fdd3 	bl	d42ec <HAL_RNG_GetRandomNumber>
   d5746:	4604      	mov	r4, r0
    srand(seed);
   d5748:	f000 ff08 	bl	d655c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d574c:	4b0b      	ldr	r3, [pc, #44]	; (d577c <module_user_init_hook+0x5c>)
   d574e:	b113      	cbz	r3, d5756 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d5750:	4620      	mov	r0, r4
   d5752:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5756:	2100      	movs	r1, #0
   d5758:	4808      	ldr	r0, [pc, #32]	; (d577c <module_user_init_hook+0x5c>)
   d575a:	f7fe ff4b 	bl	d45f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d575e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5762:	4807      	ldr	r0, [pc, #28]	; (d5780 <module_user_init_hook+0x60>)
   d5764:	2100      	movs	r1, #0
   d5766:	f7fe bf11 	b.w	d458c <system_ctrl_set_app_request_handler>
   d576a:	bf00      	nop
   d576c:	000d564d 	.word	0x000d564d
   d5770:	2003f400 	.word	0x2003f400
   d5774:	9a271c1e 	.word	0x9a271c1e
   d5778:	2003e724 	.word	0x2003e724
   d577c:	00000000 	.word	0x00000000
   d5780:	000d56e9 	.word	0x000d56e9

000d5784 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5784:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5786:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5788:	d902      	bls.n	d5790 <pinAvailable+0xc>
    return false;
   d578a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d578c:	b002      	add	sp, #8
   d578e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5790:	f1a0 030b 	sub.w	r3, r0, #11
   d5794:	2b02      	cmp	r3, #2
   d5796:	d81a      	bhi.n	d57ce <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5798:	4c17      	ldr	r4, [pc, #92]	; (d57f8 <pinAvailable+0x74>)
   d579a:	7821      	ldrb	r1, [r4, #0]
   d579c:	f3bf 8f5b 	dmb	ish
   d57a0:	f011 0101 	ands.w	r1, r1, #1
   d57a4:	d10b      	bne.n	d57be <pinAvailable+0x3a>
   d57a6:	4620      	mov	r0, r4
   d57a8:	9101      	str	r1, [sp, #4]
   d57aa:	f7fe fc78 	bl	d409e <__cxa_guard_acquire>
   d57ae:	9901      	ldr	r1, [sp, #4]
   d57b0:	b128      	cbz	r0, d57be <pinAvailable+0x3a>
   d57b2:	4812      	ldr	r0, [pc, #72]	; (d57fc <pinAvailable+0x78>)
   d57b4:	f7ff fca6 	bl	d5104 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d57b8:	4620      	mov	r0, r4
   d57ba:	f7fe fc75 	bl	d40a8 <__cxa_guard_release>
   d57be:	4b0f      	ldr	r3, [pc, #60]	; (d57fc <pinAvailable+0x78>)
   d57c0:	7818      	ldrb	r0, [r3, #0]
   d57c2:	f7fe fe3b 	bl	d443c <hal_spi_is_enabled>
   d57c6:	2800      	cmp	r0, #0
   d57c8:	d1df      	bne.n	d578a <pinAvailable+0x6>
  return true; // 'pin' is available
   d57ca:	2001      	movs	r0, #1
   d57cc:	e7de      	b.n	d578c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d57ce:	2801      	cmp	r0, #1
   d57d0:	d809      	bhi.n	d57e6 <pinAvailable+0x62>
   d57d2:	f000 f86b 	bl	d58ac <_Z19__fetch_global_Wirev>
   d57d6:	2100      	movs	r1, #0
   d57d8:	7c00      	ldrb	r0, [r0, #16]
   d57da:	f7fe fdff 	bl	d43dc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d57de:	f080 0001 	eor.w	r0, r0, #1
   d57e2:	b2c0      	uxtb	r0, r0
   d57e4:	e7d2      	b.n	d578c <pinAvailable+0x8>
   d57e6:	3809      	subs	r0, #9
   d57e8:	2801      	cmp	r0, #1
   d57ea:	d8ee      	bhi.n	d57ca <pinAvailable+0x46>
   d57ec:	f7ff fe0e 	bl	d540c <_Z22__fetch_global_Serial1v>
   d57f0:	7c00      	ldrb	r0, [r0, #16]
   d57f2:	f7fe fe5b 	bl	d44ac <hal_usart_is_enabled>
   d57f6:	e7f2      	b.n	d57de <pinAvailable+0x5a>
   d57f8:	2003e72c 	.word	0x2003e72c
   d57fc:	2003e730 	.word	0x2003e730

000d5800 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5800:	2823      	cmp	r0, #35	; 0x23
{
   d5802:	b538      	push	{r3, r4, r5, lr}
   d5804:	4604      	mov	r4, r0
   d5806:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5808:	d80a      	bhi.n	d5820 <pinMode+0x20>
   d580a:	29ff      	cmp	r1, #255	; 0xff
   d580c:	d008      	beq.n	d5820 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d580e:	f7ff ffb9 	bl	d5784 <pinAvailable>
   d5812:	b128      	cbz	r0, d5820 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5814:	4629      	mov	r1, r5
   d5816:	4620      	mov	r0, r4
}
   d5818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d581c:	f7fe bd96 	b.w	d434c <HAL_Pin_Mode>
}
   d5820:	bd38      	pop	{r3, r4, r5, pc}

000d5822 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5822:	b538      	push	{r3, r4, r5, lr}
   d5824:	4604      	mov	r4, r0
   d5826:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5828:	f7fe fd98 	bl	d435c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d582c:	28ff      	cmp	r0, #255	; 0xff
   d582e:	d010      	beq.n	d5852 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5830:	2806      	cmp	r0, #6
   d5832:	d804      	bhi.n	d583e <digitalWrite+0x1c>
   d5834:	234d      	movs	r3, #77	; 0x4d
   d5836:	fa23 f000 	lsr.w	r0, r3, r0
   d583a:	07c3      	lsls	r3, r0, #31
   d583c:	d409      	bmi.n	d5852 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d583e:	4620      	mov	r0, r4
   d5840:	f7ff ffa0 	bl	d5784 <pinAvailable>
   d5844:	b128      	cbz	r0, d5852 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5846:	4629      	mov	r1, r5
   d5848:	4620      	mov	r0, r4
}
   d584a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d584e:	f7fe bd8d 	b.w	d436c <HAL_GPIO_Write>
}
   d5852:	bd38      	pop	{r3, r4, r5, pc}

000d5854 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5854:	b510      	push	{r4, lr}
   d5856:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5858:	f7fe fd80 	bl	d435c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d585c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d585e:	b2db      	uxtb	r3, r3
   d5860:	2b01      	cmp	r3, #1
   d5862:	d908      	bls.n	d5876 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5864:	4620      	mov	r0, r4
   d5866:	f7ff ff8d 	bl	d5784 <pinAvailable>
   d586a:	b120      	cbz	r0, d5876 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d586c:	4620      	mov	r0, r4
}
   d586e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d5872:	f7fe bd83 	b.w	d437c <HAL_GPIO_Read>
}
   d5876:	2000      	movs	r0, #0
   d5878:	bd10      	pop	{r4, pc}

000d587a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d587a:	4770      	bx	lr

000d587c <_Z17acquireWireBufferv>:
{
   d587c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d587e:	2300      	movs	r3, #0
   d5880:	2520      	movs	r5, #32
   d5882:	8043      	strh	r3, [r0, #2]
   d5884:	2314      	movs	r3, #20
{
   d5886:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5888:	8003      	strh	r3, [r0, #0]
   d588a:	6085      	str	r5, [r0, #8]
   d588c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d588e:	4906      	ldr	r1, [pc, #24]	; (d58a8 <_Z17acquireWireBufferv+0x2c>)
   d5890:	4628      	mov	r0, r5
   d5892:	f000 f831 	bl	d58f8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5896:	4904      	ldr	r1, [pc, #16]	; (d58a8 <_Z17acquireWireBufferv+0x2c>)
	};
   d5898:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d589a:	4628      	mov	r0, r5
   d589c:	f000 f82c 	bl	d58f8 <_ZnajRKSt9nothrow_t>
	};
   d58a0:	60e0      	str	r0, [r4, #12]
}
   d58a2:	4620      	mov	r0, r4
   d58a4:	bd38      	pop	{r3, r4, r5, pc}
   d58a6:	bf00      	nop
   d58a8:	000d686c 	.word	0x000d686c

000d58ac <_Z19__fetch_global_Wirev>:
{
   d58ac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d58ae:	4d0e      	ldr	r5, [pc, #56]	; (d58e8 <_Z19__fetch_global_Wirev+0x3c>)
   d58b0:	7829      	ldrb	r1, [r5, #0]
   d58b2:	f3bf 8f5b 	dmb	ish
   d58b6:	f011 0401 	ands.w	r4, r1, #1
{
   d58ba:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d58bc:	d111      	bne.n	d58e2 <_Z19__fetch_global_Wirev+0x36>
   d58be:	4628      	mov	r0, r5
   d58c0:	f7fe fbed 	bl	d409e <__cxa_guard_acquire>
   d58c4:	b168      	cbz	r0, d58e2 <_Z19__fetch_global_Wirev+0x36>
   d58c6:	a801      	add	r0, sp, #4
   d58c8:	f7ff ffd8 	bl	d587c <_Z17acquireWireBufferv>
   d58cc:	aa01      	add	r2, sp, #4
   d58ce:	4621      	mov	r1, r4
   d58d0:	4806      	ldr	r0, [pc, #24]	; (d58ec <_Z19__fetch_global_Wirev+0x40>)
   d58d2:	f7ff fa8b 	bl	d4dec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d58d6:	4628      	mov	r0, r5
   d58d8:	f7fe fbe6 	bl	d40a8 <__cxa_guard_release>
   d58dc:	4804      	ldr	r0, [pc, #16]	; (d58f0 <_Z19__fetch_global_Wirev+0x44>)
   d58de:	f000 fe21 	bl	d6524 <atexit>
	return wire;
}
   d58e2:	4802      	ldr	r0, [pc, #8]	; (d58ec <_Z19__fetch_global_Wirev+0x40>)
   d58e4:	b007      	add	sp, #28
   d58e6:	bd30      	pop	{r4, r5, pc}
   d58e8:	2003e73c 	.word	0x2003e73c
   d58ec:	2003e740 	.word	0x2003e740
   d58f0:	000d587b 	.word	0x000d587b

000d58f4 <_ZdlPvj>:
   d58f4:	f7fe bbd1 	b.w	d409a <_ZdlPv>

000d58f8 <_ZnajRKSt9nothrow_t>:
   d58f8:	f7fe bbcd 	b.w	d4096 <_Znaj>

000d58fc <_ZSt25__throw_bad_function_callv>:
   d58fc:	b508      	push	{r3, lr}
   d58fe:	f7fe fef9 	bl	d46f4 <abort>
	...

000d5904 <__aeabi_drsub>:
   d5904:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5908:	e002      	b.n	d5910 <__adddf3>
   d590a:	bf00      	nop

000d590c <__aeabi_dsub>:
   d590c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5910 <__adddf3>:
   d5910:	b530      	push	{r4, r5, lr}
   d5912:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5916:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d591a:	ea94 0f05 	teq	r4, r5
   d591e:	bf08      	it	eq
   d5920:	ea90 0f02 	teqeq	r0, r2
   d5924:	bf1f      	itttt	ne
   d5926:	ea54 0c00 	orrsne.w	ip, r4, r0
   d592a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d592e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5932:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5936:	f000 80e2 	beq.w	d5afe <__adddf3+0x1ee>
   d593a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d593e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5942:	bfb8      	it	lt
   d5944:	426d      	neglt	r5, r5
   d5946:	dd0c      	ble.n	d5962 <__adddf3+0x52>
   d5948:	442c      	add	r4, r5
   d594a:	ea80 0202 	eor.w	r2, r0, r2
   d594e:	ea81 0303 	eor.w	r3, r1, r3
   d5952:	ea82 0000 	eor.w	r0, r2, r0
   d5956:	ea83 0101 	eor.w	r1, r3, r1
   d595a:	ea80 0202 	eor.w	r2, r0, r2
   d595e:	ea81 0303 	eor.w	r3, r1, r3
   d5962:	2d36      	cmp	r5, #54	; 0x36
   d5964:	bf88      	it	hi
   d5966:	bd30      	pophi	{r4, r5, pc}
   d5968:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d596c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5970:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5974:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5978:	d002      	beq.n	d5980 <__adddf3+0x70>
   d597a:	4240      	negs	r0, r0
   d597c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5980:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5984:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5988:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d598c:	d002      	beq.n	d5994 <__adddf3+0x84>
   d598e:	4252      	negs	r2, r2
   d5990:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5994:	ea94 0f05 	teq	r4, r5
   d5998:	f000 80a7 	beq.w	d5aea <__adddf3+0x1da>
   d599c:	f1a4 0401 	sub.w	r4, r4, #1
   d59a0:	f1d5 0e20 	rsbs	lr, r5, #32
   d59a4:	db0d      	blt.n	d59c2 <__adddf3+0xb2>
   d59a6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d59aa:	fa22 f205 	lsr.w	r2, r2, r5
   d59ae:	1880      	adds	r0, r0, r2
   d59b0:	f141 0100 	adc.w	r1, r1, #0
   d59b4:	fa03 f20e 	lsl.w	r2, r3, lr
   d59b8:	1880      	adds	r0, r0, r2
   d59ba:	fa43 f305 	asr.w	r3, r3, r5
   d59be:	4159      	adcs	r1, r3
   d59c0:	e00e      	b.n	d59e0 <__adddf3+0xd0>
   d59c2:	f1a5 0520 	sub.w	r5, r5, #32
   d59c6:	f10e 0e20 	add.w	lr, lr, #32
   d59ca:	2a01      	cmp	r2, #1
   d59cc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d59d0:	bf28      	it	cs
   d59d2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d59d6:	fa43 f305 	asr.w	r3, r3, r5
   d59da:	18c0      	adds	r0, r0, r3
   d59dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d59e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d59e4:	d507      	bpl.n	d59f6 <__adddf3+0xe6>
   d59e6:	f04f 0e00 	mov.w	lr, #0
   d59ea:	f1dc 0c00 	rsbs	ip, ip, #0
   d59ee:	eb7e 0000 	sbcs.w	r0, lr, r0
   d59f2:	eb6e 0101 	sbc.w	r1, lr, r1
   d59f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d59fa:	d31b      	bcc.n	d5a34 <__adddf3+0x124>
   d59fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5a00:	d30c      	bcc.n	d5a1c <__adddf3+0x10c>
   d5a02:	0849      	lsrs	r1, r1, #1
   d5a04:	ea5f 0030 	movs.w	r0, r0, rrx
   d5a08:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5a0c:	f104 0401 	add.w	r4, r4, #1
   d5a10:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5a14:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5a18:	f080 809a 	bcs.w	d5b50 <__adddf3+0x240>
   d5a1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5a20:	bf08      	it	eq
   d5a22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5a26:	f150 0000 	adcs.w	r0, r0, #0
   d5a2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5a2e:	ea41 0105 	orr.w	r1, r1, r5
   d5a32:	bd30      	pop	{r4, r5, pc}
   d5a34:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5a38:	4140      	adcs	r0, r0
   d5a3a:	eb41 0101 	adc.w	r1, r1, r1
   d5a3e:	3c01      	subs	r4, #1
   d5a40:	bf28      	it	cs
   d5a42:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5a46:	d2e9      	bcs.n	d5a1c <__adddf3+0x10c>
   d5a48:	f091 0f00 	teq	r1, #0
   d5a4c:	bf04      	itt	eq
   d5a4e:	4601      	moveq	r1, r0
   d5a50:	2000      	moveq	r0, #0
   d5a52:	fab1 f381 	clz	r3, r1
   d5a56:	bf08      	it	eq
   d5a58:	3320      	addeq	r3, #32
   d5a5a:	f1a3 030b 	sub.w	r3, r3, #11
   d5a5e:	f1b3 0220 	subs.w	r2, r3, #32
   d5a62:	da0c      	bge.n	d5a7e <__adddf3+0x16e>
   d5a64:	320c      	adds	r2, #12
   d5a66:	dd08      	ble.n	d5a7a <__adddf3+0x16a>
   d5a68:	f102 0c14 	add.w	ip, r2, #20
   d5a6c:	f1c2 020c 	rsb	r2, r2, #12
   d5a70:	fa01 f00c 	lsl.w	r0, r1, ip
   d5a74:	fa21 f102 	lsr.w	r1, r1, r2
   d5a78:	e00c      	b.n	d5a94 <__adddf3+0x184>
   d5a7a:	f102 0214 	add.w	r2, r2, #20
   d5a7e:	bfd8      	it	le
   d5a80:	f1c2 0c20 	rsble	ip, r2, #32
   d5a84:	fa01 f102 	lsl.w	r1, r1, r2
   d5a88:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5a8c:	bfdc      	itt	le
   d5a8e:	ea41 010c 	orrle.w	r1, r1, ip
   d5a92:	4090      	lslle	r0, r2
   d5a94:	1ae4      	subs	r4, r4, r3
   d5a96:	bfa2      	ittt	ge
   d5a98:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5a9c:	4329      	orrge	r1, r5
   d5a9e:	bd30      	popge	{r4, r5, pc}
   d5aa0:	ea6f 0404 	mvn.w	r4, r4
   d5aa4:	3c1f      	subs	r4, #31
   d5aa6:	da1c      	bge.n	d5ae2 <__adddf3+0x1d2>
   d5aa8:	340c      	adds	r4, #12
   d5aaa:	dc0e      	bgt.n	d5aca <__adddf3+0x1ba>
   d5aac:	f104 0414 	add.w	r4, r4, #20
   d5ab0:	f1c4 0220 	rsb	r2, r4, #32
   d5ab4:	fa20 f004 	lsr.w	r0, r0, r4
   d5ab8:	fa01 f302 	lsl.w	r3, r1, r2
   d5abc:	ea40 0003 	orr.w	r0, r0, r3
   d5ac0:	fa21 f304 	lsr.w	r3, r1, r4
   d5ac4:	ea45 0103 	orr.w	r1, r5, r3
   d5ac8:	bd30      	pop	{r4, r5, pc}
   d5aca:	f1c4 040c 	rsb	r4, r4, #12
   d5ace:	f1c4 0220 	rsb	r2, r4, #32
   d5ad2:	fa20 f002 	lsr.w	r0, r0, r2
   d5ad6:	fa01 f304 	lsl.w	r3, r1, r4
   d5ada:	ea40 0003 	orr.w	r0, r0, r3
   d5ade:	4629      	mov	r1, r5
   d5ae0:	bd30      	pop	{r4, r5, pc}
   d5ae2:	fa21 f004 	lsr.w	r0, r1, r4
   d5ae6:	4629      	mov	r1, r5
   d5ae8:	bd30      	pop	{r4, r5, pc}
   d5aea:	f094 0f00 	teq	r4, #0
   d5aee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5af2:	bf06      	itte	eq
   d5af4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5af8:	3401      	addeq	r4, #1
   d5afa:	3d01      	subne	r5, #1
   d5afc:	e74e      	b.n	d599c <__adddf3+0x8c>
   d5afe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5b02:	bf18      	it	ne
   d5b04:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5b08:	d029      	beq.n	d5b5e <__adddf3+0x24e>
   d5b0a:	ea94 0f05 	teq	r4, r5
   d5b0e:	bf08      	it	eq
   d5b10:	ea90 0f02 	teqeq	r0, r2
   d5b14:	d005      	beq.n	d5b22 <__adddf3+0x212>
   d5b16:	ea54 0c00 	orrs.w	ip, r4, r0
   d5b1a:	bf04      	itt	eq
   d5b1c:	4619      	moveq	r1, r3
   d5b1e:	4610      	moveq	r0, r2
   d5b20:	bd30      	pop	{r4, r5, pc}
   d5b22:	ea91 0f03 	teq	r1, r3
   d5b26:	bf1e      	ittt	ne
   d5b28:	2100      	movne	r1, #0
   d5b2a:	2000      	movne	r0, #0
   d5b2c:	bd30      	popne	{r4, r5, pc}
   d5b2e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5b32:	d105      	bne.n	d5b40 <__adddf3+0x230>
   d5b34:	0040      	lsls	r0, r0, #1
   d5b36:	4149      	adcs	r1, r1
   d5b38:	bf28      	it	cs
   d5b3a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5b3e:	bd30      	pop	{r4, r5, pc}
   d5b40:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5b44:	bf3c      	itt	cc
   d5b46:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5b4a:	bd30      	popcc	{r4, r5, pc}
   d5b4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5b50:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5b54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5b58:	f04f 0000 	mov.w	r0, #0
   d5b5c:	bd30      	pop	{r4, r5, pc}
   d5b5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5b62:	bf1a      	itte	ne
   d5b64:	4619      	movne	r1, r3
   d5b66:	4610      	movne	r0, r2
   d5b68:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5b6c:	bf1c      	itt	ne
   d5b6e:	460b      	movne	r3, r1
   d5b70:	4602      	movne	r2, r0
   d5b72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5b76:	bf06      	itte	eq
   d5b78:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5b7c:	ea91 0f03 	teqeq	r1, r3
   d5b80:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5b84:	bd30      	pop	{r4, r5, pc}
   d5b86:	bf00      	nop

000d5b88 <__aeabi_ui2d>:
   d5b88:	f090 0f00 	teq	r0, #0
   d5b8c:	bf04      	itt	eq
   d5b8e:	2100      	moveq	r1, #0
   d5b90:	4770      	bxeq	lr
   d5b92:	b530      	push	{r4, r5, lr}
   d5b94:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5b98:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5b9c:	f04f 0500 	mov.w	r5, #0
   d5ba0:	f04f 0100 	mov.w	r1, #0
   d5ba4:	e750      	b.n	d5a48 <__adddf3+0x138>
   d5ba6:	bf00      	nop

000d5ba8 <__aeabi_i2d>:
   d5ba8:	f090 0f00 	teq	r0, #0
   d5bac:	bf04      	itt	eq
   d5bae:	2100      	moveq	r1, #0
   d5bb0:	4770      	bxeq	lr
   d5bb2:	b530      	push	{r4, r5, lr}
   d5bb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5bb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5bbc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5bc0:	bf48      	it	mi
   d5bc2:	4240      	negmi	r0, r0
   d5bc4:	f04f 0100 	mov.w	r1, #0
   d5bc8:	e73e      	b.n	d5a48 <__adddf3+0x138>
   d5bca:	bf00      	nop

000d5bcc <__aeabi_f2d>:
   d5bcc:	0042      	lsls	r2, r0, #1
   d5bce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5bd2:	ea4f 0131 	mov.w	r1, r1, rrx
   d5bd6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5bda:	bf1f      	itttt	ne
   d5bdc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5be0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5be4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5be8:	4770      	bxne	lr
   d5bea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5bee:	bf08      	it	eq
   d5bf0:	4770      	bxeq	lr
   d5bf2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5bf6:	bf04      	itt	eq
   d5bf8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5bfc:	4770      	bxeq	lr
   d5bfe:	b530      	push	{r4, r5, lr}
   d5c00:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5c04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5c08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5c0c:	e71c      	b.n	d5a48 <__adddf3+0x138>
   d5c0e:	bf00      	nop

000d5c10 <__aeabi_ul2d>:
   d5c10:	ea50 0201 	orrs.w	r2, r0, r1
   d5c14:	bf08      	it	eq
   d5c16:	4770      	bxeq	lr
   d5c18:	b530      	push	{r4, r5, lr}
   d5c1a:	f04f 0500 	mov.w	r5, #0
   d5c1e:	e00a      	b.n	d5c36 <__aeabi_l2d+0x16>

000d5c20 <__aeabi_l2d>:
   d5c20:	ea50 0201 	orrs.w	r2, r0, r1
   d5c24:	bf08      	it	eq
   d5c26:	4770      	bxeq	lr
   d5c28:	b530      	push	{r4, r5, lr}
   d5c2a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5c2e:	d502      	bpl.n	d5c36 <__aeabi_l2d+0x16>
   d5c30:	4240      	negs	r0, r0
   d5c32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5c36:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5c3a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5c3e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5c42:	f43f aed8 	beq.w	d59f6 <__adddf3+0xe6>
   d5c46:	f04f 0203 	mov.w	r2, #3
   d5c4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5c4e:	bf18      	it	ne
   d5c50:	3203      	addne	r2, #3
   d5c52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5c56:	bf18      	it	ne
   d5c58:	3203      	addne	r2, #3
   d5c5a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5c5e:	f1c2 0320 	rsb	r3, r2, #32
   d5c62:	fa00 fc03 	lsl.w	ip, r0, r3
   d5c66:	fa20 f002 	lsr.w	r0, r0, r2
   d5c6a:	fa01 fe03 	lsl.w	lr, r1, r3
   d5c6e:	ea40 000e 	orr.w	r0, r0, lr
   d5c72:	fa21 f102 	lsr.w	r1, r1, r2
   d5c76:	4414      	add	r4, r2
   d5c78:	e6bd      	b.n	d59f6 <__adddf3+0xe6>
   d5c7a:	bf00      	nop

000d5c7c <__aeabi_dmul>:
   d5c7c:	b570      	push	{r4, r5, r6, lr}
   d5c7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5c82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5c86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5c8a:	bf1d      	ittte	ne
   d5c8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5c90:	ea94 0f0c 	teqne	r4, ip
   d5c94:	ea95 0f0c 	teqne	r5, ip
   d5c98:	f000 f8de 	bleq	d5e58 <__aeabi_dmul+0x1dc>
   d5c9c:	442c      	add	r4, r5
   d5c9e:	ea81 0603 	eor.w	r6, r1, r3
   d5ca2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5ca6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5caa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5cae:	bf18      	it	ne
   d5cb0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5cb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5cb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5cbc:	d038      	beq.n	d5d30 <__aeabi_dmul+0xb4>
   d5cbe:	fba0 ce02 	umull	ip, lr, r0, r2
   d5cc2:	f04f 0500 	mov.w	r5, #0
   d5cc6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5cca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5cce:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5cd2:	f04f 0600 	mov.w	r6, #0
   d5cd6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5cda:	f09c 0f00 	teq	ip, #0
   d5cde:	bf18      	it	ne
   d5ce0:	f04e 0e01 	orrne.w	lr, lr, #1
   d5ce4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5ce8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5cec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5cf0:	d204      	bcs.n	d5cfc <__aeabi_dmul+0x80>
   d5cf2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5cf6:	416d      	adcs	r5, r5
   d5cf8:	eb46 0606 	adc.w	r6, r6, r6
   d5cfc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5d00:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5d04:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5d08:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5d0c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5d10:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5d14:	bf88      	it	hi
   d5d16:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5d1a:	d81e      	bhi.n	d5d5a <__aeabi_dmul+0xde>
   d5d1c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5d20:	bf08      	it	eq
   d5d22:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5d26:	f150 0000 	adcs.w	r0, r0, #0
   d5d2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5d2e:	bd70      	pop	{r4, r5, r6, pc}
   d5d30:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5d34:	ea46 0101 	orr.w	r1, r6, r1
   d5d38:	ea40 0002 	orr.w	r0, r0, r2
   d5d3c:	ea81 0103 	eor.w	r1, r1, r3
   d5d40:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5d44:	bfc2      	ittt	gt
   d5d46:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5d4a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5d4e:	bd70      	popgt	{r4, r5, r6, pc}
   d5d50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5d54:	f04f 0e00 	mov.w	lr, #0
   d5d58:	3c01      	subs	r4, #1
   d5d5a:	f300 80ab 	bgt.w	d5eb4 <__aeabi_dmul+0x238>
   d5d5e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5d62:	bfde      	ittt	le
   d5d64:	2000      	movle	r0, #0
   d5d66:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5d6a:	bd70      	pople	{r4, r5, r6, pc}
   d5d6c:	f1c4 0400 	rsb	r4, r4, #0
   d5d70:	3c20      	subs	r4, #32
   d5d72:	da35      	bge.n	d5de0 <__aeabi_dmul+0x164>
   d5d74:	340c      	adds	r4, #12
   d5d76:	dc1b      	bgt.n	d5db0 <__aeabi_dmul+0x134>
   d5d78:	f104 0414 	add.w	r4, r4, #20
   d5d7c:	f1c4 0520 	rsb	r5, r4, #32
   d5d80:	fa00 f305 	lsl.w	r3, r0, r5
   d5d84:	fa20 f004 	lsr.w	r0, r0, r4
   d5d88:	fa01 f205 	lsl.w	r2, r1, r5
   d5d8c:	ea40 0002 	orr.w	r0, r0, r2
   d5d90:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5d94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5d98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5d9c:	fa21 f604 	lsr.w	r6, r1, r4
   d5da0:	eb42 0106 	adc.w	r1, r2, r6
   d5da4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5da8:	bf08      	it	eq
   d5daa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5dae:	bd70      	pop	{r4, r5, r6, pc}
   d5db0:	f1c4 040c 	rsb	r4, r4, #12
   d5db4:	f1c4 0520 	rsb	r5, r4, #32
   d5db8:	fa00 f304 	lsl.w	r3, r0, r4
   d5dbc:	fa20 f005 	lsr.w	r0, r0, r5
   d5dc0:	fa01 f204 	lsl.w	r2, r1, r4
   d5dc4:	ea40 0002 	orr.w	r0, r0, r2
   d5dc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5dcc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5dd0:	f141 0100 	adc.w	r1, r1, #0
   d5dd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5dd8:	bf08      	it	eq
   d5dda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5dde:	bd70      	pop	{r4, r5, r6, pc}
   d5de0:	f1c4 0520 	rsb	r5, r4, #32
   d5de4:	fa00 f205 	lsl.w	r2, r0, r5
   d5de8:	ea4e 0e02 	orr.w	lr, lr, r2
   d5dec:	fa20 f304 	lsr.w	r3, r0, r4
   d5df0:	fa01 f205 	lsl.w	r2, r1, r5
   d5df4:	ea43 0302 	orr.w	r3, r3, r2
   d5df8:	fa21 f004 	lsr.w	r0, r1, r4
   d5dfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5e00:	fa21 f204 	lsr.w	r2, r1, r4
   d5e04:	ea20 0002 	bic.w	r0, r0, r2
   d5e08:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5e0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5e10:	bf08      	it	eq
   d5e12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5e16:	bd70      	pop	{r4, r5, r6, pc}
   d5e18:	f094 0f00 	teq	r4, #0
   d5e1c:	d10f      	bne.n	d5e3e <__aeabi_dmul+0x1c2>
   d5e1e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5e22:	0040      	lsls	r0, r0, #1
   d5e24:	eb41 0101 	adc.w	r1, r1, r1
   d5e28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e2c:	bf08      	it	eq
   d5e2e:	3c01      	subeq	r4, #1
   d5e30:	d0f7      	beq.n	d5e22 <__aeabi_dmul+0x1a6>
   d5e32:	ea41 0106 	orr.w	r1, r1, r6
   d5e36:	f095 0f00 	teq	r5, #0
   d5e3a:	bf18      	it	ne
   d5e3c:	4770      	bxne	lr
   d5e3e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5e42:	0052      	lsls	r2, r2, #1
   d5e44:	eb43 0303 	adc.w	r3, r3, r3
   d5e48:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5e4c:	bf08      	it	eq
   d5e4e:	3d01      	subeq	r5, #1
   d5e50:	d0f7      	beq.n	d5e42 <__aeabi_dmul+0x1c6>
   d5e52:	ea43 0306 	orr.w	r3, r3, r6
   d5e56:	4770      	bx	lr
   d5e58:	ea94 0f0c 	teq	r4, ip
   d5e5c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5e60:	bf18      	it	ne
   d5e62:	ea95 0f0c 	teqne	r5, ip
   d5e66:	d00c      	beq.n	d5e82 <__aeabi_dmul+0x206>
   d5e68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5e6c:	bf18      	it	ne
   d5e6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5e72:	d1d1      	bne.n	d5e18 <__aeabi_dmul+0x19c>
   d5e74:	ea81 0103 	eor.w	r1, r1, r3
   d5e78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5e7c:	f04f 0000 	mov.w	r0, #0
   d5e80:	bd70      	pop	{r4, r5, r6, pc}
   d5e82:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5e86:	bf06      	itte	eq
   d5e88:	4610      	moveq	r0, r2
   d5e8a:	4619      	moveq	r1, r3
   d5e8c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5e90:	d019      	beq.n	d5ec6 <__aeabi_dmul+0x24a>
   d5e92:	ea94 0f0c 	teq	r4, ip
   d5e96:	d102      	bne.n	d5e9e <__aeabi_dmul+0x222>
   d5e98:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5e9c:	d113      	bne.n	d5ec6 <__aeabi_dmul+0x24a>
   d5e9e:	ea95 0f0c 	teq	r5, ip
   d5ea2:	d105      	bne.n	d5eb0 <__aeabi_dmul+0x234>
   d5ea4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5ea8:	bf1c      	itt	ne
   d5eaa:	4610      	movne	r0, r2
   d5eac:	4619      	movne	r1, r3
   d5eae:	d10a      	bne.n	d5ec6 <__aeabi_dmul+0x24a>
   d5eb0:	ea81 0103 	eor.w	r1, r1, r3
   d5eb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5eb8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5ebc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5ec0:	f04f 0000 	mov.w	r0, #0
   d5ec4:	bd70      	pop	{r4, r5, r6, pc}
   d5ec6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5eca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5ece:	bd70      	pop	{r4, r5, r6, pc}

000d5ed0 <__aeabi_ddiv>:
   d5ed0:	b570      	push	{r4, r5, r6, lr}
   d5ed2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5ed6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5eda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5ede:	bf1d      	ittte	ne
   d5ee0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5ee4:	ea94 0f0c 	teqne	r4, ip
   d5ee8:	ea95 0f0c 	teqne	r5, ip
   d5eec:	f000 f8a7 	bleq	d603e <__aeabi_ddiv+0x16e>
   d5ef0:	eba4 0405 	sub.w	r4, r4, r5
   d5ef4:	ea81 0e03 	eor.w	lr, r1, r3
   d5ef8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5efc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5f00:	f000 8088 	beq.w	d6014 <__aeabi_ddiv+0x144>
   d5f04:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5f08:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5f0c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5f10:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5f14:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5f18:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5f1c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5f20:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5f24:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5f28:	429d      	cmp	r5, r3
   d5f2a:	bf08      	it	eq
   d5f2c:	4296      	cmpeq	r6, r2
   d5f2e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5f32:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5f36:	d202      	bcs.n	d5f3e <__aeabi_ddiv+0x6e>
   d5f38:	085b      	lsrs	r3, r3, #1
   d5f3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f3e:	1ab6      	subs	r6, r6, r2
   d5f40:	eb65 0503 	sbc.w	r5, r5, r3
   d5f44:	085b      	lsrs	r3, r3, #1
   d5f46:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5f4e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5f52:	ebb6 0e02 	subs.w	lr, r6, r2
   d5f56:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5f5a:	bf22      	ittt	cs
   d5f5c:	1ab6      	subcs	r6, r6, r2
   d5f5e:	4675      	movcs	r5, lr
   d5f60:	ea40 000c 	orrcs.w	r0, r0, ip
   d5f64:	085b      	lsrs	r3, r3, #1
   d5f66:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f6a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5f6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5f72:	bf22      	ittt	cs
   d5f74:	1ab6      	subcs	r6, r6, r2
   d5f76:	4675      	movcs	r5, lr
   d5f78:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5f7c:	085b      	lsrs	r3, r3, #1
   d5f7e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f82:	ebb6 0e02 	subs.w	lr, r6, r2
   d5f86:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5f8a:	bf22      	ittt	cs
   d5f8c:	1ab6      	subcs	r6, r6, r2
   d5f8e:	4675      	movcs	r5, lr
   d5f90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5f94:	085b      	lsrs	r3, r3, #1
   d5f96:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f9a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5f9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5fa2:	bf22      	ittt	cs
   d5fa4:	1ab6      	subcs	r6, r6, r2
   d5fa6:	4675      	movcs	r5, lr
   d5fa8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5fac:	ea55 0e06 	orrs.w	lr, r5, r6
   d5fb0:	d018      	beq.n	d5fe4 <__aeabi_ddiv+0x114>
   d5fb2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5fb6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5fba:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5fbe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5fc2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5fc6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5fca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5fce:	d1c0      	bne.n	d5f52 <__aeabi_ddiv+0x82>
   d5fd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5fd4:	d10b      	bne.n	d5fee <__aeabi_ddiv+0x11e>
   d5fd6:	ea41 0100 	orr.w	r1, r1, r0
   d5fda:	f04f 0000 	mov.w	r0, #0
   d5fde:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5fe2:	e7b6      	b.n	d5f52 <__aeabi_ddiv+0x82>
   d5fe4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5fe8:	bf04      	itt	eq
   d5fea:	4301      	orreq	r1, r0
   d5fec:	2000      	moveq	r0, #0
   d5fee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5ff2:	bf88      	it	hi
   d5ff4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5ff8:	f63f aeaf 	bhi.w	d5d5a <__aeabi_dmul+0xde>
   d5ffc:	ebb5 0c03 	subs.w	ip, r5, r3
   d6000:	bf04      	itt	eq
   d6002:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6006:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d600a:	f150 0000 	adcs.w	r0, r0, #0
   d600e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6012:	bd70      	pop	{r4, r5, r6, pc}
   d6014:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6018:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d601c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6020:	bfc2      	ittt	gt
   d6022:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6026:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d602a:	bd70      	popgt	{r4, r5, r6, pc}
   d602c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6030:	f04f 0e00 	mov.w	lr, #0
   d6034:	3c01      	subs	r4, #1
   d6036:	e690      	b.n	d5d5a <__aeabi_dmul+0xde>
   d6038:	ea45 0e06 	orr.w	lr, r5, r6
   d603c:	e68d      	b.n	d5d5a <__aeabi_dmul+0xde>
   d603e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6042:	ea94 0f0c 	teq	r4, ip
   d6046:	bf08      	it	eq
   d6048:	ea95 0f0c 	teqeq	r5, ip
   d604c:	f43f af3b 	beq.w	d5ec6 <__aeabi_dmul+0x24a>
   d6050:	ea94 0f0c 	teq	r4, ip
   d6054:	d10a      	bne.n	d606c <__aeabi_ddiv+0x19c>
   d6056:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d605a:	f47f af34 	bne.w	d5ec6 <__aeabi_dmul+0x24a>
   d605e:	ea95 0f0c 	teq	r5, ip
   d6062:	f47f af25 	bne.w	d5eb0 <__aeabi_dmul+0x234>
   d6066:	4610      	mov	r0, r2
   d6068:	4619      	mov	r1, r3
   d606a:	e72c      	b.n	d5ec6 <__aeabi_dmul+0x24a>
   d606c:	ea95 0f0c 	teq	r5, ip
   d6070:	d106      	bne.n	d6080 <__aeabi_ddiv+0x1b0>
   d6072:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6076:	f43f aefd 	beq.w	d5e74 <__aeabi_dmul+0x1f8>
   d607a:	4610      	mov	r0, r2
   d607c:	4619      	mov	r1, r3
   d607e:	e722      	b.n	d5ec6 <__aeabi_dmul+0x24a>
   d6080:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6084:	bf18      	it	ne
   d6086:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d608a:	f47f aec5 	bne.w	d5e18 <__aeabi_dmul+0x19c>
   d608e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6092:	f47f af0d 	bne.w	d5eb0 <__aeabi_dmul+0x234>
   d6096:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d609a:	f47f aeeb 	bne.w	d5e74 <__aeabi_dmul+0x1f8>
   d609e:	e712      	b.n	d5ec6 <__aeabi_dmul+0x24a>

000d60a0 <__gedf2>:
   d60a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d60a4:	e006      	b.n	d60b4 <__cmpdf2+0x4>
   d60a6:	bf00      	nop

000d60a8 <__ledf2>:
   d60a8:	f04f 0c01 	mov.w	ip, #1
   d60ac:	e002      	b.n	d60b4 <__cmpdf2+0x4>
   d60ae:	bf00      	nop

000d60b0 <__cmpdf2>:
   d60b0:	f04f 0c01 	mov.w	ip, #1
   d60b4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d60b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d60bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d60c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d60c4:	bf18      	it	ne
   d60c6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d60ca:	d01b      	beq.n	d6104 <__cmpdf2+0x54>
   d60cc:	b001      	add	sp, #4
   d60ce:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d60d2:	bf0c      	ite	eq
   d60d4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d60d8:	ea91 0f03 	teqne	r1, r3
   d60dc:	bf02      	ittt	eq
   d60de:	ea90 0f02 	teqeq	r0, r2
   d60e2:	2000      	moveq	r0, #0
   d60e4:	4770      	bxeq	lr
   d60e6:	f110 0f00 	cmn.w	r0, #0
   d60ea:	ea91 0f03 	teq	r1, r3
   d60ee:	bf58      	it	pl
   d60f0:	4299      	cmppl	r1, r3
   d60f2:	bf08      	it	eq
   d60f4:	4290      	cmpeq	r0, r2
   d60f6:	bf2c      	ite	cs
   d60f8:	17d8      	asrcs	r0, r3, #31
   d60fa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d60fe:	f040 0001 	orr.w	r0, r0, #1
   d6102:	4770      	bx	lr
   d6104:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6108:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d610c:	d102      	bne.n	d6114 <__cmpdf2+0x64>
   d610e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6112:	d107      	bne.n	d6124 <__cmpdf2+0x74>
   d6114:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6118:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d611c:	d1d6      	bne.n	d60cc <__cmpdf2+0x1c>
   d611e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6122:	d0d3      	beq.n	d60cc <__cmpdf2+0x1c>
   d6124:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6128:	4770      	bx	lr
   d612a:	bf00      	nop

000d612c <__aeabi_cdrcmple>:
   d612c:	4684      	mov	ip, r0
   d612e:	4610      	mov	r0, r2
   d6130:	4662      	mov	r2, ip
   d6132:	468c      	mov	ip, r1
   d6134:	4619      	mov	r1, r3
   d6136:	4663      	mov	r3, ip
   d6138:	e000      	b.n	d613c <__aeabi_cdcmpeq>
   d613a:	bf00      	nop

000d613c <__aeabi_cdcmpeq>:
   d613c:	b501      	push	{r0, lr}
   d613e:	f7ff ffb7 	bl	d60b0 <__cmpdf2>
   d6142:	2800      	cmp	r0, #0
   d6144:	bf48      	it	mi
   d6146:	f110 0f00 	cmnmi.w	r0, #0
   d614a:	bd01      	pop	{r0, pc}

000d614c <__aeabi_dcmpeq>:
   d614c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6150:	f7ff fff4 	bl	d613c <__aeabi_cdcmpeq>
   d6154:	bf0c      	ite	eq
   d6156:	2001      	moveq	r0, #1
   d6158:	2000      	movne	r0, #0
   d615a:	f85d fb08 	ldr.w	pc, [sp], #8
   d615e:	bf00      	nop

000d6160 <__aeabi_dcmplt>:
   d6160:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6164:	f7ff ffea 	bl	d613c <__aeabi_cdcmpeq>
   d6168:	bf34      	ite	cc
   d616a:	2001      	movcc	r0, #1
   d616c:	2000      	movcs	r0, #0
   d616e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6172:	bf00      	nop

000d6174 <__aeabi_dcmple>:
   d6174:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6178:	f7ff ffe0 	bl	d613c <__aeabi_cdcmpeq>
   d617c:	bf94      	ite	ls
   d617e:	2001      	movls	r0, #1
   d6180:	2000      	movhi	r0, #0
   d6182:	f85d fb08 	ldr.w	pc, [sp], #8
   d6186:	bf00      	nop

000d6188 <__aeabi_dcmpge>:
   d6188:	f84d ed08 	str.w	lr, [sp, #-8]!
   d618c:	f7ff ffce 	bl	d612c <__aeabi_cdrcmple>
   d6190:	bf94      	ite	ls
   d6192:	2001      	movls	r0, #1
   d6194:	2000      	movhi	r0, #0
   d6196:	f85d fb08 	ldr.w	pc, [sp], #8
   d619a:	bf00      	nop

000d619c <__aeabi_dcmpgt>:
   d619c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d61a0:	f7ff ffc4 	bl	d612c <__aeabi_cdrcmple>
   d61a4:	bf34      	ite	cc
   d61a6:	2001      	movcc	r0, #1
   d61a8:	2000      	movcs	r0, #0
   d61aa:	f85d fb08 	ldr.w	pc, [sp], #8
   d61ae:	bf00      	nop

000d61b0 <__aeabi_d2uiz>:
   d61b0:	004a      	lsls	r2, r1, #1
   d61b2:	d211      	bcs.n	d61d8 <__aeabi_d2uiz+0x28>
   d61b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d61b8:	d211      	bcs.n	d61de <__aeabi_d2uiz+0x2e>
   d61ba:	d50d      	bpl.n	d61d8 <__aeabi_d2uiz+0x28>
   d61bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d61c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d61c4:	d40e      	bmi.n	d61e4 <__aeabi_d2uiz+0x34>
   d61c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d61ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d61ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d61d2:	fa23 f002 	lsr.w	r0, r3, r2
   d61d6:	4770      	bx	lr
   d61d8:	f04f 0000 	mov.w	r0, #0
   d61dc:	4770      	bx	lr
   d61de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d61e2:	d102      	bne.n	d61ea <__aeabi_d2uiz+0x3a>
   d61e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d61e8:	4770      	bx	lr
   d61ea:	f04f 0000 	mov.w	r0, #0
   d61ee:	4770      	bx	lr

000d61f0 <__aeabi_uldivmod>:
   d61f0:	b953      	cbnz	r3, d6208 <__aeabi_uldivmod+0x18>
   d61f2:	b94a      	cbnz	r2, d6208 <__aeabi_uldivmod+0x18>
   d61f4:	2900      	cmp	r1, #0
   d61f6:	bf08      	it	eq
   d61f8:	2800      	cmpeq	r0, #0
   d61fa:	bf1c      	itt	ne
   d61fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d6200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d6204:	f000 b98c 	b.w	d6520 <__aeabi_idiv0>
   d6208:	f1ad 0c08 	sub.w	ip, sp, #8
   d620c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d6210:	f000 f824 	bl	d625c <__udivmoddi4>
   d6214:	f8dd e004 	ldr.w	lr, [sp, #4]
   d6218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d621c:	b004      	add	sp, #16
   d621e:	4770      	bx	lr

000d6220 <__aeabi_d2ulz>:
   d6220:	b5d0      	push	{r4, r6, r7, lr}
   d6222:	4b0c      	ldr	r3, [pc, #48]	; (d6254 <__aeabi_d2ulz+0x34>)
   d6224:	2200      	movs	r2, #0
   d6226:	4606      	mov	r6, r0
   d6228:	460f      	mov	r7, r1
   d622a:	f7ff fd27 	bl	d5c7c <__aeabi_dmul>
   d622e:	f7ff ffbf 	bl	d61b0 <__aeabi_d2uiz>
   d6232:	4604      	mov	r4, r0
   d6234:	f7ff fca8 	bl	d5b88 <__aeabi_ui2d>
   d6238:	4b07      	ldr	r3, [pc, #28]	; (d6258 <__aeabi_d2ulz+0x38>)
   d623a:	2200      	movs	r2, #0
   d623c:	f7ff fd1e 	bl	d5c7c <__aeabi_dmul>
   d6240:	4602      	mov	r2, r0
   d6242:	460b      	mov	r3, r1
   d6244:	4630      	mov	r0, r6
   d6246:	4639      	mov	r1, r7
   d6248:	f7ff fb60 	bl	d590c <__aeabi_dsub>
   d624c:	f7ff ffb0 	bl	d61b0 <__aeabi_d2uiz>
   d6250:	4621      	mov	r1, r4
   d6252:	bdd0      	pop	{r4, r6, r7, pc}
   d6254:	3df00000 	.word	0x3df00000
   d6258:	41f00000 	.word	0x41f00000

000d625c <__udivmoddi4>:
   d625c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6260:	9d08      	ldr	r5, [sp, #32]
   d6262:	4604      	mov	r4, r0
   d6264:	468c      	mov	ip, r1
   d6266:	2b00      	cmp	r3, #0
   d6268:	f040 8083 	bne.w	d6372 <__udivmoddi4+0x116>
   d626c:	428a      	cmp	r2, r1
   d626e:	4617      	mov	r7, r2
   d6270:	d947      	bls.n	d6302 <__udivmoddi4+0xa6>
   d6272:	fab2 f282 	clz	r2, r2
   d6276:	b142      	cbz	r2, d628a <__udivmoddi4+0x2e>
   d6278:	f1c2 0020 	rsb	r0, r2, #32
   d627c:	fa24 f000 	lsr.w	r0, r4, r0
   d6280:	4091      	lsls	r1, r2
   d6282:	4097      	lsls	r7, r2
   d6284:	ea40 0c01 	orr.w	ip, r0, r1
   d6288:	4094      	lsls	r4, r2
   d628a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d628e:	0c23      	lsrs	r3, r4, #16
   d6290:	fbbc f6f8 	udiv	r6, ip, r8
   d6294:	fa1f fe87 	uxth.w	lr, r7
   d6298:	fb08 c116 	mls	r1, r8, r6, ip
   d629c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d62a0:	fb06 f10e 	mul.w	r1, r6, lr
   d62a4:	4299      	cmp	r1, r3
   d62a6:	d909      	bls.n	d62bc <__udivmoddi4+0x60>
   d62a8:	18fb      	adds	r3, r7, r3
   d62aa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d62ae:	f080 8119 	bcs.w	d64e4 <__udivmoddi4+0x288>
   d62b2:	4299      	cmp	r1, r3
   d62b4:	f240 8116 	bls.w	d64e4 <__udivmoddi4+0x288>
   d62b8:	3e02      	subs	r6, #2
   d62ba:	443b      	add	r3, r7
   d62bc:	1a5b      	subs	r3, r3, r1
   d62be:	b2a4      	uxth	r4, r4
   d62c0:	fbb3 f0f8 	udiv	r0, r3, r8
   d62c4:	fb08 3310 	mls	r3, r8, r0, r3
   d62c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d62cc:	fb00 fe0e 	mul.w	lr, r0, lr
   d62d0:	45a6      	cmp	lr, r4
   d62d2:	d909      	bls.n	d62e8 <__udivmoddi4+0x8c>
   d62d4:	193c      	adds	r4, r7, r4
   d62d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d62da:	f080 8105 	bcs.w	d64e8 <__udivmoddi4+0x28c>
   d62de:	45a6      	cmp	lr, r4
   d62e0:	f240 8102 	bls.w	d64e8 <__udivmoddi4+0x28c>
   d62e4:	3802      	subs	r0, #2
   d62e6:	443c      	add	r4, r7
   d62e8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d62ec:	eba4 040e 	sub.w	r4, r4, lr
   d62f0:	2600      	movs	r6, #0
   d62f2:	b11d      	cbz	r5, d62fc <__udivmoddi4+0xa0>
   d62f4:	40d4      	lsrs	r4, r2
   d62f6:	2300      	movs	r3, #0
   d62f8:	e9c5 4300 	strd	r4, r3, [r5]
   d62fc:	4631      	mov	r1, r6
   d62fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6302:	b902      	cbnz	r2, d6306 <__udivmoddi4+0xaa>
   d6304:	deff      	udf	#255	; 0xff
   d6306:	fab2 f282 	clz	r2, r2
   d630a:	2a00      	cmp	r2, #0
   d630c:	d150      	bne.n	d63b0 <__udivmoddi4+0x154>
   d630e:	1bcb      	subs	r3, r1, r7
   d6310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d6314:	fa1f f887 	uxth.w	r8, r7
   d6318:	2601      	movs	r6, #1
   d631a:	fbb3 fcfe 	udiv	ip, r3, lr
   d631e:	0c21      	lsrs	r1, r4, #16
   d6320:	fb0e 331c 	mls	r3, lr, ip, r3
   d6324:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d6328:	fb08 f30c 	mul.w	r3, r8, ip
   d632c:	428b      	cmp	r3, r1
   d632e:	d907      	bls.n	d6340 <__udivmoddi4+0xe4>
   d6330:	1879      	adds	r1, r7, r1
   d6332:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d6336:	d202      	bcs.n	d633e <__udivmoddi4+0xe2>
   d6338:	428b      	cmp	r3, r1
   d633a:	f200 80e9 	bhi.w	d6510 <__udivmoddi4+0x2b4>
   d633e:	4684      	mov	ip, r0
   d6340:	1ac9      	subs	r1, r1, r3
   d6342:	b2a3      	uxth	r3, r4
   d6344:	fbb1 f0fe 	udiv	r0, r1, lr
   d6348:	fb0e 1110 	mls	r1, lr, r0, r1
   d634c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d6350:	fb08 f800 	mul.w	r8, r8, r0
   d6354:	45a0      	cmp	r8, r4
   d6356:	d907      	bls.n	d6368 <__udivmoddi4+0x10c>
   d6358:	193c      	adds	r4, r7, r4
   d635a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d635e:	d202      	bcs.n	d6366 <__udivmoddi4+0x10a>
   d6360:	45a0      	cmp	r8, r4
   d6362:	f200 80d9 	bhi.w	d6518 <__udivmoddi4+0x2bc>
   d6366:	4618      	mov	r0, r3
   d6368:	eba4 0408 	sub.w	r4, r4, r8
   d636c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d6370:	e7bf      	b.n	d62f2 <__udivmoddi4+0x96>
   d6372:	428b      	cmp	r3, r1
   d6374:	d909      	bls.n	d638a <__udivmoddi4+0x12e>
   d6376:	2d00      	cmp	r5, #0
   d6378:	f000 80b1 	beq.w	d64de <__udivmoddi4+0x282>
   d637c:	2600      	movs	r6, #0
   d637e:	e9c5 0100 	strd	r0, r1, [r5]
   d6382:	4630      	mov	r0, r6
   d6384:	4631      	mov	r1, r6
   d6386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d638a:	fab3 f683 	clz	r6, r3
   d638e:	2e00      	cmp	r6, #0
   d6390:	d14a      	bne.n	d6428 <__udivmoddi4+0x1cc>
   d6392:	428b      	cmp	r3, r1
   d6394:	d302      	bcc.n	d639c <__udivmoddi4+0x140>
   d6396:	4282      	cmp	r2, r0
   d6398:	f200 80b8 	bhi.w	d650c <__udivmoddi4+0x2b0>
   d639c:	1a84      	subs	r4, r0, r2
   d639e:	eb61 0103 	sbc.w	r1, r1, r3
   d63a2:	2001      	movs	r0, #1
   d63a4:	468c      	mov	ip, r1
   d63a6:	2d00      	cmp	r5, #0
   d63a8:	d0a8      	beq.n	d62fc <__udivmoddi4+0xa0>
   d63aa:	e9c5 4c00 	strd	r4, ip, [r5]
   d63ae:	e7a5      	b.n	d62fc <__udivmoddi4+0xa0>
   d63b0:	f1c2 0320 	rsb	r3, r2, #32
   d63b4:	fa20 f603 	lsr.w	r6, r0, r3
   d63b8:	4097      	lsls	r7, r2
   d63ba:	fa01 f002 	lsl.w	r0, r1, r2
   d63be:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d63c2:	40d9      	lsrs	r1, r3
   d63c4:	4330      	orrs	r0, r6
   d63c6:	0c03      	lsrs	r3, r0, #16
   d63c8:	fbb1 f6fe 	udiv	r6, r1, lr
   d63cc:	fa1f f887 	uxth.w	r8, r7
   d63d0:	fb0e 1116 	mls	r1, lr, r6, r1
   d63d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d63d8:	fb06 f108 	mul.w	r1, r6, r8
   d63dc:	4299      	cmp	r1, r3
   d63de:	fa04 f402 	lsl.w	r4, r4, r2
   d63e2:	d909      	bls.n	d63f8 <__udivmoddi4+0x19c>
   d63e4:	18fb      	adds	r3, r7, r3
   d63e6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d63ea:	f080 808d 	bcs.w	d6508 <__udivmoddi4+0x2ac>
   d63ee:	4299      	cmp	r1, r3
   d63f0:	f240 808a 	bls.w	d6508 <__udivmoddi4+0x2ac>
   d63f4:	3e02      	subs	r6, #2
   d63f6:	443b      	add	r3, r7
   d63f8:	1a5b      	subs	r3, r3, r1
   d63fa:	b281      	uxth	r1, r0
   d63fc:	fbb3 f0fe 	udiv	r0, r3, lr
   d6400:	fb0e 3310 	mls	r3, lr, r0, r3
   d6404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d6408:	fb00 f308 	mul.w	r3, r0, r8
   d640c:	428b      	cmp	r3, r1
   d640e:	d907      	bls.n	d6420 <__udivmoddi4+0x1c4>
   d6410:	1879      	adds	r1, r7, r1
   d6412:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d6416:	d273      	bcs.n	d6500 <__udivmoddi4+0x2a4>
   d6418:	428b      	cmp	r3, r1
   d641a:	d971      	bls.n	d6500 <__udivmoddi4+0x2a4>
   d641c:	3802      	subs	r0, #2
   d641e:	4439      	add	r1, r7
   d6420:	1acb      	subs	r3, r1, r3
   d6422:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d6426:	e778      	b.n	d631a <__udivmoddi4+0xbe>
   d6428:	f1c6 0c20 	rsb	ip, r6, #32
   d642c:	fa03 f406 	lsl.w	r4, r3, r6
   d6430:	fa22 f30c 	lsr.w	r3, r2, ip
   d6434:	431c      	orrs	r4, r3
   d6436:	fa20 f70c 	lsr.w	r7, r0, ip
   d643a:	fa01 f306 	lsl.w	r3, r1, r6
   d643e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d6442:	fa21 f10c 	lsr.w	r1, r1, ip
   d6446:	431f      	orrs	r7, r3
   d6448:	0c3b      	lsrs	r3, r7, #16
   d644a:	fbb1 f9fe 	udiv	r9, r1, lr
   d644e:	fa1f f884 	uxth.w	r8, r4
   d6452:	fb0e 1119 	mls	r1, lr, r9, r1
   d6456:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d645a:	fb09 fa08 	mul.w	sl, r9, r8
   d645e:	458a      	cmp	sl, r1
   d6460:	fa02 f206 	lsl.w	r2, r2, r6
   d6464:	fa00 f306 	lsl.w	r3, r0, r6
   d6468:	d908      	bls.n	d647c <__udivmoddi4+0x220>
   d646a:	1861      	adds	r1, r4, r1
   d646c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d6470:	d248      	bcs.n	d6504 <__udivmoddi4+0x2a8>
   d6472:	458a      	cmp	sl, r1
   d6474:	d946      	bls.n	d6504 <__udivmoddi4+0x2a8>
   d6476:	f1a9 0902 	sub.w	r9, r9, #2
   d647a:	4421      	add	r1, r4
   d647c:	eba1 010a 	sub.w	r1, r1, sl
   d6480:	b2bf      	uxth	r7, r7
   d6482:	fbb1 f0fe 	udiv	r0, r1, lr
   d6486:	fb0e 1110 	mls	r1, lr, r0, r1
   d648a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d648e:	fb00 f808 	mul.w	r8, r0, r8
   d6492:	45b8      	cmp	r8, r7
   d6494:	d907      	bls.n	d64a6 <__udivmoddi4+0x24a>
   d6496:	19e7      	adds	r7, r4, r7
   d6498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d649c:	d22e      	bcs.n	d64fc <__udivmoddi4+0x2a0>
   d649e:	45b8      	cmp	r8, r7
   d64a0:	d92c      	bls.n	d64fc <__udivmoddi4+0x2a0>
   d64a2:	3802      	subs	r0, #2
   d64a4:	4427      	add	r7, r4
   d64a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d64aa:	eba7 0708 	sub.w	r7, r7, r8
   d64ae:	fba0 8902 	umull	r8, r9, r0, r2
   d64b2:	454f      	cmp	r7, r9
   d64b4:	46c6      	mov	lr, r8
   d64b6:	4649      	mov	r1, r9
   d64b8:	d31a      	bcc.n	d64f0 <__udivmoddi4+0x294>
   d64ba:	d017      	beq.n	d64ec <__udivmoddi4+0x290>
   d64bc:	b15d      	cbz	r5, d64d6 <__udivmoddi4+0x27a>
   d64be:	ebb3 020e 	subs.w	r2, r3, lr
   d64c2:	eb67 0701 	sbc.w	r7, r7, r1
   d64c6:	fa07 fc0c 	lsl.w	ip, r7, ip
   d64ca:	40f2      	lsrs	r2, r6
   d64cc:	ea4c 0202 	orr.w	r2, ip, r2
   d64d0:	40f7      	lsrs	r7, r6
   d64d2:	e9c5 2700 	strd	r2, r7, [r5]
   d64d6:	2600      	movs	r6, #0
   d64d8:	4631      	mov	r1, r6
   d64da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d64de:	462e      	mov	r6, r5
   d64e0:	4628      	mov	r0, r5
   d64e2:	e70b      	b.n	d62fc <__udivmoddi4+0xa0>
   d64e4:	4606      	mov	r6, r0
   d64e6:	e6e9      	b.n	d62bc <__udivmoddi4+0x60>
   d64e8:	4618      	mov	r0, r3
   d64ea:	e6fd      	b.n	d62e8 <__udivmoddi4+0x8c>
   d64ec:	4543      	cmp	r3, r8
   d64ee:	d2e5      	bcs.n	d64bc <__udivmoddi4+0x260>
   d64f0:	ebb8 0e02 	subs.w	lr, r8, r2
   d64f4:	eb69 0104 	sbc.w	r1, r9, r4
   d64f8:	3801      	subs	r0, #1
   d64fa:	e7df      	b.n	d64bc <__udivmoddi4+0x260>
   d64fc:	4608      	mov	r0, r1
   d64fe:	e7d2      	b.n	d64a6 <__udivmoddi4+0x24a>
   d6500:	4660      	mov	r0, ip
   d6502:	e78d      	b.n	d6420 <__udivmoddi4+0x1c4>
   d6504:	4681      	mov	r9, r0
   d6506:	e7b9      	b.n	d647c <__udivmoddi4+0x220>
   d6508:	4666      	mov	r6, ip
   d650a:	e775      	b.n	d63f8 <__udivmoddi4+0x19c>
   d650c:	4630      	mov	r0, r6
   d650e:	e74a      	b.n	d63a6 <__udivmoddi4+0x14a>
   d6510:	f1ac 0c02 	sub.w	ip, ip, #2
   d6514:	4439      	add	r1, r7
   d6516:	e713      	b.n	d6340 <__udivmoddi4+0xe4>
   d6518:	3802      	subs	r0, #2
   d651a:	443c      	add	r4, r7
   d651c:	e724      	b.n	d6368 <__udivmoddi4+0x10c>
   d651e:	bf00      	nop

000d6520 <__aeabi_idiv0>:
   d6520:	4770      	bx	lr
   d6522:	bf00      	nop

000d6524 <atexit>:
   d6524:	2300      	movs	r3, #0
   d6526:	4601      	mov	r1, r0
   d6528:	461a      	mov	r2, r3
   d652a:	4618      	mov	r0, r3
   d652c:	f000 b860 	b.w	d65f0 <__register_exitproc>

000d6530 <memcpy>:
   d6530:	440a      	add	r2, r1
   d6532:	4291      	cmp	r1, r2
   d6534:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6538:	d100      	bne.n	d653c <memcpy+0xc>
   d653a:	4770      	bx	lr
   d653c:	b510      	push	{r4, lr}
   d653e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6542:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6546:	4291      	cmp	r1, r2
   d6548:	d1f9      	bne.n	d653e <memcpy+0xe>
   d654a:	bd10      	pop	{r4, pc}

000d654c <memset>:
   d654c:	4402      	add	r2, r0
   d654e:	4603      	mov	r3, r0
   d6550:	4293      	cmp	r3, r2
   d6552:	d100      	bne.n	d6556 <memset+0xa>
   d6554:	4770      	bx	lr
   d6556:	f803 1b01 	strb.w	r1, [r3], #1
   d655a:	e7f9      	b.n	d6550 <memset+0x4>

000d655c <srand>:
   d655c:	b538      	push	{r3, r4, r5, lr}
   d655e:	4b0d      	ldr	r3, [pc, #52]	; (d6594 <srand+0x38>)
   d6560:	681d      	ldr	r5, [r3, #0]
   d6562:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6564:	4604      	mov	r4, r0
   d6566:	b97b      	cbnz	r3, d6588 <srand+0x2c>
   d6568:	2018      	movs	r0, #24
   d656a:	f7fe f8ab 	bl	d46c4 <malloc>
   d656e:	4a0a      	ldr	r2, [pc, #40]	; (d6598 <srand+0x3c>)
   d6570:	4b0a      	ldr	r3, [pc, #40]	; (d659c <srand+0x40>)
   d6572:	63a8      	str	r0, [r5, #56]	; 0x38
   d6574:	e9c0 2300 	strd	r2, r3, [r0]
   d6578:	4b09      	ldr	r3, [pc, #36]	; (d65a0 <srand+0x44>)
   d657a:	6083      	str	r3, [r0, #8]
   d657c:	230b      	movs	r3, #11
   d657e:	8183      	strh	r3, [r0, #12]
   d6580:	2201      	movs	r2, #1
   d6582:	2300      	movs	r3, #0
   d6584:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6588:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d658a:	2200      	movs	r2, #0
   d658c:	611c      	str	r4, [r3, #16]
   d658e:	615a      	str	r2, [r3, #20]
   d6590:	bd38      	pop	{r3, r4, r5, pc}
   d6592:	bf00      	nop
   d6594:	2003e518 	.word	0x2003e518
   d6598:	abcd330e 	.word	0xabcd330e
   d659c:	e66d1234 	.word	0xe66d1234
   d65a0:	0005deec 	.word	0x0005deec

000d65a4 <strdup>:
   d65a4:	4b02      	ldr	r3, [pc, #8]	; (d65b0 <strdup+0xc>)
   d65a6:	4601      	mov	r1, r0
   d65a8:	6818      	ldr	r0, [r3, #0]
   d65aa:	f000 b803 	b.w	d65b4 <_strdup_r>
   d65ae:	bf00      	nop
   d65b0:	2003e518 	.word	0x2003e518

000d65b4 <_strdup_r>:
   d65b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d65b6:	4604      	mov	r4, r0
   d65b8:	4608      	mov	r0, r1
   d65ba:	460d      	mov	r5, r1
   d65bc:	f000 f80f 	bl	d65de <strlen>
   d65c0:	1c42      	adds	r2, r0, #1
   d65c2:	4611      	mov	r1, r2
   d65c4:	4620      	mov	r0, r4
   d65c6:	9201      	str	r2, [sp, #4]
   d65c8:	f7fe f89c 	bl	d4704 <_malloc_r>
   d65cc:	4604      	mov	r4, r0
   d65ce:	b118      	cbz	r0, d65d8 <_strdup_r+0x24>
   d65d0:	9a01      	ldr	r2, [sp, #4]
   d65d2:	4629      	mov	r1, r5
   d65d4:	f7ff ffac 	bl	d6530 <memcpy>
   d65d8:	4620      	mov	r0, r4
   d65da:	b003      	add	sp, #12
   d65dc:	bd30      	pop	{r4, r5, pc}

000d65de <strlen>:
   d65de:	4603      	mov	r3, r0
   d65e0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d65e4:	2a00      	cmp	r2, #0
   d65e6:	d1fb      	bne.n	d65e0 <strlen+0x2>
   d65e8:	1a18      	subs	r0, r3, r0
   d65ea:	3801      	subs	r0, #1
   d65ec:	4770      	bx	lr
	...

000d65f0 <__register_exitproc>:
   d65f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d65f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d66b0 <__register_exitproc+0xc0>
   d65f8:	4606      	mov	r6, r0
   d65fa:	f8d8 0000 	ldr.w	r0, [r8]
   d65fe:	461f      	mov	r7, r3
   d6600:	460d      	mov	r5, r1
   d6602:	4691      	mov	r9, r2
   d6604:	f000 f856 	bl	d66b4 <__retarget_lock_acquire_recursive>
   d6608:	4b25      	ldr	r3, [pc, #148]	; (d66a0 <__register_exitproc+0xb0>)
   d660a:	681c      	ldr	r4, [r3, #0]
   d660c:	b934      	cbnz	r4, d661c <__register_exitproc+0x2c>
   d660e:	4c25      	ldr	r4, [pc, #148]	; (d66a4 <__register_exitproc+0xb4>)
   d6610:	601c      	str	r4, [r3, #0]
   d6612:	4b25      	ldr	r3, [pc, #148]	; (d66a8 <__register_exitproc+0xb8>)
   d6614:	b113      	cbz	r3, d661c <__register_exitproc+0x2c>
   d6616:	681b      	ldr	r3, [r3, #0]
   d6618:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d661c:	6863      	ldr	r3, [r4, #4]
   d661e:	2b1f      	cmp	r3, #31
   d6620:	dd07      	ble.n	d6632 <__register_exitproc+0x42>
   d6622:	f8d8 0000 	ldr.w	r0, [r8]
   d6626:	f000 f847 	bl	d66b8 <__retarget_lock_release_recursive>
   d662a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d662e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d6632:	b34e      	cbz	r6, d6688 <__register_exitproc+0x98>
   d6634:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d6638:	b988      	cbnz	r0, d665e <__register_exitproc+0x6e>
   d663a:	4b1c      	ldr	r3, [pc, #112]	; (d66ac <__register_exitproc+0xbc>)
   d663c:	b923      	cbnz	r3, d6648 <__register_exitproc+0x58>
   d663e:	f8d8 0000 	ldr.w	r0, [r8]
   d6642:	f000 f838 	bl	d66b6 <__retarget_lock_release>
   d6646:	e7f0      	b.n	d662a <__register_exitproc+0x3a>
   d6648:	f44f 7084 	mov.w	r0, #264	; 0x108
   d664c:	f7fe f83a 	bl	d46c4 <malloc>
   d6650:	2800      	cmp	r0, #0
   d6652:	d0f4      	beq.n	d663e <__register_exitproc+0x4e>
   d6654:	2300      	movs	r3, #0
   d6656:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d665a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d665e:	6863      	ldr	r3, [r4, #4]
   d6660:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d6664:	2201      	movs	r2, #1
   d6666:	409a      	lsls	r2, r3
   d6668:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d666c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d6670:	4313      	orrs	r3, r2
   d6672:	2e02      	cmp	r6, #2
   d6674:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d6678:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d667c:	bf02      	ittt	eq
   d667e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d6682:	431a      	orreq	r2, r3
   d6684:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d6688:	6863      	ldr	r3, [r4, #4]
   d668a:	f8d8 0000 	ldr.w	r0, [r8]
   d668e:	1c5a      	adds	r2, r3, #1
   d6690:	3302      	adds	r3, #2
   d6692:	6062      	str	r2, [r4, #4]
   d6694:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d6698:	f000 f80e 	bl	d66b8 <__retarget_lock_release_recursive>
   d669c:	2000      	movs	r0, #0
   d669e:	e7c6      	b.n	d662e <__register_exitproc+0x3e>
   d66a0:	2003e7e0 	.word	0x2003e7e0
   d66a4:	2003e754 	.word	0x2003e754
   d66a8:	00000000 	.word	0x00000000
   d66ac:	000d46c5 	.word	0x000d46c5
   d66b0:	2003e57c 	.word	0x2003e57c

000d66b4 <__retarget_lock_acquire_recursive>:
   d66b4:	4770      	bx	lr

000d66b6 <__retarget_lock_release>:
   d66b6:	4770      	bx	lr

000d66b8 <__retarget_lock_release_recursive>:
   d66b8:	4770      	bx	lr

000d66ba <link_code_end>:
	...

000d66bc <dynalib_user>:
   d66bc:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d66cc:	0000 0000 6c43 736f 5f65 6f43 746e 6361     ....Close_Contac
   d66dc:	0074 0000                                   t...

000d66e0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d66e8:	47a9 000d 47af 000d 47ff 000d 47bd 000d     .G...G...G...G..
   d66f8:	47ab 000d                                   .G..

000d66fc <_ZTVN5spark13EthernetClassE>:
	...
   d6704:	4d77 000d 4d6d 000d 4d63 000d 4d59 000d     wM..mM..cM..YM..
   d6714:	4d4d 000d 4d41 000d 4f45 000d 4f4d 000d     MM..AM..EO..MO..
   d6724:	4d35 000d 4d2d 000d 4d23 000d 4d19 000d     5M..-M..#M...M..
   d6734:	4f7d 000d                                   }O..

000d6738 <_ZTV7TwoWire>:
	...
   d6740:	4d95 000d 4ddf 000d 4db7 000d 4d97 000d     .M...M...M...M..
   d6750:	4dbf 000d 4dc7 000d 4dcf 000d 4dd7 000d     .M...M...M...M..

000d6760 <_ZTV9IPAddress>:
	...
   d6768:	4e21 000d 4e11 000d 4e13 000d 7061 0070     !N...N...N..app.

000d6778 <_ZTVN5spark12NetworkClassE>:
	...
   d6780:	4f05 000d 4f0f 000d 4f19 000d 4f23 000d     .O...O...O..#O..
   d6790:	4f2d 000d 4f39 000d 4f45 000d 4f4d 000d     -O..9O..EO..MO..
   d67a0:	4f55 000d 4f61 000d 4f69 000d 4f73 000d     UO..aO..iO..sO..
   d67b0:	4f7d 000d 5925 252d 2d6d 6425 2554 3a48     }O..%Y-%m-%dT%H:
   d67c0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d67d0 <_ZTV11USARTSerial>:
	...
   d67d8:	5365 000d 53d3 000d 53ab 000d 5065 000d     eS...S...S..eP..
   d67e8:	537b 000d 5397 000d 5389 000d 53a5 000d     {S...S...S...S..
   d67f8:	5367 000d 536d 000d                         gS..mS..

000d6800 <_ZTV9USBSerial>:
	...
   d6808:	545f 000d 54c7 000d 549d 000d 5065 000d     _T...T...T..eP..
   d6818:	548f 000d 5461 000d 5471 000d 54c1 000d     .T..aT..qT...T..
   d6828:	5481 000d 5459 000d                         .T..YT..

000d6830 <_ZTVN5spark9WiFiClassE>:
	...
   d6838:	55b7 000d 55ad 000d 55a3 000d 5559 000d     .U...U...U..YU..
   d6848:	5597 000d 558b 000d 4f45 000d 4f4d 000d     .U...U..EO..MO..
   d6858:	557f 000d 5577 000d 556d 000d 5563 000d     .U..wU..mU..cU..
   d6868:	4f7d 000d                                   }O..

000d686c <_ZSt7nothrow>:
	...

000d686d <link_const_variable_data_end>:
   d686d:	00          	.byte	0x00
	...

000d6870 <link_constructors_location>:
   d6870:	000d418d 	.word	0x000d418d
   d6874:	000d4799 	.word	0x000d4799
   d6878:	000d4d81 	.word	0x000d4d81
   d687c:	000d4ef5 	.word	0x000d4ef5
   d6880:	000d5051 	.word	0x000d5051
   d6884:	000d50f9 	.word	0x000d50f9
   d6888:	000d52b9 	.word	0x000d52b9
   d688c:	000d5351 	.word	0x000d5351
   d6890:	000d55c1 	.word	0x000d55c1

000d6894 <link_constructors_end>:
	...
