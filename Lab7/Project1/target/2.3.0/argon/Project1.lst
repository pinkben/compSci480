
/Users/pinkb95/Desktop/CS480/compSci480/Lab7/Project1/target/2.3.0/argon/Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003184  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d71a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e4dc  000d71a4  0001e4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002a0  2003e550  2003e550  0002e550  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7218  000d7218  00027218  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7240  000d7240  00027240  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00154e5a  00000000  00000000  00027244  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015bd0  00000000  00000000  0017c09e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002d93d  00000000  00000000  00191c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002718  00000000  00000000  001bf5ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006f08  00000000  00000000  001c1cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000396c4  00000000  00000000  001c8bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000396d3  00000000  00000000  0020228f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00107dea  00000000  00000000  0023b962  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006e8c  00000000  00000000  0034374c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f9c3 	bl	d63b8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f9cb 	bl	d63d4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e4dc 	.word	0x2003e4dc
   d4048:	000d71a4 	.word	0x000d71a4
   d404c:	2003e550 	.word	0x2003e550
   d4050:	2003e550 	.word	0x2003e550
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 f8b7 	bl	d61d0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7174 	.word	0x000d7174
   d407c:	000d7198 	.word	0x000d7198

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b81e 	b.w	d40c0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f847 	bl	d4118 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 b857 	b.w	d6140 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f001 bb79 	b.w	d5788 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f001 bb7f 	b.w	d5798 <free>
	...

000d409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d409e:	4a03      	ldr	r2, [pc, #12]	; (d40ac <__cxa_pure_virtual+0x10>)
   d40a0:	2100      	movs	r1, #0
   d40a2:	200c      	movs	r0, #12
   d40a4:	f001 fab4 	bl	d5610 <panic_>
  while (1);
   d40a8:	e7fe      	b.n	d40a8 <__cxa_pure_virtual+0xc>
   d40aa:	bf00      	nop
   d40ac:	000d5341 	.word	0x000d5341

000d40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b0:	7800      	ldrb	r0, [r0, #0]
   d40b2:	fab0 f080 	clz	r0, r0
   d40b6:	0940      	lsrs	r0, r0, #5
   d40b8:	4770      	bx	lr

000d40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ba:	2301      	movs	r3, #1
   d40bc:	7003      	strb	r3, [r0, #0]
   d40be:	4770      	bx	lr

000d40c0 <setup>:
int aButtonTimer;
int bButtonTimer;

Adafruit_SSD1306 display = Adafruit_SSD1306(128, 32, &Wire);

void setup() {
   d40c0:	b513      	push	{r0, r1, r4, lr}
  Serial.begin(9600);
   d40c2:	f001 ffb7 	bl	d6034 <_Z16_fetch_usbserialv>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d40c6:	4c11      	ldr	r4, [pc, #68]	; (d410c <setup+0x4c>)
  Serial.begin(9600);
   d40c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40cc:	f001 ffa6 	bl	d601c <_ZN9USBSerial5beginEl>
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d40d0:	2301      	movs	r3, #1
   d40d2:	9300      	str	r3, [sp, #0]
   d40d4:	223c      	movs	r2, #60	; 0x3c
   d40d6:	2102      	movs	r1, #2
   d40d8:	4620      	mov	r0, r4
   d40da:	f000 fe29 	bl	d4d30 <_ZN16Adafruit_SSD13065beginEhhbb>
  
  display.display();
   d40de:	4620      	mov	r0, r4
   d40e0:	f001 f884 	bl	d51ec <_ZN16Adafruit_SSD13067displayEv>
  delay(1000);
   d40e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d40e8:	f001 fb6e 	bl	d57c8 <delay>
  display.clearDisplay();
   d40ec:	4620      	mov	r0, r4
   d40ee:	f000 fe11 	bl	d4d14 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d40f2:	4620      	mov	r0, r4
   d40f4:	f001 f87a 	bl	d51ec <_ZN16Adafruit_SSD13067displayEv>
  aButtonTimer = Time.now(); 
   d40f8:	f001 feaa 	bl	d5e50 <_ZN9TimeClass3nowEv>
   d40fc:	4b04      	ldr	r3, [pc, #16]	; (d4110 <setup+0x50>)
   d40fe:	6018      	str	r0, [r3, #0]
  bButtonTimer = Time.now();
   d4100:	f001 fea6 	bl	d5e50 <_ZN9TimeClass3nowEv>
   d4104:	4b03      	ldr	r3, [pc, #12]	; (d4114 <setup+0x54>)
   d4106:	6018      	str	r0, [r3, #0]
}
   d4108:	b002      	add	sp, #8
   d410a:	bd10      	pop	{r4, pc}
   d410c:	2003e558 	.word	0x2003e558
   d4110:	2003e550 	.word	0x2003e550
   d4114:	2003e554 	.word	0x2003e554

000d4118 <loop>:


void loop() {
   d4118:	b538      	push	{r3, r4, r5, lr}
  // Button A pressed
  if (digitalRead(buttonA) == LOW && digitalRead(buttonB) != LOW)
   d411a:	4c23      	ldr	r4, [pc, #140]	; (d41a8 <loop+0x90>)
   d411c:	4d23      	ldr	r5, [pc, #140]	; (d41ac <loop+0x94>)
   d411e:	8820      	ldrh	r0, [r4, #0]
   d4120:	f002 f8f0 	bl	d6304 <digitalRead>
   d4124:	b968      	cbnz	r0, d4142 <loop+0x2a>
   d4126:	8828      	ldrh	r0, [r5, #0]
   d4128:	f002 f8ec 	bl	d6304 <digitalRead>
   d412c:	b148      	cbz	r0, d4142 <loop+0x2a>
  {
    if(Time.now() - aButtonTimer < 1)
   d412e:	f001 fe8f 	bl	d5e50 <_ZN9TimeClass3nowEv>
   d4132:	4a1f      	ldr	r2, [pc, #124]	; (d41b0 <loop+0x98>)
    }
  }
  // Button B Pressed
  else if (digitalRead(buttonB) == LOW && digitalRead(buttonA) != LOW)
  {
    if(Time.now() - bButtonTimer < 1)
   d4134:	6813      	ldr	r3, [r2, #0]
   d4136:	1ac0      	subs	r0, r0, r3
   d4138:	2800      	cmp	r0, #0
   d413a:	dc12      	bgt.n	d4162 <loop+0x4a>
    {
      bButtonTimer--;
   d413c:	3b01      	subs	r3, #1
   d413e:	6013      	str	r3, [r2, #0]
   d4140:	e00f      	b.n	d4162 <loop+0x4a>
  else if (digitalRead(buttonB) == LOW && digitalRead(buttonA) != LOW)
   d4142:	8828      	ldrh	r0, [r5, #0]
   d4144:	f002 f8de 	bl	d6304 <digitalRead>
   d4148:	b160      	cbz	r0, d4164 <loop+0x4c>
    }
  }
  // Both buttons pressed
  else if (digitalRead(buttonA) == LOW && digitalRead(buttonB) == LOW)
   d414a:	8820      	ldrh	r0, [r4, #0]
   d414c:	4c18      	ldr	r4, [pc, #96]	; (d41b0 <loop+0x98>)
   d414e:	f002 f8d9 	bl	d6304 <digitalRead>
   d4152:	b180      	cbz	r0, d4176 <loop+0x5e>

  }
  // No buttons pressed
  else
  {
    aButtonTimer = Time.now();
   d4154:	f001 fe7c 	bl	d5e50 <_ZN9TimeClass3nowEv>
   d4158:	6020      	str	r0, [r4, #0]
    bButtonTimer = Time.now();
   d415a:	f001 fe79 	bl	d5e50 <_ZN9TimeClass3nowEv>
   d415e:	4b15      	ldr	r3, [pc, #84]	; (d41b4 <loop+0x9c>)
   d4160:	6018      	str	r0, [r3, #0]
  }

   d4162:	bd38      	pop	{r3, r4, r5, pc}
  else if (digitalRead(buttonB) == LOW && digitalRead(buttonA) != LOW)
   d4164:	8820      	ldrh	r0, [r4, #0]
   d4166:	f002 f8cd 	bl	d6304 <digitalRead>
   d416a:	2800      	cmp	r0, #0
   d416c:	d0ed      	beq.n	d414a <loop+0x32>
    if(Time.now() - bButtonTimer < 1)
   d416e:	f001 fe6f 	bl	d5e50 <_ZN9TimeClass3nowEv>
   d4172:	4a10      	ldr	r2, [pc, #64]	; (d41b4 <loop+0x9c>)
   d4174:	e7de      	b.n	d4134 <loop+0x1c>
  else if (digitalRead(buttonA) == LOW && digitalRead(buttonB) == LOW)
   d4176:	8828      	ldrh	r0, [r5, #0]
   d4178:	f002 f8c4 	bl	d6304 <digitalRead>
   d417c:	2800      	cmp	r0, #0
   d417e:	d1e9      	bne.n	d4154 <loop+0x3c>
    if((Time.now() - aButtonTimer < 1) && (Time.now() - bButtonTimer < 1))
   d4180:	f001 fe66 	bl	d5e50 <_ZN9TimeClass3nowEv>
   d4184:	6823      	ldr	r3, [r4, #0]
   d4186:	1ac0      	subs	r0, r0, r3
   d4188:	2800      	cmp	r0, #0
   d418a:	dcea      	bgt.n	d4162 <loop+0x4a>
   d418c:	f001 fe60 	bl	d5e50 <_ZN9TimeClass3nowEv>
   d4190:	4908      	ldr	r1, [pc, #32]	; (d41b4 <loop+0x9c>)
   d4192:	680b      	ldr	r3, [r1, #0]
   d4194:	1ac0      	subs	r0, r0, r3
   d4196:	2800      	cmp	r0, #0
   d4198:	dce3      	bgt.n	d4162 <loop+0x4a>
      aButtonTimer--;
   d419a:	6822      	ldr	r2, [r4, #0]
      bButtonTimer--;
   d419c:	3b01      	subs	r3, #1
      aButtonTimer--;
   d419e:	3a01      	subs	r2, #1
   d41a0:	6022      	str	r2, [r4, #0]
      bButtonTimer--;
   d41a2:	600b      	str	r3, [r1, #0]
   d41a4:	e7dd      	b.n	d4162 <loop+0x4a>
   d41a6:	bf00      	nop
   d41a8:	2003e4dc 	.word	0x2003e4dc
   d41ac:	2003e4e0 	.word	0x2003e4e0
   d41b0:	2003e550 	.word	0x2003e550
   d41b4:	2003e554 	.word	0x2003e554

000d41b8 <_GLOBAL__sub_I_buttonA>:
   d41b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
Adafruit_SSD1306 display = Adafruit_SSD1306(128, 32, &Wire);
   d41ba:	f002 f8cf 	bl	d635c <_Z19__fetch_global_Wirev>
   d41be:	4a08      	ldr	r2, [pc, #32]	; (d41e0 <_GLOBAL__sub_I_buttonA+0x28>)
   d41c0:	4908      	ldr	r1, [pc, #32]	; (d41e4 <_GLOBAL__sub_I_buttonA+0x2c>)
   d41c2:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d41c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d41ca:	4603      	mov	r3, r0
   d41cc:	9200      	str	r2, [sp, #0]
   d41ce:	2180      	movs	r1, #128	; 0x80
   d41d0:	2220      	movs	r2, #32
   d41d2:	4805      	ldr	r0, [pc, #20]	; (d41e8 <_GLOBAL__sub_I_buttonA+0x30>)
   d41d4:	f000 fcac 	bl	d4b30 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d41d8:	b005      	add	sp, #20
   d41da:	f85d fb04 	ldr.w	pc, [sp], #4
   d41de:	bf00      	nop
   d41e0:	00061a80 	.word	0x00061a80
   d41e4:	000186a0 	.word	0x000186a0
   d41e8:	2003e558 	.word	0x2003e558

000d41ec <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d41ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d41f0:	b085      	sub	sp, #20
   d41f2:	461f      	mov	r7, r3
   d41f4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d41f8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d41fc:	eba8 0902 	sub.w	r9, r8, r2
   d4200:	eba7 0a01 	sub.w	sl, r7, r1
   d4204:	f1b9 0f00 	cmp.w	r9, #0
   d4208:	bfb8      	it	lt
   d420a:	f1c9 0900 	rsblt	r9, r9, #0
   d420e:	f1ba 0f00 	cmp.w	sl, #0
   d4212:	bfb8      	it	lt
   d4214:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4218:	45d1      	cmp	r9, sl
        uint16_t color) {
   d421a:	4683      	mov	fp, r0
   d421c:	460c      	mov	r4, r1
   d421e:	4615      	mov	r5, r2
    if (steep) {
   d4220:	dd04      	ble.n	d422c <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d4222:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d4224:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d4226:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4228:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d422a:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d422c:	42bc      	cmp	r4, r7
   d422e:	dd05      	ble.n	d423c <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4230:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4232:	4645      	mov	r5, r8
   d4234:	4690      	mov	r8, r2
    if (x0 > x1) {
   d4236:	4622      	mov	r2, r4
   d4238:	463c      	mov	r4, r7
   d423a:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d423c:	1b3e      	subs	r6, r7, r4
   d423e:	b2b2      	uxth	r2, r6
   d4240:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d4242:	eba8 0205 	sub.w	r2, r8, r5
   d4246:	2a00      	cmp	r2, #0
   d4248:	bfb8      	it	lt
   d424a:	4252      	neglt	r2, r2
   d424c:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d424e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d4252:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4256:	4545      	cmp	r5, r8
   d4258:	bfb4      	ite	lt
   d425a:	2201      	movlt	r2, #1
   d425c:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    int16_t err = dx / 2;
   d4260:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d4262:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d4264:	42bc      	cmp	r4, r7
   d4266:	dc1c      	bgt.n	d42a2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4268:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d426c:	9303      	str	r3, [sp, #12]
        if (steep) {
   d426e:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d4270:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d4274:	bfc7      	ittee	gt
   d4276:	4629      	movgt	r1, r5
   d4278:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d427a:	462a      	movle	r2, r5
   d427c:	4621      	movle	r1, r4
   d427e:	4658      	mov	r0, fp
   d4280:	47c0      	blx	r8
        }
        err -= dy;
   d4282:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d4284:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d4286:	1ab6      	subs	r6, r6, r2
   d4288:	b2b1      	uxth	r1, r6
   d428a:	b236      	sxth	r6, r6
        if (err < 0) {
   d428c:	2e00      	cmp	r6, #0
   d428e:	da05      	bge.n	d429c <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d4290:	9a02      	ldr	r2, [sp, #8]
   d4292:	4415      	add	r5, r2
            err += dx;
   d4294:	9a00      	ldr	r2, [sp, #0]
   d4296:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4298:	b22d      	sxth	r5, r5
            err += dx;
   d429a:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d429c:	3401      	adds	r4, #1
   d429e:	b224      	sxth	r4, r4
   d42a0:	e7e0      	b.n	d4264 <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d42a2:	b005      	add	sp, #20
   d42a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d42a8 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d42a8:	4770      	bx	lr

000d42aa <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d42aa:	b410      	push	{r4}
    drawPixel(x, y, color);
   d42ac:	6804      	ldr	r4, [r0, #0]
   d42ae:	6924      	ldr	r4, [r4, #16]
   d42b0:	46a4      	mov	ip, r4
}
   d42b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d42b6:	4760      	bx	ip

000d42b8 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d42b8:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d42ba:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d42bc:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d42c0:	9502      	str	r5, [sp, #8]
   d42c2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d42c4:	46a4      	mov	ip, r4
}
   d42c6:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d42c8:	4760      	bx	ip

000d42ca <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d42ca:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d42cc:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d42ce:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d42d2:	9502      	str	r5, [sp, #8]
   d42d4:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d42d6:	46a4      	mov	ip, r4
}
   d42d8:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d42da:	4760      	bx	ip

000d42dc <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d42dc:	b470      	push	{r4, r5, r6}
   d42de:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d42e2:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d42e6:	6804      	ldr	r4, [r0, #0]
   d42e8:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d42ec:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d42ee:	46a4      	mov	ip, r4
}
   d42f0:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d42f2:	4760      	bx	ip

000d42f4 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d42f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d42f8:	461c      	mov	r4, r3
    startWrite();
   d42fa:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d42fc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4300:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d4302:	4605      	mov	r5, r0
   d4304:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d4306:	3c01      	subs	r4, #1
   d4308:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d430a:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d430c:	b224      	sxth	r4, r4
    startWrite();
   d430e:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4310:	682b      	ldr	r3, [r5, #0]
   d4312:	f8cd 8004 	str.w	r8, [sp, #4]
   d4316:	9400      	str	r4, [sp, #0]
   d4318:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d431a:	4628      	mov	r0, r5
   d431c:	463b      	mov	r3, r7
   d431e:	4632      	mov	r2, r6
   d4320:	4639      	mov	r1, r7
   d4322:	47a0      	blx	r4
    endWrite();
   d4324:	682b      	ldr	r3, [r5, #0]
   d4326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4328:	4628      	mov	r0, r5
}
   d432a:	b002      	add	sp, #8
   d432c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4330:	4718      	bx	r3

000d4332 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4332:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4336:	461d      	mov	r5, r3
    startWrite();
   d4338:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d433a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d433e:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d4340:	4604      	mov	r4, r0
   d4342:	4617      	mov	r7, r2
   d4344:	460e      	mov	r6, r1
    startWrite();
   d4346:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4348:	e9cd 7800 	strd	r7, r8, [sp]
   d434c:	6822      	ldr	r2, [r4, #0]
   d434e:	1e6b      	subs	r3, r5, #1
   d4350:	4433      	add	r3, r6
   d4352:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4354:	4620      	mov	r0, r4
   d4356:	b21b      	sxth	r3, r3
   d4358:	463a      	mov	r2, r7
   d435a:	4631      	mov	r1, r6
   d435c:	47a8      	blx	r5
    endWrite();
   d435e:	6823      	ldr	r3, [r4, #0]
   d4360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4362:	4620      	mov	r0, r4
}
   d4364:	b002      	add	sp, #8
   d4366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d436a:	4718      	bx	r3

000d436c <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d436c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4370:	461e      	mov	r6, r3
    startWrite();
   d4372:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d4374:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d4378:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d437a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d437e:	460c      	mov	r4, r1
   d4380:	4605      	mov	r5, r0
   d4382:	4617      	mov	r7, r2
    startWrite();
   d4384:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d4386:	4426      	add	r6, r4
   d4388:	42b4      	cmp	r4, r6
   d438a:	682b      	ldr	r3, [r5, #0]
   d438c:	da0b      	bge.n	d43a6 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d438e:	f8cd 8000 	str.w	r8, [sp]
   d4392:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4396:	4621      	mov	r1, r4
   d4398:	464b      	mov	r3, r9
   d439a:	463a      	mov	r2, r7
   d439c:	4628      	mov	r0, r5
   d439e:	3401      	adds	r4, #1
   d43a0:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d43a2:	b224      	sxth	r4, r4
   d43a4:	e7f0      	b.n	d4388 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d43a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d43a8:	4628      	mov	r0, r5
}
   d43aa:	b002      	add	sp, #8
   d43ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d43b0:	4718      	bx	r3

000d43b2 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d43b2:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d43b4:	6802      	ldr	r2, [r0, #0]
   d43b6:	9101      	str	r1, [sp, #4]
   d43b8:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d43bc:	9100      	str	r1, [sp, #0]
   d43be:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d43c0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d43c4:	2200      	movs	r2, #0
   d43c6:	4611      	mov	r1, r2
   d43c8:	47a0      	blx	r4
}
   d43ca:	b002      	add	sp, #8
   d43cc:	bd10      	pop	{r4, pc}

000d43ce <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d43ce:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d43d2:	461d      	mov	r5, r3
    startWrite();
   d43d4:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d43d6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d43da:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d43dc:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d43e0:	4604      	mov	r4, r0
   d43e2:	460f      	mov	r7, r1
   d43e4:	4616      	mov	r6, r2
    startWrite();
   d43e6:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d43e8:	6823      	ldr	r3, [r4, #0]
   d43ea:	f8cd 8000 	str.w	r8, [sp]
   d43ee:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d43f2:	4632      	mov	r2, r6
   d43f4:	462b      	mov	r3, r5
   d43f6:	4639      	mov	r1, r7
   d43f8:	4620      	mov	r0, r4
   d43fa:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d43fc:	6823      	ldr	r3, [r4, #0]
   d43fe:	f8cd 8000 	str.w	r8, [sp]
   d4402:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   d4406:	4432      	add	r2, r6
   d4408:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d440c:	4639      	mov	r1, r7
   d440e:	462b      	mov	r3, r5
   d4410:	4620      	mov	r0, r4
   d4412:	b212      	sxth	r2, r2
   d4414:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d4416:	6823      	ldr	r3, [r4, #0]
   d4418:	f8cd 8000 	str.w	r8, [sp]
   d441c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4420:	4632      	mov	r2, r6
   d4422:	464b      	mov	r3, r9
   d4424:	4639      	mov	r1, r7
   d4426:	4620      	mov	r0, r4
   d4428:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d442a:	1e6b      	subs	r3, r5, #1
   d442c:	19d9      	adds	r1, r3, r7
   d442e:	6823      	ldr	r3, [r4, #0]
   d4430:	f8cd 8000 	str.w	r8, [sp]
   d4434:	6a1d      	ldr	r5, [r3, #32]
   d4436:	4620      	mov	r0, r4
   d4438:	464b      	mov	r3, r9
   d443a:	4632      	mov	r2, r6
   d443c:	b209      	sxth	r1, r1
   d443e:	47a8      	blx	r5
    endWrite();
   d4440:	6823      	ldr	r3, [r4, #0]
   d4442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4444:	4620      	mov	r0, r4
}
   d4446:	b002      	add	sp, #8
   d4448:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d444c:	4718      	bx	r3

000d444e <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d444e:	4770      	bx	lr

000d4450 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d4450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d4454:	4299      	cmp	r1, r3
        uint16_t color) {
   d4456:	4616      	mov	r6, r2
   d4458:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d445c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4460:	6802      	ldr	r2, [r0, #0]
   d4462:	4680      	mov	r8, r0
   d4464:	460d      	mov	r5, r1
   d4466:	461c      	mov	r4, r3
    if(x0 == x1){
   d4468:	d113      	bne.n	d4492 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d446a:	42be      	cmp	r6, r7
   d446c:	bfc8      	it	gt
   d446e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4470:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4474:	bfc4      	itt	gt
   d4476:	463e      	movgt	r6, r7
   d4478:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d447a:	1c7b      	adds	r3, r7, #1
   d447c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d447e:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4480:	b21b      	sxth	r3, r3
   d4482:	4632      	mov	r2, r6
   d4484:	4629      	mov	r1, r5
   d4486:	4640      	mov	r0, r8
   d4488:	46a4      	mov	ip, r4
}
   d448a:	b003      	add	sp, #12
   d448c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4490:	4760      	bx	ip
    } else if(y0 == y1){
   d4492:	42be      	cmp	r6, r7
   d4494:	d10a      	bne.n	d44ac <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d4496:	4299      	cmp	r1, r3
   d4498:	bfc2      	ittt	gt
   d449a:	460b      	movgt	r3, r1
   d449c:	4625      	movgt	r5, r4
   d449e:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d44a0:	1c63      	adds	r3, r4, #1
   d44a2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d44a6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d44a8:	1b5b      	subs	r3, r3, r5
   d44aa:	e7e9      	b.n	d4480 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d44ac:	6953      	ldr	r3, [r2, #20]
   d44ae:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d44b0:	e9cd 7900 	strd	r7, r9, [sp]
   d44b4:	f8d8 3000 	ldr.w	r3, [r8]
   d44b8:	4640      	mov	r0, r8
   d44ba:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d44bc:	4632      	mov	r2, r6
   d44be:	4623      	mov	r3, r4
   d44c0:	4629      	mov	r1, r5
   d44c2:	47b8      	blx	r7
        endWrite();
   d44c4:	f8d8 3000 	ldr.w	r3, [r8]
   d44c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44ca:	4640      	mov	r0, r8
}
   d44cc:	b003      	add	sp, #12
   d44ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d44d2:	4718      	bx	r3

000d44d4 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d44d4:	f001 0303 	and.w	r3, r1, #3
   d44d8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d44dc:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d44de:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d44e0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d44e4:	bf59      	ittee	pl
   d44e6:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d44e8:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d44ea:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d44ec:	81c3      	strhmi	r3, [r0, #14]
}
   d44ee:	4770      	bx	lr

000d44f0 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d44f0:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d44f2:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d44f4:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d44f6:	4a07      	ldr	r2, [pc, #28]	; (d4514 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d44f8:	4d07      	ldr	r5, [pc, #28]	; (d4518 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d44fa:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   d44fc:	2400      	movs	r4, #0
    _width    = WIDTH;
   d44fe:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d4500:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d4504:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d4508:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d450a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d450c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d450e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d4510:	6204      	str	r4, [r0, #32]
}
   d4512:	bd30      	pop	{r4, r5, pc}
   d4514:	01000101 	.word	0x01000101
   d4518:	000d6a24 	.word	0x000d6a24

000d451c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d451c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4520:	b089      	sub	sp, #36	; 0x24
   d4522:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d4526:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4528:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d452c:	9304      	str	r3, [sp, #16]
   d452e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d4532:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4534:	9305      	str	r3, [sp, #20]
   d4536:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d453a:	4604      	mov	r4, r0
    startWrite();
   d453c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d453e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d4542:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d4546:	bf48      	it	mi
   d4548:	f108 020e 	addmi.w	r2, r8, #14
   d454c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d4550:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d4552:	4635      	mov	r5, r6
   d4554:	9b03      	ldr	r3, [sp, #12]
   d4556:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d4558:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d455c:	189a      	adds	r2, r3, r2
   d455e:	9b05      	ldr	r3, [sp, #20]
   d4560:	428b      	cmp	r3, r1
   d4562:	b212      	sxth	r2, r2
   d4564:	dd27      	ble.n	d45b6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4566:	9b04      	ldr	r3, [sp, #16]
   d4568:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d456a:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d456e:	9306      	str	r3, [sp, #24]
   d4570:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d4574:	4580      	cmp	r8, r0
   d4576:	fa1f f189 	uxth.w	r1, r9
   d457a:	dd17      	ble.n	d45ac <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d457c:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d457e:	bf05      	ittet	eq
   d4580:	9b06      	ldreq	r3, [sp, #24]
   d4582:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d4584:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4586:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d4588:	bf18      	it	ne
   d458a:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d458c:	062b      	lsls	r3, r5, #24
   d458e:	d50a      	bpl.n	d45a6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d4590:	9b02      	ldr	r3, [sp, #8]
   d4592:	6820      	ldr	r0, [r4, #0]
   d4594:	9207      	str	r2, [sp, #28]
   d4596:	4419      	add	r1, r3
   d4598:	6983      	ldr	r3, [r0, #24]
   d459a:	b209      	sxth	r1, r1
   d459c:	461f      	mov	r7, r3
   d459e:	4620      	mov	r0, r4
   d45a0:	4653      	mov	r3, sl
   d45a2:	47b8      	blx	r7
   d45a4:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d45a6:	f109 0901 	add.w	r9, r9, #1
   d45aa:	e7e1      	b.n	d4570 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d45ac:	9b01      	ldr	r3, [sp, #4]
   d45ae:	3301      	adds	r3, #1
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	445e      	add	r6, fp
   d45b4:	e7ce      	b.n	d4554 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d45b6:	6823      	ldr	r3, [r4, #0]
   d45b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45ba:	4620      	mov	r0, r4
}
   d45bc:	b009      	add	sp, #36	; 0x24
   d45be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d45c2:	4718      	bx	r3

000d45c4 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d45c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d45c8:	ed2d 8b02 	vpush	{d8}
   d45cc:	b091      	sub	sp, #68	; 0x44
   d45ce:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d45d0:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d45d2:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d45d6:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d45da:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d45de:	9103      	str	r1, [sp, #12]
   d45e0:	461f      	mov	r7, r3
   d45e2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d45e6:	9304      	str	r3, [sp, #16]
   d45e8:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d45ea:	2a00      	cmp	r2, #0
   d45ec:	f040 80c5 	bne.w	d477a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d45f0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d45f4:	428b      	cmp	r3, r1
   d45f6:	f340 814c 	ble.w	d4892 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d45fa:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d45fe:	42b3      	cmp	r3, r6
   d4600:	f340 8147 	ble.w	d4892 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4604:	2306      	movs	r3, #6
   d4606:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d460a:	2b00      	cmp	r3, #0
   d460c:	f340 8141 	ble.w	d4892 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d4610:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d4614:	2b00      	cmp	r3, #0
   d4616:	f340 813c 	ble.w	d4892 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d461a:	7f03      	ldrb	r3, [r0, #28]
   d461c:	b91b      	cbnz	r3, d4626 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d461e:	2faf      	cmp	r7, #175	; 0xaf
   d4620:	bf84      	itt	hi
   d4622:	3701      	addhi	r7, #1
   d4624:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d4626:	f8db 3000 	ldr.w	r3, [fp]
   d462a:	4658      	mov	r0, fp
   d462c:	695b      	ldr	r3, [r3, #20]
   d462e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4630:	2205      	movs	r2, #5
   d4632:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d4634:	2200      	movs	r2, #0
   d4636:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4638:	4a98      	ldr	r2, [pc, #608]	; (d489c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d463a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d463e:	18d3      	adds	r3, r2, r3
   d4640:	930c      	str	r3, [sp, #48]	; 0x30
   d4642:	b2b3      	uxth	r3, r6
   d4644:	9306      	str	r3, [sp, #24]
   d4646:	9a05      	ldr	r2, [sp, #20]
   d4648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d464a:	5c9b      	ldrb	r3, [r3, r2]
   d464c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d464e:	b2ab      	uxth	r3, r5
   d4650:	930b      	str	r3, [sp, #44]	; 0x2c
   d4652:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4656:	9308      	str	r3, [sp, #32]
   d4658:	9b03      	ldr	r3, [sp, #12]
   d465a:	fb02 f905 	mul.w	r9, r2, r5
   d465e:	fa19 f983 	uxtah	r9, r9, r3
   d4662:	fa0f f389 	sxth.w	r3, r9
   d4666:	ee08 3a10 	vmov	s16, r3
   d466a:	2308      	movs	r3, #8
   d466c:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d466e:	9b03      	ldr	r3, [sp, #12]
   d4670:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d4674:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d4678:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d467c:	9a07      	ldr	r2, [sp, #28]
   d467e:	f8db 3000 	ldr.w	r3, [fp]
   d4682:	07d2      	lsls	r2, r2, #31
   d4684:	d552      	bpl.n	d472c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d4686:	2d01      	cmp	r5, #1
   d4688:	fa1f f289 	uxth.w	r2, r9
   d468c:	d13e      	bne.n	d470c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d468e:	2c01      	cmp	r4, #1
   d4690:	d13c      	bne.n	d470c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d4692:	699b      	ldr	r3, [r3, #24]
   d4694:	9906      	ldr	r1, [sp, #24]
   d4696:	461f      	mov	r7, r3
   d4698:	9b04      	ldr	r3, [sp, #16]
   d469a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d469c:	b212      	sxth	r2, r2
   d469e:	4651      	mov	r1, sl
   d46a0:	4658      	mov	r0, fp
   d46a2:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d46a4:	f109 0301 	add.w	r3, r9, #1
   d46a8:	fa4f f983 	sxtb.w	r9, r3
   d46ac:	9b07      	ldr	r3, [sp, #28]
   d46ae:	085b      	lsrs	r3, r3, #1
   d46b0:	9307      	str	r3, [sp, #28]
   d46b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d46b4:	3b01      	subs	r3, #1
   d46b6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d46ba:	930a      	str	r3, [sp, #40]	; 0x28
   d46bc:	d1de      	bne.n	d467c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d46be:	9f05      	ldr	r7, [sp, #20]
   d46c0:	3701      	adds	r7, #1
   d46c2:	b27b      	sxtb	r3, r7
   d46c4:	9305      	str	r3, [sp, #20]
   d46c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d46c8:	3b01      	subs	r3, #1
   d46ca:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d46ce:	9309      	str	r3, [sp, #36]	; 0x24
   d46d0:	d1b9      	bne.n	d4646 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d46d2:	9b04      	ldr	r3, [sp, #16]
   d46d4:	4543      	cmp	r3, r8
   d46d6:	d00f      	beq.n	d46f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d46d8:	2d01      	cmp	r5, #1
   d46da:	f8db 3000 	ldr.w	r3, [fp]
   d46de:	d13b      	bne.n	d4758 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d46e0:	2c01      	cmp	r4, #1
   d46e2:	d139      	bne.n	d4758 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d46e4:	9908      	ldr	r1, [sp, #32]
   d46e6:	f8cd 8000 	str.w	r8, [sp]
   d46ea:	3105      	adds	r1, #5
   d46ec:	6a1c      	ldr	r4, [r3, #32]
   d46ee:	4632      	mov	r2, r6
   d46f0:	2308      	movs	r3, #8
   d46f2:	b209      	sxth	r1, r1
   d46f4:	4658      	mov	r0, fp
   d46f6:	47a0      	blx	r4
        endWrite();
   d46f8:	f8db 3000 	ldr.w	r3, [fp]
   d46fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46fe:	4658      	mov	r0, fp
}
   d4700:	b011      	add	sp, #68	; 0x44
   d4702:	ecbd 8b02 	vpop	{d8}
   d4706:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d470a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d470c:	9906      	ldr	r1, [sp, #24]
   d470e:	fb14 f202 	smulbb	r2, r4, r2
   d4712:	440a      	add	r2, r1
   d4714:	9904      	ldr	r1, [sp, #16]
   d4716:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4718:	9400      	str	r4, [sp, #0]
   d471a:	69db      	ldr	r3, [r3, #28]
   d471c:	ee18 1a10 	vmov	r1, s16
   d4720:	461f      	mov	r7, r3
   d4722:	b212      	sxth	r2, r2
   d4724:	462b      	mov	r3, r5
   d4726:	4658      	mov	r0, fp
   d4728:	47b8      	blx	r7
   d472a:	e7bb      	b.n	d46a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d472c:	9a04      	ldr	r2, [sp, #16]
   d472e:	4542      	cmp	r2, r8
   d4730:	d0b8      	beq.n	d46a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d4732:	2d01      	cmp	r5, #1
   d4734:	fa1f f289 	uxth.w	r2, r9
   d4738:	d107      	bne.n	d474a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d473a:	2c01      	cmp	r4, #1
   d473c:	d105      	bne.n	d474a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d473e:	699b      	ldr	r3, [r3, #24]
   d4740:	9906      	ldr	r1, [sp, #24]
   d4742:	461f      	mov	r7, r3
   d4744:	440a      	add	r2, r1
   d4746:	4643      	mov	r3, r8
   d4748:	e7a8      	b.n	d469c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d474a:	9906      	ldr	r1, [sp, #24]
   d474c:	f8cd 8004 	str.w	r8, [sp, #4]
   d4750:	fb14 f202 	smulbb	r2, r4, r2
   d4754:	440a      	add	r2, r1
   d4756:	e7df      	b.n	d4718 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d4758:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d475a:	f8cd 8004 	str.w	r8, [sp, #4]
   d475e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d4762:	9a08      	ldr	r2, [sp, #32]
   d4764:	00e4      	lsls	r4, r4, #3
   d4766:	440a      	add	r2, r1
   d4768:	4611      	mov	r1, r2
   d476a:	9400      	str	r4, [sp, #0]
   d476c:	69dc      	ldr	r4, [r3, #28]
   d476e:	4632      	mov	r2, r6
   d4770:	462b      	mov	r3, r5
   d4772:	b209      	sxth	r1, r1
   d4774:	4658      	mov	r0, fp
   d4776:	47a0      	blx	r4
        endWrite();
   d4778:	e7be      	b.n	d46f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d477a:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d477c:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d477e:	6812      	ldr	r2, [r2, #0]
   d4780:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d4782:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d4784:	b2ff      	uxtb	r7, r7
   d4786:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d478a:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d478e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d4790:	789a      	ldrb	r2, [r3, #2]
   d4792:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d4794:	78da      	ldrb	r2, [r3, #3]
   d4796:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d4798:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d479a:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d479e:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d47a2:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d47a4:	d801      	bhi.n	d47aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d47a6:	2c01      	cmp	r4, #1
   d47a8:	d957      	bls.n	d485a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d47aa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d47ae:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d47b0:	fa0f f38a 	sxth.w	r3, sl
   d47b4:	9307      	str	r3, [sp, #28]
        startWrite();
   d47b6:	f8db 3000 	ldr.w	r3, [fp]
   d47ba:	4658      	mov	r0, fp
   d47bc:	695b      	ldr	r3, [r3, #20]
   d47be:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d47c0:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d47c2:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d47c6:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d47c8:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d47cc:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d47ce:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d47d0:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d47d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d47d4:	429f      	cmp	r7, r3
   d47d6:	d28f      	bcs.n	d46f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d47d8:	9b07      	ldr	r3, [sp, #28]
   d47da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d47dc:	443b      	add	r3, r7
   d47de:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d47e2:	2200      	movs	r2, #0
   d47e4:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d47e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d47e8:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d47ea:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d47ee:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d47f2:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d47f6:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d47f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d47fa:	9905      	ldr	r1, [sp, #20]
   d47fc:	4291      	cmp	r1, r2
   d47fe:	d241      	bcs.n	d4884 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d4800:	1c5a      	adds	r2, r3, #1
   d4802:	b2d2      	uxtb	r2, r2
   d4804:	075b      	lsls	r3, r3, #29
   d4806:	920c      	str	r2, [sp, #48]	; 0x30
   d4808:	d107      	bne.n	d481a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d480a:	9b06      	ldr	r3, [sp, #24]
   d480c:	9906      	ldr	r1, [sp, #24]
   d480e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d4810:	3301      	adds	r3, #1
   d4812:	b29b      	uxth	r3, r3
   d4814:	f812 9001 	ldrb.w	r9, [r2, r1]
   d4818:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d481a:	f019 0f80 	tst.w	r9, #128	; 0x80
   d481e:	d012      	beq.n	d4846 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d4820:	2d01      	cmp	r5, #1
   d4822:	f8db 3000 	ldr.w	r3, [fp]
   d4826:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d482a:	d11a      	bne.n	d4862 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d482c:	2c01      	cmp	r4, #1
   d482e:	d118      	bne.n	d4862 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4832:	699b      	ldr	r3, [r3, #24]
   d4834:	4411      	add	r1, r2
   d4836:	9a05      	ldr	r2, [sp, #20]
   d4838:	4411      	add	r1, r2
   d483a:	461e      	mov	r6, r3
   d483c:	4652      	mov	r2, sl
   d483e:	9b04      	ldr	r3, [sp, #16]
   d4840:	b209      	sxth	r1, r1
   d4842:	4658      	mov	r0, fp
   d4844:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d4846:	9e05      	ldr	r6, [sp, #20]
   d4848:	3601      	adds	r6, #1
   d484a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d484c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d4850:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d4852:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d4856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d4858:	e7ce      	b.n	d47f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d485a:	2300      	movs	r3, #0
   d485c:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d4860:	e7a9      	b.n	d47b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4862:	9805      	ldr	r0, [sp, #20]
   d4864:	9a08      	ldr	r2, [sp, #32]
   d4866:	4402      	add	r2, r0
   d4868:	fb02 1105 	mla	r1, r2, r5, r1
   d486c:	9a04      	ldr	r2, [sp, #16]
   d486e:	e9cd 4200 	strd	r4, r2, [sp]
   d4872:	69db      	ldr	r3, [r3, #28]
   d4874:	ee18 2a10 	vmov	r2, s16
   d4878:	461e      	mov	r6, r3
   d487a:	b209      	sxth	r1, r1
   d487c:	462b      	mov	r3, r5
   d487e:	4658      	mov	r0, fp
   d4880:	47b0      	blx	r6
   d4882:	e7e0      	b.n	d4846 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d4884:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d4886:	3701      	adds	r7, #1
   d4888:	4498      	add	r8, r3
   d488a:	fa5f f888 	uxtb.w	r8, r8
   d488e:	b2ff      	uxtb	r7, r7
   d4890:	e79f      	b.n	d47d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d4892:	b011      	add	sp, #68	; 0x44
   d4894:	ecbd 8b02 	vpop	{d8}
   d4898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d489c:	000d651c 	.word	0x000d651c

000d48a0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d48a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d48a2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d48a4:	b085      	sub	sp, #20
   d48a6:	4604      	mov	r4, r0
   d48a8:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d48aa:	2a00      	cmp	r2, #0
   d48ac:	d134      	bne.n	d4918 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d48ae:	290a      	cmp	r1, #10
   d48b0:	d108      	bne.n	d48c4 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d48b2:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d48b4:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d48b6:	7e42      	ldrb	r2, [r0, #25]
   d48b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d48bc:	8263      	strh	r3, [r4, #18]
}
   d48be:	2001      	movs	r0, #1
   d48c0:	b005      	add	sp, #20
   d48c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d48c4:	290d      	cmp	r1, #13
   d48c6:	d0fa      	beq.n	d48be <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d48c8:	7ee1      	ldrb	r1, [r4, #27]
   d48ca:	7e00      	ldrb	r0, [r0, #24]
   d48cc:	7e65      	ldrb	r5, [r4, #25]
   d48ce:	b171      	cbz	r1, d48ee <_ZN12Adafruit_GFX5writeEh+0x4e>
   d48d0:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d48d4:	2106      	movs	r1, #6
   d48d6:	fb11 6100 	smlabb	r1, r1, r0, r6
   d48da:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d48de:	42b1      	cmp	r1, r6
   d48e0:	bfc1      	itttt	gt
   d48e2:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d48e6:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d48e8:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d48ec:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d48ee:	8ae2      	ldrh	r2, [r4, #22]
   d48f0:	9201      	str	r2, [sp, #4]
   d48f2:	8aa2      	ldrh	r2, [r4, #20]
   d48f4:	9200      	str	r2, [sp, #0]
   d48f6:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d48fa:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d48fe:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4902:	4620      	mov	r0, r4
   d4904:	f7ff fe5e 	bl	d45c4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d4908:	7e23      	ldrb	r3, [r4, #24]
   d490a:	8a22      	ldrh	r2, [r4, #16]
   d490c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d4910:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4914:	8223      	strh	r3, [r4, #16]
   d4916:	e7d2      	b.n	d48be <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d4918:	290a      	cmp	r1, #10
   d491a:	d107      	bne.n	d492c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d491c:	2300      	movs	r3, #0
   d491e:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4920:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d4922:	7e41      	ldrb	r1, [r0, #25]
   d4924:	8a42      	ldrh	r2, [r0, #18]
   d4926:	fb01 2303 	mla	r3, r1, r3, r2
   d492a:	e7c7      	b.n	d48bc <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d492c:	290d      	cmp	r1, #13
   d492e:	d0c6      	beq.n	d48be <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d4930:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d4932:	42a9      	cmp	r1, r5
   d4934:	d3c3      	bcc.n	d48be <_ZN12Adafruit_GFX5writeEh+0x1e>
   d4936:	7a51      	ldrb	r1, [r2, #9]
   d4938:	4299      	cmp	r1, r3
   d493a:	d3c0      	bcc.n	d48be <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d493c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d493e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d4940:	b2ed      	uxtb	r5, r5
   d4942:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4946:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4948:	b32f      	cbz	r7, d4996 <_ZN12Adafruit_GFX5writeEh+0xf6>
   d494a:	78e9      	ldrb	r1, [r5, #3]
   d494c:	b319      	cbz	r1, d4996 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d494e:	7ee1      	ldrb	r1, [r4, #27]
   d4950:	7e00      	ldrb	r0, [r0, #24]
   d4952:	7e66      	ldrb	r6, [r4, #25]
   d4954:	b191      	cbz	r1, d497c <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4956:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d495a:	4439      	add	r1, r7
   d495c:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4960:	fb00 7101 	mla	r1, r0, r1, r7
   d4964:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4968:	42b9      	cmp	r1, r7
   d496a:	dd07      	ble.n	d497c <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d496c:	2700      	movs	r7, #0
   d496e:	8227      	strh	r7, [r4, #16]
   d4970:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4974:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4976:	fb02 1206 	mla	r2, r2, r6, r1
   d497a:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d497c:	8ae2      	ldrh	r2, [r4, #22]
   d497e:	9201      	str	r2, [sp, #4]
   d4980:	8aa2      	ldrh	r2, [r4, #20]
   d4982:	9200      	str	r2, [sp, #0]
   d4984:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4988:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d498c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4990:	4620      	mov	r0, r4
   d4992:	f7ff fe17 	bl	d45c4 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4996:	7929      	ldrb	r1, [r5, #4]
   d4998:	7e23      	ldrb	r3, [r4, #24]
   d499a:	8a22      	ldrh	r2, [r4, #16]
   d499c:	fb01 2303 	mla	r3, r1, r3, r2
   d49a0:	e7b8      	b.n	d4914 <_ZN12Adafruit_GFX5writeEh+0x74>

000d49a2 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d49a2:	4770      	bx	lr

000d49a4 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d49a4:	b510      	push	{r4, lr}
  }
   d49a6:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d49a8:	4604      	mov	r4, r0
  }
   d49aa:	f001 fcfb 	bl	d63a4 <_ZdlPvj>
   d49ae:	4620      	mov	r0, r4
   d49b0:	bd10      	pop	{r4, pc}

000d49b2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d49b2:	b40e      	push	{r1, r2, r3}
   d49b4:	b503      	push	{r0, r1, lr}
   d49b6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d49b8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d49ba:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d49be:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d49c0:	f001 f925 	bl	d5c0e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d49c4:	b002      	add	sp, #8
   d49c6:	f85d eb04 	ldr.w	lr, [sp], #4
   d49ca:	b003      	add	sp, #12
   d49cc:	4770      	bx	lr
	...

000d49d0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d49d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d49d2:	4604      	mov	r4, r0
   d49d4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d49d6:	7922      	ldrb	r2, [r4, #4]
   d49d8:	68a3      	ldr	r3, [r4, #8]
   d49da:	b132      	cbz	r2, d49ea <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d49dc:	b9a3      	cbnz	r3, d4a08 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d49de:	490b      	ldr	r1, [pc, #44]	; (d4a0c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d49e0:	b002      	add	sp, #8
   d49e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d49e6:	f001 b8e1 	b.w	d5bac <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d49ea:	4a09      	ldr	r2, [pc, #36]	; (d4a10 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d49ec:	7b26      	ldrb	r6, [r4, #12]
   d49ee:	4d09      	ldr	r5, [pc, #36]	; (d4a14 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d49f0:	4909      	ldr	r1, [pc, #36]	; (d4a18 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d49f2:	7b64      	ldrb	r4, [r4, #13]
   d49f4:	2e01      	cmp	r6, #1
   d49f6:	bf18      	it	ne
   d49f8:	4629      	movne	r1, r5
   d49fa:	e9cd 1400 	strd	r1, r4, [sp]
   d49fe:	4907      	ldr	r1, [pc, #28]	; (d4a1c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4a00:	f7ff ffd7 	bl	d49b2 <_ZN5Print6printfEPKcz>
  }
   d4a04:	b002      	add	sp, #8
   d4a06:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4a08:	4a05      	ldr	r2, [pc, #20]	; (d4a20 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4a0a:	e7ef      	b.n	d49ec <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4a0c:	000d6a85 	.word	0x000d6a85
   d4a10:	000d6a7c 	.word	0x000d6a7c
   d4a14:	000d6a81 	.word	0x000d6a81
   d4a18:	000d6a7d 	.word	0x000d6a7d
   d4a1c:	000d6a9b 	.word	0x000d6a9b
   d4a20:	000d6a74 	.word	0x000d6a74

000d4a24 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4a24:	b510      	push	{r4, lr}
   d4a26:	4b04      	ldr	r3, [pc, #16]	; (d4a38 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d4a28:	6003      	str	r3, [r0, #0]
   d4a2a:	4604      	mov	r4, r0
  if(buffer) {
   d4a2c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4a2e:	b108      	cbz	r0, d4a34 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d4a30:	f000 feb2 	bl	d5798 <free>
    buffer = NULL;
  }
}
   d4a34:	4620      	mov	r0, r4
   d4a36:	bd10      	pop	{r4, pc}
   d4a38:	000d6f74 	.word	0x000d6f74

000d4a3c <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4a3c:	b510      	push	{r4, lr}
   d4a3e:	4604      	mov	r4, r0
}
   d4a40:	f7ff fff0 	bl	d4a24 <_ZN16Adafruit_SSD1306D1Ev>
   d4a44:	4620      	mov	r0, r4
   d4a46:	2150      	movs	r1, #80	; 0x50
   d4a48:	f001 fcac 	bl	d63a4 <_ZdlPvj>
   d4a4c:	4620      	mov	r0, r4
   d4a4e:	bd10      	pop	{r4, pc}

000d4a50 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4a50:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4a52:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4a54:	db4b      	blt.n	d4aee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4a56:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d4a5a:	428c      	cmp	r4, r1
   d4a5c:	dd47      	ble.n	d4aee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4a5e:	2a00      	cmp	r2, #0
   d4a60:	db45      	blt.n	d4aee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4a62:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d4a66:	4294      	cmp	r4, r2
   d4a68:	dd41      	ble.n	d4aee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d4a6a:	7e84      	ldrb	r4, [r0, #26]
   d4a6c:	2c02      	cmp	r4, #2
   d4a6e:	d01f      	beq.n	d4ab0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4a70:	2c03      	cmp	r4, #3
   d4a72:	d026      	beq.n	d4ac2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d4a74:	2c01      	cmp	r4, #1
   d4a76:	d104      	bne.n	d4a82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4a78:	8904      	ldrh	r4, [r0, #8]
   d4a7a:	43d2      	mvns	r2, r2
   d4a7c:	4414      	add	r4, r2
      break;
   d4a7e:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d4a80:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d4a82:	2b01      	cmp	r3, #1
   d4a84:	d023      	beq.n	d4ace <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d4a86:	2b02      	cmp	r3, #2
   d4a88:	d032      	beq.n	d4af0 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d4a8a:	bb83      	cbnz	r3, d4aee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d4a8c:	2a00      	cmp	r2, #0
   d4a8e:	4613      	mov	r3, r2
   d4a90:	8904      	ldrh	r4, [r0, #8]
   d4a92:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4a94:	bfb8      	it	lt
   d4a96:	1dd3      	addlt	r3, r2, #7
   d4a98:	10db      	asrs	r3, r3, #3
   d4a9a:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4a9e:	f002 0207 	and.w	r2, r2, #7
   d4aa2:	2301      	movs	r3, #1
   d4aa4:	4093      	lsls	r3, r2
   d4aa6:	5c42      	ldrb	r2, [r0, r1]
   d4aa8:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4aac:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d4aae:	e01e      	b.n	d4aee <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d4ab0:	8904      	ldrh	r4, [r0, #8]
   d4ab2:	43c9      	mvns	r1, r1
   d4ab4:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d4ab6:	8944      	ldrh	r4, [r0, #10]
   d4ab8:	43d2      	mvns	r2, r2
   d4aba:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d4abc:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d4abe:	b212      	sxth	r2, r2
      break;
   d4ac0:	e7df      	b.n	d4a82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d4ac2:	8944      	ldrh	r4, [r0, #10]
   d4ac4:	43c9      	mvns	r1, r1
   d4ac6:	440c      	add	r4, r1
      break;
   d4ac8:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d4aca:	b222      	sxth	r2, r4
      break;
   d4acc:	e7d9      	b.n	d4a82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d4ace:	2a00      	cmp	r2, #0
   d4ad0:	8904      	ldrh	r4, [r0, #8]
   d4ad2:	4613      	mov	r3, r2
   d4ad4:	bfb8      	it	lt
   d4ad6:	1dd3      	addlt	r3, r2, #7
   d4ad8:	10db      	asrs	r3, r3, #3
   d4ada:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4ade:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4ae0:	f002 0007 	and.w	r0, r2, #7
   d4ae4:	2201      	movs	r2, #1
   d4ae6:	4082      	lsls	r2, r0
   d4ae8:	5c58      	ldrb	r0, [r3, r1]
   d4aea:	4302      	orrs	r2, r0
   d4aec:	545a      	strb	r2, [r3, r1]
}
   d4aee:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4af0:	2a00      	cmp	r2, #0
   d4af2:	4613      	mov	r3, r2
   d4af4:	8904      	ldrh	r4, [r0, #8]
   d4af6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4af8:	bfb8      	it	lt
   d4afa:	1dd3      	addlt	r3, r2, #7
   d4afc:	10db      	asrs	r3, r3, #3
   d4afe:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4b02:	f002 0207 	and.w	r2, r2, #7
   d4b06:	2301      	movs	r3, #1
   d4b08:	fa03 f202 	lsl.w	r2, r3, r2
   d4b0c:	5c43      	ldrb	r3, [r0, r1]
   d4b0e:	405a      	eors	r2, r3
   d4b10:	e7cc      	b.n	d4aac <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d4b12 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4b12:	b510      	push	{r4, lr}
   d4b14:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d4b16:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d4b1a:	2101      	movs	r1, #1
   d4b1c:	b280      	uxth	r0, r0
   d4b1e:	f001 fbd8 	bl	d62d2 <digitalWrite>
   d4b22:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4b24:	b118      	cbz	r0, d4b2e <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d4b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d4b2a:	f001 b8c8 	b.w	d5cbe <_ZN8SPIClass14endTransactionEv>
}
   d4b2e:	bd10      	pop	{r4, pc}

000d4b30 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d4b30:	b570      	push	{r4, r5, r6, lr}
   d4b32:	4604      	mov	r4, r0
   d4b34:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4b36:	2600      	movs	r6, #0
   d4b38:	f7ff fcda 	bl	d44f0 <_ZN12Adafruit_GFXC1Ess>
   d4b3c:	4b11      	ldr	r3, [pc, #68]	; (d4b84 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d4b3e:	6023      	str	r3, [r4, #0]
   d4b40:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d4b42:	b915      	cbnz	r5, d4b4a <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d4b44:	f001 fc0a 	bl	d635c <_Z19__fetch_global_Wirev>
   d4b48:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4b4a:	23ff      	movs	r3, #255	; 0xff
   d4b4c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d4b50:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4b54:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d4b58:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d4b5c:	4b0a      	ldr	r3, [pc, #40]	; (d4b88 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d4b5e:	63a3      	str	r3, [r4, #56]	; 0x38
   d4b60:	2301      	movs	r3, #1
   d4b62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4b66:	9b05      	ldr	r3, [sp, #20]
   d4b68:	64a3      	str	r3, [r4, #72]	; 0x48
   d4b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4b6e:	9b06      	ldr	r3, [sp, #24]
   d4b70:	86a2      	strh	r2, [r4, #52]	; 0x34
   d4b72:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d4b76:	6426      	str	r6, [r4, #64]	; 0x40
   d4b78:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d4b7c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d4b7e:	4620      	mov	r0, r4
   d4b80:	bd70      	pop	{r4, r5, r6, pc}
   d4b82:	bf00      	nop
   d4b84:	000d6f74 	.word	0x000d6f74
   d4b88:	000d6ac0 	.word	0x000d6ac0

000d4b8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b8e:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4b90:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4b92:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4b94:	b190      	cbz	r0, d4bbc <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d4b96:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4b9a:	f000 feab 	bl	d58f4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4b9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ba0:	6803      	ldr	r3, [r0, #0]
   d4ba2:	2100      	movs	r1, #0
   d4ba4:	689b      	ldr	r3, [r3, #8]
   d4ba6:	4798      	blx	r3
    WIRE_WRITE(c);
   d4ba8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4baa:	6803      	ldr	r3, [r0, #0]
   d4bac:	4629      	mov	r1, r5
   d4bae:	689b      	ldr	r3, [r3, #8]
   d4bb0:	4798      	blx	r3
    wire->endTransmission();
   d4bb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d4bb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d4bb8:	f000 bea3 	b.w	d5902 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4bbc:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4bc0:	4601      	mov	r1, r0
   d4bc2:	b298      	uxth	r0, r3
   d4bc4:	f001 fb85 	bl	d62d2 <digitalWrite>
  if(spi) {
   d4bc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4bca:	b120      	cbz	r0, d4bd6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d4bcc:	4629      	mov	r1, r5
}
   d4bce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d4bd2:	f001 b8fb 	b.w	d5dcc <_ZN8SPIClass8transferEh>
   d4bd6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4bd8:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4bda:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4bde:	ea05 0107 	and.w	r1, r5, r7
   d4be2:	b280      	uxth	r0, r0
   d4be4:	f001 fb75 	bl	d62d2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4be8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4bec:	2101      	movs	r1, #1
   d4bee:	b280      	uxth	r0, r0
   d4bf0:	f001 fb6f 	bl	d62d2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4bf4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4bf8:	2100      	movs	r1, #0
   d4bfa:	b280      	uxth	r0, r0
   d4bfc:	f001 fb69 	bl	d62d2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4c00:	3e01      	subs	r6, #1
   d4c02:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d4c06:	d1e8      	bne.n	d4bda <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d4c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c0a <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4c0a:	b538      	push	{r3, r4, r5, lr}
   d4c0c:	4604      	mov	r4, r0
  TRANSACTION_START
   d4c0e:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4c10:	460d      	mov	r5, r1
  TRANSACTION_START
   d4c12:	b180      	cbz	r0, d4c36 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4c14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4c16:	f000 fe5f 	bl	d58d8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d4c1a:	2d00      	cmp	r5, #0
   d4c1c:	4620      	mov	r0, r4
   d4c1e:	bf14      	ite	ne
   d4c20:	21a7      	movne	r1, #167	; 0xa7
   d4c22:	21a6      	moveq	r1, #166	; 0xa6
   d4c24:	f7ff ffb2 	bl	d4b8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d4c28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4c2a:	b188      	cbz	r0, d4c50 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d4c2c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d4c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4c32:	f000 be51 	b.w	d58d8 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d4c36:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4c38:	b118      	cbz	r0, d4c42 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d4c3a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4c3e:	f001 f857 	bl	d5cf0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4c42:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4c46:	2100      	movs	r1, #0
   d4c48:	b280      	uxth	r0, r0
   d4c4a:	f001 fb42 	bl	d62d2 <digitalWrite>
   d4c4e:	e7e4      	b.n	d4c1a <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d4c50:	4620      	mov	r0, r4
}
   d4c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4c56:	f7ff bf5c 	b.w	d4b12 <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d4c5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4c5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4c5e:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4c60:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4c62:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4c64:	188f      	adds	r7, r1, r2
   d4c66:	b340      	cbz	r0, d4cba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d4c68:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4c6c:	f000 fe42 	bl	d58f4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4c70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4c72:	6803      	ldr	r3, [r0, #0]
   d4c74:	2100      	movs	r1, #0
   d4c76:	689b      	ldr	r3, [r3, #8]
   d4c78:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d4c7a:	2601      	movs	r6, #1
    while(n--) {
   d4c7c:	42bd      	cmp	r5, r7
   d4c7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4c80:	d017      	beq.n	d4cb2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d4c82:	2e1f      	cmp	r6, #31
   d4c84:	d90c      	bls.n	d4ca0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d4c86:	f000 fe3c 	bl	d5902 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d4c8a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4c8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4c90:	f000 fe30 	bl	d58f4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4c94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4c96:	6803      	ldr	r3, [r0, #0]
   d4c98:	2100      	movs	r1, #0
   d4c9a:	689b      	ldr	r3, [r3, #8]
   d4c9c:	4798      	blx	r3
        bytesOut = 1;
   d4c9e:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4ca0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ca2:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4ca6:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d4ca8:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4caa:	689b      	ldr	r3, [r3, #8]
   d4cac:	4798      	blx	r3
      bytesOut++;
   d4cae:	b2f6      	uxtb	r6, r6
    while(n--) {
   d4cb0:	e7e4      	b.n	d4c7c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d4cb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d4cb6:	f000 be24 	b.w	d5902 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4cba:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4cbe:	4601      	mov	r1, r0
   d4cc0:	b298      	uxth	r0, r3
   d4cc2:	f001 fb06 	bl	d62d2 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4cc6:	42af      	cmp	r7, r5
   d4cc8:	d022      	beq.n	d4d10 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d4cca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4ccc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d4cd0:	b118      	cbz	r0, d4cda <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d4cd2:	4649      	mov	r1, r9
   d4cd4:	f001 f87a 	bl	d5dcc <_ZN8SPIClass8transferEh>
   d4cd8:	e7f5      	b.n	d4cc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d4cda:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4cdc:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4ce0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4ce4:	ea09 0108 	and.w	r1, r9, r8
   d4ce8:	b280      	uxth	r0, r0
   d4cea:	f001 faf2 	bl	d62d2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4cee:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4cf2:	2101      	movs	r1, #1
   d4cf4:	b280      	uxth	r0, r0
   d4cf6:	f001 faec 	bl	d62d2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4cfa:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4cfe:	2100      	movs	r1, #0
   d4d00:	b280      	uxth	r0, r0
   d4d02:	f001 fae6 	bl	d62d2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4d06:	3e01      	subs	r6, #1
   d4d08:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d4d0c:	d1e8      	bne.n	d4ce0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d4d0e:	e7da      	b.n	d4cc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d4d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4d14 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d4d14:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4d18:	1dda      	adds	r2, r3, #7
   d4d1a:	bf48      	it	mi
   d4d1c:	f103 020e 	addmi.w	r2, r3, #14
   d4d20:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4d24:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4d26:	10d2      	asrs	r2, r2, #3
   d4d28:	435a      	muls	r2, r3
   d4d2a:	2100      	movs	r1, #0
   d4d2c:	f001 bb52 	b.w	d63d4 <memset>

000d4d30 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d4d30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4d34:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4d36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d4d38:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4d3c:	4604      	mov	r4, r0
   d4d3e:	460f      	mov	r7, r1
   d4d40:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4d42:	b1b3      	cbz	r3, d4d72 <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d4d44:	4620      	mov	r0, r4
   d4d46:	f7ff ffe5 	bl	d4d14 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d4d4a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d4d4e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4d52:	2820      	cmp	r0, #32
   d4d54:	dc1f      	bgt.n	d4d96 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4d56:	2320      	movs	r3, #32
   d4d58:	2201      	movs	r2, #1
   d4d5a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d4d5e:	3820      	subs	r0, #32
   d4d60:	2373      	movs	r3, #115	; 0x73
   d4d62:	3973      	subs	r1, #115	; 0x73
   d4d64:	9300      	str	r3, [sp, #0]
   d4d66:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4d6a:	4b89      	ldr	r3, [pc, #548]	; (d4f90 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d4d6c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d4d70:	e01f      	b.n	d4db2 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4d72:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4d76:	1dd8      	adds	r0, r3, #7
   d4d78:	bf48      	it	mi
   d4d7a:	f103 000e 	addmi.w	r0, r3, #14
   d4d7e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d4d82:	10c0      	asrs	r0, r0, #3
   d4d84:	4358      	muls	r0, r3
   d4d86:	f000 fcff 	bl	d5788 <malloc>
   d4d8a:	62e0      	str	r0, [r4, #44]	; 0x2c
   d4d8c:	2800      	cmp	r0, #0
   d4d8e:	d1d9      	bne.n	d4d44 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d4d90:	b004      	add	sp, #16
   d4d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d4d96:	2340      	movs	r3, #64	; 0x40
   d4d98:	f04f 0c01 	mov.w	ip, #1
   d4d9c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d4da0:	2352      	movs	r3, #82	; 0x52
   d4da2:	3840      	subs	r0, #64	; 0x40
   d4da4:	3952      	subs	r1, #82	; 0x52
   d4da6:	9300      	str	r3, [sp, #0]
   d4da8:	4b7a      	ldr	r3, [pc, #488]	; (d4f94 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d4daa:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4dae:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4db2:	f340 024f 	sbfx	r2, r0, #1, #16
   d4db6:	f341 014f 	sbfx	r1, r1, #1, #16
   d4dba:	4620      	mov	r0, r4
   d4dbc:	f7ff fbae 	bl	d451c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d4dc0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d4dc2:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d4dc6:	2800      	cmp	r0, #0
   d4dc8:	d078      	beq.n	d4ebc <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d4dca:	2d00      	cmp	r5, #0
   d4dcc:	d174      	bne.n	d4eb8 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d4dce:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d4dd2:	2b20      	cmp	r3, #32
   d4dd4:	bf0c      	ite	eq
   d4dd6:	253c      	moveq	r5, #60	; 0x3c
   d4dd8:	253d      	movne	r5, #61	; 0x3d
   d4dda:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d4dde:	f1b8 0f00 	cmp.w	r8, #0
   d4de2:	d001      	beq.n	d4de8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d4de4:	f000 fd7c 	bl	d58e0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d4de8:	b1fe      	cbz	r6, d4e2a <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d4dea:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4dee:	2800      	cmp	r0, #0
   d4df0:	db1b      	blt.n	d4e2a <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d4df2:	2101      	movs	r1, #1
   d4df4:	b280      	uxth	r0, r0
   d4df6:	f001 fa5b 	bl	d62b0 <pinMode>
    digitalWrite(rstPin, HIGH);
   d4dfa:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4dfe:	2101      	movs	r1, #1
   d4e00:	b280      	uxth	r0, r0
   d4e02:	f001 fa66 	bl	d62d2 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d4e06:	2001      	movs	r0, #1
   d4e08:	f000 fcde 	bl	d57c8 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d4e0c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4e10:	2100      	movs	r1, #0
   d4e12:	b280      	uxth	r0, r0
   d4e14:	f001 fa5d 	bl	d62d2 <digitalWrite>
    delay(10);                  // Wait 10 ms
   d4e18:	200a      	movs	r0, #10
   d4e1a:	f000 fcd5 	bl	d57c8 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d4e1e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d4e22:	2101      	movs	r1, #1
   d4e24:	b280      	uxth	r0, r0
   d4e26:	f001 fa54 	bl	d62d2 <digitalWrite>
  TRANSACTION_START
   d4e2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e2c:	2800      	cmp	r0, #0
   d4e2e:	d074      	beq.n	d4f1a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d4e30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4e32:	f000 fd51 	bl	d58d8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d4e36:	2204      	movs	r2, #4
   d4e38:	4957      	ldr	r1, [pc, #348]	; (d4f98 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d4e3a:	4620      	mov	r0, r4
   d4e3c:	f7ff ff0d 	bl	d4c5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d4e40:	7aa1      	ldrb	r1, [r4, #10]
   d4e42:	3901      	subs	r1, #1
   d4e44:	b2c9      	uxtb	r1, r1
   d4e46:	4620      	mov	r0, r4
   d4e48:	f7ff fea0 	bl	d4b8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d4e4c:	4953      	ldr	r1, [pc, #332]	; (d4f9c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d4e4e:	2204      	movs	r2, #4
   d4e50:	4620      	mov	r0, r4
   d4e52:	f7ff ff02 	bl	d4c5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d4e56:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d4e5a:	2b01      	cmp	r3, #1
   d4e5c:	bf0c      	ite	eq
   d4e5e:	2110      	moveq	r1, #16
   d4e60:	2114      	movne	r1, #20
   d4e62:	4620      	mov	r0, r4
   d4e64:	f7ff fe92 	bl	d4b8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d4e68:	2204      	movs	r2, #4
   d4e6a:	494d      	ldr	r1, [pc, #308]	; (d4fa0 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d4e6c:	4620      	mov	r0, r4
   d4e6e:	f7ff fef4 	bl	d4c5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d4e72:	68a3      	ldr	r3, [r4, #8]
   d4e74:	4a4b      	ldr	r2, [pc, #300]	; (d4fa4 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d4e76:	4293      	cmp	r3, r2
   d4e78:	d15c      	bne.n	d4f34 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d4e7a:	494b      	ldr	r1, [pc, #300]	; (d4fa8 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d4e7c:	2204      	movs	r2, #4
   d4e7e:	4620      	mov	r0, r4
   d4e80:	f7ff feeb 	bl	d4c5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d4e84:	21d9      	movs	r1, #217	; 0xd9
   d4e86:	4620      	mov	r0, r4
   d4e88:	f7ff fe80 	bl	d4b8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d4e8c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d4e90:	2b01      	cmp	r3, #1
   d4e92:	bf0c      	ite	eq
   d4e94:	2122      	moveq	r1, #34	; 0x22
   d4e96:	21f1      	movne	r1, #241	; 0xf1
   d4e98:	4620      	mov	r0, r4
   d4e9a:	f7ff fe77 	bl	d4b8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d4e9e:	4620      	mov	r0, r4
   d4ea0:	4942      	ldr	r1, [pc, #264]	; (d4fac <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d4ea2:	2206      	movs	r2, #6
   d4ea4:	f7ff fed9 	bl	d4c5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d4ea8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4eaa:	2800      	cmp	r0, #0
   d4eac:	d063      	beq.n	d4f76 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d4eae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d4eb0:	f000 fd12 	bl	d58d8 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d4eb4:	2001      	movs	r0, #1
   d4eb6:	e76b      	b.n	d4d90 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d4eb8:	b26d      	sxtb	r5, r5
   d4eba:	e78e      	b.n	d4dda <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d4ebc:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d4ec0:	2101      	movs	r1, #1
   d4ec2:	b280      	uxth	r0, r0
   d4ec4:	f001 f9f4 	bl	d62b0 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d4ec8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4ecc:	2101      	movs	r1, #1
   d4ece:	b280      	uxth	r0, r0
   d4ed0:	f001 f9ee 	bl	d62b0 <pinMode>
    SSD1306_DESELECT
   d4ed4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4ed8:	2101      	movs	r1, #1
   d4eda:	b280      	uxth	r0, r0
   d4edc:	f001 f9f9 	bl	d62d2 <digitalWrite>
    if(spi) { // Hardware SPI
   d4ee0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d4ee2:	b13d      	cbz	r5, d4ef4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d4ee4:	f1b8 0f00 	cmp.w	r8, #0
   d4ee8:	f43f af7e 	beq.w	d4de8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d4eec:	4628      	mov	r0, r5
   d4eee:	f000 fed5 	bl	d5c9c <_ZN8SPIClass5beginEv>
   d4ef2:	e779      	b.n	d4de8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d4ef4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4ef8:	2101      	movs	r1, #1
   d4efa:	b280      	uxth	r0, r0
   d4efc:	f001 f9d8 	bl	d62b0 <pinMode>
      pinMode(clkPin , OUTPUT);
   d4f00:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f04:	2101      	movs	r1, #1
   d4f06:	b280      	uxth	r0, r0
   d4f08:	f001 f9d2 	bl	d62b0 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d4f0c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f10:	4629      	mov	r1, r5
   d4f12:	b280      	uxth	r0, r0
   d4f14:	f001 f9dd 	bl	d62d2 <digitalWrite>
   d4f18:	e766      	b.n	d4de8 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d4f1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4f1c:	b118      	cbz	r0, d4f26 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d4f1e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4f22:	f000 fee5 	bl	d5cf0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4f26:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4f2a:	2100      	movs	r1, #0
   d4f2c:	b280      	uxth	r0, r0
   d4f2e:	f001 f9d0 	bl	d62d2 <digitalWrite>
   d4f32:	e780      	b.n	d4e36 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d4f34:	4a1e      	ldr	r2, [pc, #120]	; (d4fb0 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d4f36:	4293      	cmp	r3, r2
   d4f38:	d10e      	bne.n	d4f58 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d4f3a:	491e      	ldr	r1, [pc, #120]	; (d4fb4 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d4f3c:	2203      	movs	r2, #3
   d4f3e:	4620      	mov	r0, r4
   d4f40:	f7ff fe8b 	bl	d4c5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d4f44:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d4f48:	2b01      	cmp	r3, #1
   d4f4a:	bf0c      	ite	eq
   d4f4c:	219f      	moveq	r1, #159	; 0x9f
   d4f4e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d4f50:	4620      	mov	r0, r4
   d4f52:	f7ff fe1b 	bl	d4b8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d4f56:	e795      	b.n	d4e84 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d4f58:	4a17      	ldr	r2, [pc, #92]	; (d4fb8 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d4f5a:	4293      	cmp	r3, r2
   d4f5c:	d192      	bne.n	d4e84 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d4f5e:	4917      	ldr	r1, [pc, #92]	; (d4fbc <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d4f60:	2203      	movs	r2, #3
   d4f62:	4620      	mov	r0, r4
   d4f64:	f7ff fe79 	bl	d4c5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d4f68:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d4f6c:	2b01      	cmp	r3, #1
   d4f6e:	bf0c      	ite	eq
   d4f70:	2110      	moveq	r1, #16
   d4f72:	21af      	movne	r1, #175	; 0xaf
   d4f74:	e7ec      	b.n	d4f50 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d4f76:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4f7a:	2101      	movs	r1, #1
   d4f7c:	b280      	uxth	r0, r0
   d4f7e:	f001 f9a8 	bl	d62d2 <digitalWrite>
   d4f82:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4f84:	2800      	cmp	r0, #0
   d4f86:	d095      	beq.n	d4eb4 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d4f88:	f000 fe99 	bl	d5cbe <_ZN8SPIClass14endTransactionEv>
   d4f8c:	e792      	b.n	d4eb4 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d4f8e:	bf00      	nop
   d4f90:	000d6d8c 	.word	0x000d6d8c
   d4f94:	000d6acc 	.word	0x000d6acc
   d4f98:	000d6fd4 	.word	0x000d6fd4
   d4f9c:	000d6fd8 	.word	0x000d6fd8
   d4fa0:	000d6fdc 	.word	0x000d6fdc
   d4fa4:	00200080 	.word	0x00200080
   d4fa8:	000d6fe6 	.word	0x000d6fe6
   d4fac:	000d6fe0 	.word	0x000d6fe0
   d4fb0:	00400080 	.word	0x00400080
   d4fb4:	000d6fea 	.word	0x000d6fea
   d4fb8:	00100060 	.word	0x00100060
   d4fbc:	000d6fed 	.word	0x000d6fed

000d4fc0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4fc0:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d4fc2:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4fc4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d4fc8:	db3d      	blt.n	d5046 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d4fca:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4fce:	4294      	cmp	r4, r2
   d4fd0:	dd39      	ble.n	d5046 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d4fd2:	2900      	cmp	r1, #0
      w += x;
   d4fd4:	bfbe      	ittt	lt
   d4fd6:	185b      	addlt	r3, r3, r1
   d4fd8:	b21b      	sxthlt	r3, r3
      x  = 0;
   d4fda:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d4fdc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4fe0:	18ce      	adds	r6, r1, r3
   d4fe2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d4fe4:	bfc4      	itt	gt
   d4fe6:	1a63      	subgt	r3, r4, r1
   d4fe8:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d4fea:	2b00      	cmp	r3, #0
   d4fec:	dd2b      	ble.n	d5046 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d4fee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4ff0:	10d6      	asrs	r6, r2, #3
   d4ff2:	fb14 1106 	smlabb	r1, r4, r6, r1
   d4ff6:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d4ff8:	f002 0007 	and.w	r0, r2, #7
   d4ffc:	2201      	movs	r2, #1
   d4ffe:	4082      	lsls	r2, r0
      switch(color) {
   d5000:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d5002:	b2d2      	uxtb	r2, r2
      switch(color) {
   d5004:	d016      	beq.n	d5034 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d5006:	2d02      	cmp	r5, #2
   d5008:	d00b      	beq.n	d5022 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d500a:	b9e5      	cbnz	r5, d5046 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d500c:	43d2      	mvns	r2, r2
   d500e:	b2d2      	uxtb	r2, r2
   d5010:	440b      	add	r3, r1
   d5012:	4299      	cmp	r1, r3
   d5014:	d017      	beq.n	d5046 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5016:	f811 0b01 	ldrb.w	r0, [r1], #1
   d501a:	4010      	ands	r0, r2
   d501c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5020:	e7f7      	b.n	d5012 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d5022:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d5024:	4299      	cmp	r1, r3
   d5026:	d00e      	beq.n	d5046 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5028:	f811 0b01 	ldrb.w	r0, [r1], #1
   d502c:	4050      	eors	r0, r2
   d502e:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5032:	e7f7      	b.n	d5024 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d5034:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d5036:	4299      	cmp	r1, r3
   d5038:	d005      	beq.n	d5046 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d503a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d503e:	4310      	orrs	r0, r2
   d5040:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5044:	e7f7      	b.n	d5036 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d5046:	bd70      	pop	{r4, r5, r6, pc}

000d5048 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5048:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d504a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d504c:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5050:	db76      	blt.n	d5140 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d5052:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d5056:	42a9      	cmp	r1, r5
   d5058:	da72      	bge.n	d5140 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d505a:	2a00      	cmp	r2, #0
      __h += __y;
   d505c:	bfbc      	itt	lt
   d505e:	18d2      	addlt	r2, r2, r3
   d5060:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5062:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d5066:	bfb8      	it	lt
   d5068:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d506a:	18d7      	adds	r7, r2, r3
   d506c:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d506e:	bfc4      	itt	gt
   d5070:	1aa3      	subgt	r3, r4, r2
   d5072:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d5074:	2b00      	cmp	r3, #0
   d5076:	dd63      	ble.n	d5140 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5078:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d507c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d507e:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d5082:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d5086:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5088:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d508c:	d023      	beq.n	d50d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d508e:	f1c2 0208 	rsb	r2, r2, #8
   d5092:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d5094:	4d2c      	ldr	r5, [pc, #176]	; (d5148 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d5096:	4293      	cmp	r3, r2
   d5098:	bf3c      	itt	cc
   d509a:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d509e:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d50a2:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d50a4:	bf3c      	itt	cc
   d50a6:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d50aa:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d50ae:	2e01      	cmp	r6, #1
   d50b0:	d007      	beq.n	d50c2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d50b2:	2e02      	cmp	r6, #2
   d50b4:	d02e      	beq.n	d5114 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d50b6:	b94e      	cbnz	r6, d50cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d50b8:	f817 c001 	ldrb.w	ip, [r7, r1]
   d50bc:	ea2c 0505 	bic.w	r5, ip, r5
   d50c0:	e003      	b.n	d50ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d50c2:	f817 c001 	ldrb.w	ip, [r7, r1]
   d50c6:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d50ca:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d50cc:	4293      	cmp	r3, r2
   d50ce:	d337      	bcc.n	d5140 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d50d0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d50d4:	440c      	add	r4, r1
        h -= mod;
   d50d6:	1a9a      	subs	r2, r3, r2
   d50d8:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d50da:	2a07      	cmp	r2, #7
   d50dc:	d90e      	bls.n	d50fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d50de:	2e02      	cmp	r6, #2
   d50e0:	d11d      	bne.n	d511e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d50e2:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d50e4:	7821      	ldrb	r1, [r4, #0]
   d50e6:	43c9      	mvns	r1, r1
   d50e8:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d50ea:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d50ec:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d50f0:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d50f2:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d50f4:	440c      	add	r4, r1
            } while(h >= 8);
   d50f6:	d8f5      	bhi.n	d50e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d50f8:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d50fc:	b302      	cbz	r2, d5140 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d50fe:	4b13      	ldr	r3, [pc, #76]	; (d514c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d5100:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5102:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5104:	d019      	beq.n	d513a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d5106:	2e02      	cmp	r6, #2
   d5108:	d01b      	beq.n	d5142 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d510a:	b9ce      	cbnz	r6, d5140 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d510c:	7822      	ldrb	r2, [r4, #0]
   d510e:	ea22 0303 	bic.w	r3, r2, r3
   d5112:	e014      	b.n	d513e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5114:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5118:	ea85 050c 	eor.w	r5, r5, ip
   d511c:	e7d5      	b.n	d50ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d511e:	2e00      	cmp	r6, #0
   d5120:	bf14      	ite	ne
   d5122:	25ff      	movne	r5, #255	; 0xff
   d5124:	2500      	moveq	r5, #0
   d5126:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d5128:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d512a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d512c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5130:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d5132:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5134:	440c      	add	r4, r1
            } while(h >= 8);
   d5136:	d8f7      	bhi.n	d5128 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5138:	e7de      	b.n	d50f8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d513a:	7822      	ldrb	r2, [r4, #0]
   d513c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d513e:	7023      	strb	r3, [r4, #0]
}
   d5140:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d5142:	7822      	ldrb	r2, [r4, #0]
   d5144:	4053      	eors	r3, r2
   d5146:	e7fa      	b.n	d513e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d5148:	000d6fc4 	.word	0x000d6fc4
   d514c:	000d6fcc 	.word	0x000d6fcc

000d5150 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5150:	b470      	push	{r4, r5, r6}
   d5152:	4614      	mov	r4, r2
  switch(rotation) {
   d5154:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5156:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d515a:	2a02      	cmp	r2, #2
   d515c:	d00d      	beq.n	d517a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d515e:	2a03      	cmp	r2, #3
   d5160:	d018      	beq.n	d5194 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d5162:	2a01      	cmp	r2, #1
   d5164:	d111      	bne.n	d518a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d5166:	8902      	ldrh	r2, [r0, #8]
   d5168:	43e4      	mvns	r4, r4
   d516a:	4414      	add	r4, r2
   d516c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d516e:	9603      	str	r6, [sp, #12]
   d5170:	460a      	mov	r2, r1
   d5172:	4621      	mov	r1, r4
}
   d5174:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5176:	f7ff bf67 	b.w	d5048 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d517a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d517c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d517e:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5180:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d5182:	4414      	add	r4, r2
    x -= (w-1);
   d5184:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d5186:	b224      	sxth	r4, r4
    x -= (w-1);
   d5188:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d518a:	9603      	str	r6, [sp, #12]
   d518c:	4622      	mov	r2, r4
}
   d518e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5190:	f7ff bf16 	b.w	d4fc0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d5194:	8945      	ldrh	r5, [r0, #10]
   d5196:	4419      	add	r1, r3
   d5198:	1a69      	subs	r1, r5, r1
   d519a:	b209      	sxth	r1, r1
    break;
   d519c:	e7e7      	b.n	d516e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d519e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d519e:	b430      	push	{r4, r5}
   d51a0:	4614      	mov	r4, r2
  switch(rotation) {
   d51a2:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d51a4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d51a8:	2a02      	cmp	r2, #2
   d51aa:	d00d      	beq.n	d51c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d51ac:	2a03      	cmp	r2, #3
   d51ae:	d018      	beq.n	d51e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d51b0:	2a01      	cmp	r2, #1
   d51b2:	d111      	bne.n	d51d8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d51b4:	18e2      	adds	r2, r4, r3
   d51b6:	8904      	ldrh	r4, [r0, #8]
   d51b8:	1aa4      	subs	r4, r4, r2
   d51ba:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d51bc:	9502      	str	r5, [sp, #8]
   d51be:	460a      	mov	r2, r1
   d51c0:	4621      	mov	r1, r4
}
   d51c2:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d51c4:	f7ff befc 	b.w	d4fc0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d51c8:	8902      	ldrh	r2, [r0, #8]
   d51ca:	43c9      	mvns	r1, r1
   d51cc:	4411      	add	r1, r2
    y -= (h-1);
   d51ce:	18e2      	adds	r2, r4, r3
   d51d0:	8944      	ldrh	r4, [r0, #10]
   d51d2:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d51d4:	b209      	sxth	r1, r1
    y -= (h-1);
   d51d6:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d51d8:	9502      	str	r5, [sp, #8]
   d51da:	4622      	mov	r2, r4
}
   d51dc:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d51de:	f7ff bf33 	b.w	d5048 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d51e2:	8942      	ldrh	r2, [r0, #10]
   d51e4:	43c9      	mvns	r1, r1
   d51e6:	4411      	add	r1, r2
   d51e8:	b209      	sxth	r1, r1
    break;
   d51ea:	e7e7      	b.n	d51bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d51ec <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d51ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d51f0:	4604      	mov	r4, r0
  TRANSACTION_START
   d51f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d51f4:	2800      	cmp	r0, #0
   d51f6:	d042      	beq.n	d527e <_ZN16Adafruit_SSD13067displayEv+0x92>
   d51f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d51fa:	f000 fb6d 	bl	d58d8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d51fe:	4947      	ldr	r1, [pc, #284]	; (d531c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d5200:	2205      	movs	r2, #5
   d5202:	4620      	mov	r0, r4
   d5204:	f7ff fd29 	bl	d4c5a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d5208:	7a21      	ldrb	r1, [r4, #8]
   d520a:	3901      	subs	r1, #1
   d520c:	4620      	mov	r0, r4
   d520e:	b2c9      	uxtb	r1, r1
   d5210:	f7ff fcbc 	bl	d4b8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5214:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5218:	1dde      	adds	r6, r3, #7
   d521a:	bf48      	it	mi
   d521c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5220:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5224:	8923      	ldrh	r3, [r4, #8]
   d5226:	10f6      	asrs	r6, r6, #3
   d5228:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d522c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5230:	2800      	cmp	r0, #0
   d5232:	d03a      	beq.n	d52aa <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5234:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5238:	f000 fb5c 	bl	d58f4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d523c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d523e:	6803      	ldr	r3, [r0, #0]
   d5240:	2140      	movs	r1, #64	; 0x40
   d5242:	689b      	ldr	r3, [r3, #8]
   d5244:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5246:	2701      	movs	r7, #1
    while(count--) {
   d5248:	42b5      	cmp	r5, r6
   d524a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d524c:	d024      	beq.n	d5298 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d524e:	2f1f      	cmp	r7, #31
   d5250:	d90c      	bls.n	d526c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d5252:	f000 fb56 	bl	d5902 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5256:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d525a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d525c:	f000 fb4a 	bl	d58f4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5260:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5262:	6803      	ldr	r3, [r0, #0]
   d5264:	2140      	movs	r1, #64	; 0x40
   d5266:	689b      	ldr	r3, [r3, #8]
   d5268:	4798      	blx	r3
        bytesOut = 1;
   d526a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d526c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d526e:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5272:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d5274:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d5276:	689b      	ldr	r3, [r3, #8]
   d5278:	4798      	blx	r3
      bytesOut++;
   d527a:	b2ff      	uxtb	r7, r7
    while(count--) {
   d527c:	e7e4      	b.n	d5248 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d527e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5280:	b118      	cbz	r0, d528a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d5282:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5286:	f000 fd33 	bl	d5cf0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d528a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d528e:	2100      	movs	r1, #0
   d5290:	b280      	uxth	r0, r0
   d5292:	f001 f81e 	bl	d62d2 <digitalWrite>
   d5296:	e7b2      	b.n	d51fe <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d5298:	f000 fb33 	bl	d5902 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d529c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d529e:	b378      	cbz	r0, d5300 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d52a0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d52a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d52a6:	f000 bb17 	b.w	d58d8 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d52aa:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d52ae:	2101      	movs	r1, #1
   d52b0:	b280      	uxth	r0, r0
   d52b2:	f001 f80e 	bl	d62d2 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d52b6:	42b5      	cmp	r5, r6
   d52b8:	d0f0      	beq.n	d529c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d52ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d52bc:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d52c0:	b118      	cbz	r0, d52ca <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d52c2:	4649      	mov	r1, r9
   d52c4:	f000 fd82 	bl	d5dcc <_ZN8SPIClass8transferEh>
   d52c8:	e7f5      	b.n	d52b6 <_ZN16Adafruit_SSD13067displayEv+0xca>
   d52ca:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d52cc:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d52d0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d52d4:	ea09 0108 	and.w	r1, r9, r8
   d52d8:	b280      	uxth	r0, r0
   d52da:	f000 fffa 	bl	d62d2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d52de:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d52e2:	2101      	movs	r1, #1
   d52e4:	b280      	uxth	r0, r0
   d52e6:	f000 fff4 	bl	d62d2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   d52ea:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d52ee:	2100      	movs	r1, #0
   d52f0:	b280      	uxth	r0, r0
   d52f2:	f000 ffee 	bl	d62d2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d52f6:	3f01      	subs	r7, #1
   d52f8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d52fc:	d1e8      	bne.n	d52d0 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d52fe:	e7da      	b.n	d52b6 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d5300:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5304:	2101      	movs	r1, #1
   d5306:	b280      	uxth	r0, r0
   d5308:	f000 ffe3 	bl	d62d2 <digitalWrite>
   d530c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d530e:	b118      	cbz	r0, d5318 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5310:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5314:	f000 bcd3 	b.w	d5cbe <_ZN8SPIClass14endTransactionEv>
}
   d5318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d531c:	000d6ff0 	.word	0x000d6ff0

000d5320 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5320:	b508      	push	{r3, lr}
   d5322:	4b02      	ldr	r3, [pc, #8]	; (d532c <os_mutex_recursive_create+0xc>)
   d5324:	681b      	ldr	r3, [r3, #0]
   d5326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5328:	9301      	str	r3, [sp, #4]
   d532a:	bd08      	pop	{r3, pc}
   d532c:	00030248 	.word	0x00030248

000d5330 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5330:	b508      	push	{r3, lr}
   d5332:	4b02      	ldr	r3, [pc, #8]	; (d533c <HAL_RNG_GetRandomNumber+0xc>)
   d5334:	681b      	ldr	r3, [r3, #0]
   d5336:	685b      	ldr	r3, [r3, #4]
   d5338:	9301      	str	r3, [sp, #4]
   d533a:	bd08      	pop	{r3, pc}
   d533c:	00030218 	.word	0x00030218

000d5340 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5340:	b508      	push	{r3, lr}
   d5342:	4b02      	ldr	r3, [pc, #8]	; (d534c <HAL_Delay_Microseconds+0xc>)
   d5344:	681b      	ldr	r3, [r3, #0]
   d5346:	68db      	ldr	r3, [r3, #12]
   d5348:	9301      	str	r3, [sp, #4]
   d534a:	bd08      	pop	{r3, pc}
   d534c:	00030218 	.word	0x00030218

000d5350 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b02      	ldr	r3, [pc, #8]	; (d535c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	695b      	ldr	r3, [r3, #20]
   d5358:	9301      	str	r3, [sp, #4]
   d535a:	bd08      	pop	{r3, pc}
   d535c:	00030218 	.word	0x00030218

000d5360 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5360:	b508      	push	{r3, lr}
   d5362:	4b02      	ldr	r3, [pc, #8]	; (d536c <hal_rtc_time_is_valid+0xc>)
   d5364:	681b      	ldr	r3, [r3, #0]
   d5366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5368:	9301      	str	r3, [sp, #4]
   d536a:	bd08      	pop	{r3, pc}
   d536c:	00030218 	.word	0x00030218

000d5370 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5370:	b508      	push	{r3, lr}
   d5372:	4b02      	ldr	r3, [pc, #8]	; (d537c <hal_rtc_get_time+0xc>)
   d5374:	681b      	ldr	r3, [r3, #0]
   d5376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5378:	9301      	str	r3, [sp, #4]
   d537a:	bd08      	pop	{r3, pc}
   d537c:	00030218 	.word	0x00030218

000d5380 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5380:	b508      	push	{r3, lr}
   d5382:	4b02      	ldr	r3, [pc, #8]	; (d538c <HAL_Pin_Mode+0xc>)
   d5384:	681b      	ldr	r3, [r3, #0]
   d5386:	689b      	ldr	r3, [r3, #8]
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	bd08      	pop	{r3, pc}
   d538c:	0003022c 	.word	0x0003022c

000d5390 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5390:	b508      	push	{r3, lr}
   d5392:	4b02      	ldr	r3, [pc, #8]	; (d539c <HAL_Get_Pin_Mode+0xc>)
   d5394:	681b      	ldr	r3, [r3, #0]
   d5396:	68db      	ldr	r3, [r3, #12]
   d5398:	9301      	str	r3, [sp, #4]
   d539a:	bd08      	pop	{r3, pc}
   d539c:	0003022c 	.word	0x0003022c

000d53a0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b02      	ldr	r3, [pc, #8]	; (d53ac <HAL_GPIO_Write+0xc>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	691b      	ldr	r3, [r3, #16]
   d53a8:	9301      	str	r3, [sp, #4]
   d53aa:	bd08      	pop	{r3, pc}
   d53ac:	0003022c 	.word	0x0003022c

000d53b0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d53b0:	b508      	push	{r3, lr}
   d53b2:	4b02      	ldr	r3, [pc, #8]	; (d53bc <HAL_GPIO_Read+0xc>)
   d53b4:	681b      	ldr	r3, [r3, #0]
   d53b6:	695b      	ldr	r3, [r3, #20]
   d53b8:	9301      	str	r3, [sp, #4]
   d53ba:	bd08      	pop	{r3, pc}
   d53bc:	0003022c 	.word	0x0003022c

000d53c0 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d53c0:	b508      	push	{r3, lr}
   d53c2:	4b02      	ldr	r3, [pc, #8]	; (d53cc <hal_i2c_set_speed+0xc>)
   d53c4:	681b      	ldr	r3, [r3, #0]
   d53c6:	681b      	ldr	r3, [r3, #0]
   d53c8:	9301      	str	r3, [sp, #4]
   d53ca:	bd08      	pop	{r3, pc}
   d53cc:	00030228 	.word	0x00030228

000d53d0 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d53d0:	b508      	push	{r3, lr}
   d53d2:	4b02      	ldr	r3, [pc, #8]	; (d53dc <hal_i2c_begin+0xc>)
   d53d4:	681b      	ldr	r3, [r3, #0]
   d53d6:	68db      	ldr	r3, [r3, #12]
   d53d8:	9301      	str	r3, [sp, #4]
   d53da:	bd08      	pop	{r3, pc}
   d53dc:	00030228 	.word	0x00030228

000d53e0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d53e0:	b508      	push	{r3, lr}
   d53e2:	4b02      	ldr	r3, [pc, #8]	; (d53ec <hal_i2c_begin_transmission+0xc>)
   d53e4:	681b      	ldr	r3, [r3, #0]
   d53e6:	699b      	ldr	r3, [r3, #24]
   d53e8:	9301      	str	r3, [sp, #4]
   d53ea:	bd08      	pop	{r3, pc}
   d53ec:	00030228 	.word	0x00030228

000d53f0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d53f0:	b508      	push	{r3, lr}
   d53f2:	4b02      	ldr	r3, [pc, #8]	; (d53fc <hal_i2c_end_transmission+0xc>)
   d53f4:	681b      	ldr	r3, [r3, #0]
   d53f6:	69db      	ldr	r3, [r3, #28]
   d53f8:	9301      	str	r3, [sp, #4]
   d53fa:	bd08      	pop	{r3, pc}
   d53fc:	00030228 	.word	0x00030228

000d5400 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5400:	b508      	push	{r3, lr}
   d5402:	4b02      	ldr	r3, [pc, #8]	; (d540c <hal_i2c_write+0xc>)
   d5404:	681b      	ldr	r3, [r3, #0]
   d5406:	6a1b      	ldr	r3, [r3, #32]
   d5408:	9301      	str	r3, [sp, #4]
   d540a:	bd08      	pop	{r3, pc}
   d540c:	00030228 	.word	0x00030228

000d5410 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5410:	b508      	push	{r3, lr}
   d5412:	4b02      	ldr	r3, [pc, #8]	; (d541c <hal_i2c_available+0xc>)
   d5414:	681b      	ldr	r3, [r3, #0]
   d5416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5418:	9301      	str	r3, [sp, #4]
   d541a:	bd08      	pop	{r3, pc}
   d541c:	00030228 	.word	0x00030228

000d5420 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5420:	b508      	push	{r3, lr}
   d5422:	4b02      	ldr	r3, [pc, #8]	; (d542c <hal_i2c_read+0xc>)
   d5424:	681b      	ldr	r3, [r3, #0]
   d5426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5428:	9301      	str	r3, [sp, #4]
   d542a:	bd08      	pop	{r3, pc}
   d542c:	00030228 	.word	0x00030228

000d5430 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5430:	b508      	push	{r3, lr}
   d5432:	4b02      	ldr	r3, [pc, #8]	; (d543c <hal_i2c_peek+0xc>)
   d5434:	681b      	ldr	r3, [r3, #0]
   d5436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5438:	9301      	str	r3, [sp, #4]
   d543a:	bd08      	pop	{r3, pc}
   d543c:	00030228 	.word	0x00030228

000d5440 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5440:	b508      	push	{r3, lr}
   d5442:	4b02      	ldr	r3, [pc, #8]	; (d544c <hal_i2c_flush+0xc>)
   d5444:	681b      	ldr	r3, [r3, #0]
   d5446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5448:	9301      	str	r3, [sp, #4]
   d544a:	bd08      	pop	{r3, pc}
   d544c:	00030228 	.word	0x00030228

000d5450 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5450:	b508      	push	{r3, lr}
   d5452:	4b02      	ldr	r3, [pc, #8]	; (d545c <hal_i2c_is_enabled+0xc>)
   d5454:	681b      	ldr	r3, [r3, #0]
   d5456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5458:	9301      	str	r3, [sp, #4]
   d545a:	bd08      	pop	{r3, pc}
   d545c:	00030228 	.word	0x00030228

000d5460 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5460:	b508      	push	{r3, lr}
   d5462:	4b02      	ldr	r3, [pc, #8]	; (d546c <hal_i2c_init+0xc>)
   d5464:	681b      	ldr	r3, [r3, #0]
   d5466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5468:	9301      	str	r3, [sp, #4]
   d546a:	bd08      	pop	{r3, pc}
   d546c:	00030228 	.word	0x00030228

000d5470 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5470:	b508      	push	{r3, lr}
   d5472:	4b02      	ldr	r3, [pc, #8]	; (d547c <inet_inet_ntop+0xc>)
   d5474:	681b      	ldr	r3, [r3, #0]
   d5476:	695b      	ldr	r3, [r3, #20]
   d5478:	9301      	str	r3, [sp, #4]
   d547a:	bd08      	pop	{r3, pc}
   d547c:	00030264 	.word	0x00030264

000d5480 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5480:	b508      	push	{r3, lr}
   d5482:	4b02      	ldr	r3, [pc, #8]	; (d548c <netdb_freeaddrinfo+0xc>)
   d5484:	681b      	ldr	r3, [r3, #0]
   d5486:	689b      	ldr	r3, [r3, #8]
   d5488:	9301      	str	r3, [sp, #4]
   d548a:	bd08      	pop	{r3, pc}
   d548c:	00030268 	.word	0x00030268

000d5490 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5490:	b508      	push	{r3, lr}
   d5492:	4b02      	ldr	r3, [pc, #8]	; (d549c <netdb_getaddrinfo+0xc>)
   d5494:	681b      	ldr	r3, [r3, #0]
   d5496:	68db      	ldr	r3, [r3, #12]
   d5498:	9301      	str	r3, [sp, #4]
   d549a:	bd08      	pop	{r3, pc}
   d549c:	00030268 	.word	0x00030268

000d54a0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d54a0:	b508      	push	{r3, lr}
   d54a2:	4b02      	ldr	r3, [pc, #8]	; (d54ac <hal_spi_begin+0xc>)
   d54a4:	681b      	ldr	r3, [r3, #0]
   d54a6:	681b      	ldr	r3, [r3, #0]
   d54a8:	9301      	str	r3, [sp, #4]
   d54aa:	bd08      	pop	{r3, pc}
   d54ac:	00030230 	.word	0x00030230

000d54b0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d54b0:	b508      	push	{r3, lr}
   d54b2:	4b02      	ldr	r3, [pc, #8]	; (d54bc <hal_spi_transfer+0xc>)
   d54b4:	681b      	ldr	r3, [r3, #0]
   d54b6:	695b      	ldr	r3, [r3, #20]
   d54b8:	9301      	str	r3, [sp, #4]
   d54ba:	bd08      	pop	{r3, pc}
   d54bc:	00030230 	.word	0x00030230

000d54c0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d54c0:	b508      	push	{r3, lr}
   d54c2:	4b02      	ldr	r3, [pc, #8]	; (d54cc <hal_spi_init+0xc>)
   d54c4:	681b      	ldr	r3, [r3, #0]
   d54c6:	69db      	ldr	r3, [r3, #28]
   d54c8:	9301      	str	r3, [sp, #4]
   d54ca:	bd08      	pop	{r3, pc}
   d54cc:	00030230 	.word	0x00030230

000d54d0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d54d0:	b508      	push	{r3, lr}
   d54d2:	4b02      	ldr	r3, [pc, #8]	; (d54dc <hal_spi_is_enabled+0xc>)
   d54d4:	681b      	ldr	r3, [r3, #0]
   d54d6:	6a1b      	ldr	r3, [r3, #32]
   d54d8:	9301      	str	r3, [sp, #4]
   d54da:	bd08      	pop	{r3, pc}
   d54dc:	00030230 	.word	0x00030230

000d54e0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d54e0:	b508      	push	{r3, lr}
   d54e2:	4b02      	ldr	r3, [pc, #8]	; (d54ec <hal_spi_info+0xc>)
   d54e4:	681b      	ldr	r3, [r3, #0]
   d54e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d54e8:	9301      	str	r3, [sp, #4]
   d54ea:	bd08      	pop	{r3, pc}
   d54ec:	00030230 	.word	0x00030230

000d54f0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d54f0:	b508      	push	{r3, lr}
   d54f2:	4b02      	ldr	r3, [pc, #8]	; (d54fc <hal_spi_set_settings+0xc>)
   d54f4:	681b      	ldr	r3, [r3, #0]
   d54f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d54f8:	9301      	str	r3, [sp, #4]
   d54fa:	bd08      	pop	{r3, pc}
   d54fc:	00030230 	.word	0x00030230

000d5500 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5500:	b508      	push	{r3, lr}
   d5502:	4b02      	ldr	r3, [pc, #8]	; (d550c <hal_spi_acquire+0xc>)
   d5504:	681b      	ldr	r3, [r3, #0]
   d5506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5508:	9301      	str	r3, [sp, #4]
   d550a:	bd08      	pop	{r3, pc}
   d550c:	00030230 	.word	0x00030230

000d5510 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5510:	b508      	push	{r3, lr}
   d5512:	4b02      	ldr	r3, [pc, #8]	; (d551c <hal_spi_release+0xc>)
   d5514:	681b      	ldr	r3, [r3, #0]
   d5516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5518:	9301      	str	r3, [sp, #4]
   d551a:	bd08      	pop	{r3, pc}
   d551c:	00030230 	.word	0x00030230

000d5520 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5520:	b508      	push	{r3, lr}
   d5522:	4b02      	ldr	r3, [pc, #8]	; (d552c <hal_usart_init+0xc>)
   d5524:	681b      	ldr	r3, [r3, #0]
   d5526:	681b      	ldr	r3, [r3, #0]
   d5528:	9301      	str	r3, [sp, #4]
   d552a:	bd08      	pop	{r3, pc}
   d552c:	0003023c 	.word	0x0003023c

000d5530 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5530:	b508      	push	{r3, lr}
   d5532:	4b02      	ldr	r3, [pc, #8]	; (d553c <hal_usart_write+0xc>)
   d5534:	681b      	ldr	r3, [r3, #0]
   d5536:	68db      	ldr	r3, [r3, #12]
   d5538:	9301      	str	r3, [sp, #4]
   d553a:	bd08      	pop	{r3, pc}
   d553c:	0003023c 	.word	0x0003023c

000d5540 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5540:	b508      	push	{r3, lr}
   d5542:	4b02      	ldr	r3, [pc, #8]	; (d554c <hal_usart_available+0xc>)
   d5544:	681b      	ldr	r3, [r3, #0]
   d5546:	691b      	ldr	r3, [r3, #16]
   d5548:	9301      	str	r3, [sp, #4]
   d554a:	bd08      	pop	{r3, pc}
   d554c:	0003023c 	.word	0x0003023c

000d5550 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5550:	b508      	push	{r3, lr}
   d5552:	4b02      	ldr	r3, [pc, #8]	; (d555c <hal_usart_read+0xc>)
   d5554:	681b      	ldr	r3, [r3, #0]
   d5556:	695b      	ldr	r3, [r3, #20]
   d5558:	9301      	str	r3, [sp, #4]
   d555a:	bd08      	pop	{r3, pc}
   d555c:	0003023c 	.word	0x0003023c

000d5560 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5560:	b508      	push	{r3, lr}
   d5562:	4b02      	ldr	r3, [pc, #8]	; (d556c <hal_usart_peek+0xc>)
   d5564:	681b      	ldr	r3, [r3, #0]
   d5566:	699b      	ldr	r3, [r3, #24]
   d5568:	9301      	str	r3, [sp, #4]
   d556a:	bd08      	pop	{r3, pc}
   d556c:	0003023c 	.word	0x0003023c

000d5570 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5570:	b508      	push	{r3, lr}
   d5572:	4b02      	ldr	r3, [pc, #8]	; (d557c <hal_usart_flush+0xc>)
   d5574:	681b      	ldr	r3, [r3, #0]
   d5576:	69db      	ldr	r3, [r3, #28]
   d5578:	9301      	str	r3, [sp, #4]
   d557a:	bd08      	pop	{r3, pc}
   d557c:	0003023c 	.word	0x0003023c

000d5580 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5580:	b508      	push	{r3, lr}
   d5582:	4b02      	ldr	r3, [pc, #8]	; (d558c <hal_usart_is_enabled+0xc>)
   d5584:	681b      	ldr	r3, [r3, #0]
   d5586:	6a1b      	ldr	r3, [r3, #32]
   d5588:	9301      	str	r3, [sp, #4]
   d558a:	bd08      	pop	{r3, pc}
   d558c:	0003023c 	.word	0x0003023c

000d5590 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5590:	b508      	push	{r3, lr}
   d5592:	4b02      	ldr	r3, [pc, #8]	; (d559c <hal_usart_available_data_for_write+0xc>)
   d5594:	681b      	ldr	r3, [r3, #0]
   d5596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5598:	9301      	str	r3, [sp, #4]
   d559a:	bd08      	pop	{r3, pc}
   d559c:	0003023c 	.word	0x0003023c

000d55a0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d55a0:	b508      	push	{r3, lr}
   d55a2:	4b02      	ldr	r3, [pc, #8]	; (d55ac <HAL_USB_USART_Init+0xc>)
   d55a4:	681b      	ldr	r3, [r3, #0]
   d55a6:	681b      	ldr	r3, [r3, #0]
   d55a8:	9301      	str	r3, [sp, #4]
   d55aa:	bd08      	pop	{r3, pc}
   d55ac:	0003024c 	.word	0x0003024c

000d55b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d55b0:	b508      	push	{r3, lr}
   d55b2:	4b02      	ldr	r3, [pc, #8]	; (d55bc <HAL_USB_USART_Begin+0xc>)
   d55b4:	681b      	ldr	r3, [r3, #0]
   d55b6:	685b      	ldr	r3, [r3, #4]
   d55b8:	9301      	str	r3, [sp, #4]
   d55ba:	bd08      	pop	{r3, pc}
   d55bc:	0003024c 	.word	0x0003024c

000d55c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d55c0:	b508      	push	{r3, lr}
   d55c2:	4b02      	ldr	r3, [pc, #8]	; (d55cc <HAL_USB_USART_Available_Data+0xc>)
   d55c4:	681b      	ldr	r3, [r3, #0]
   d55c6:	691b      	ldr	r3, [r3, #16]
   d55c8:	9301      	str	r3, [sp, #4]
   d55ca:	bd08      	pop	{r3, pc}
   d55cc:	0003024c 	.word	0x0003024c

000d55d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d55d0:	b508      	push	{r3, lr}
   d55d2:	4b02      	ldr	r3, [pc, #8]	; (d55dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d55d4:	681b      	ldr	r3, [r3, #0]
   d55d6:	695b      	ldr	r3, [r3, #20]
   d55d8:	9301      	str	r3, [sp, #4]
   d55da:	bd08      	pop	{r3, pc}
   d55dc:	0003024c 	.word	0x0003024c

000d55e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d55e0:	b508      	push	{r3, lr}
   d55e2:	4b02      	ldr	r3, [pc, #8]	; (d55ec <HAL_USB_USART_Receive_Data+0xc>)
   d55e4:	681b      	ldr	r3, [r3, #0]
   d55e6:	699b      	ldr	r3, [r3, #24]
   d55e8:	9301      	str	r3, [sp, #4]
   d55ea:	bd08      	pop	{r3, pc}
   d55ec:	0003024c 	.word	0x0003024c

000d55f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d55f0:	b508      	push	{r3, lr}
   d55f2:	4b02      	ldr	r3, [pc, #8]	; (d55fc <HAL_USB_USART_Send_Data+0xc>)
   d55f4:	681b      	ldr	r3, [r3, #0]
   d55f6:	69db      	ldr	r3, [r3, #28]
   d55f8:	9301      	str	r3, [sp, #4]
   d55fa:	bd08      	pop	{r3, pc}
   d55fc:	0003024c 	.word	0x0003024c

000d5600 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5600:	b508      	push	{r3, lr}
   d5602:	4b02      	ldr	r3, [pc, #8]	; (d560c <HAL_USB_USART_Flush_Data+0xc>)
   d5604:	681b      	ldr	r3, [r3, #0]
   d5606:	6a1b      	ldr	r3, [r3, #32]
   d5608:	9301      	str	r3, [sp, #4]
   d560a:	bd08      	pop	{r3, pc}
   d560c:	0003024c 	.word	0x0003024c

000d5610 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5610:	b508      	push	{r3, lr}
   d5612:	4b02      	ldr	r3, [pc, #8]	; (d561c <panic_+0xc>)
   d5614:	681b      	ldr	r3, [r3, #0]
   d5616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5618:	9301      	str	r3, [sp, #4]
   d561a:	bd08      	pop	{r3, pc}
   d561c:	00030260 	.word	0x00030260

000d5620 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5620:	b508      	push	{r3, lr}
   d5622:	4b02      	ldr	r3, [pc, #8]	; (d562c <system_mode+0xc>)
   d5624:	681b      	ldr	r3, [r3, #0]
   d5626:	681b      	ldr	r3, [r3, #0]
   d5628:	9301      	str	r3, [sp, #4]
   d562a:	bd08      	pop	{r3, pc}
   d562c:	00030220 	.word	0x00030220

000d5630 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5630:	b508      	push	{r3, lr}
   d5632:	4b02      	ldr	r3, [pc, #8]	; (d563c <set_system_mode+0xc>)
   d5634:	681b      	ldr	r3, [r3, #0]
   d5636:	685b      	ldr	r3, [r3, #4]
   d5638:	9301      	str	r3, [sp, #4]
   d563a:	bd08      	pop	{r3, pc}
   d563c:	00030220 	.word	0x00030220

000d5640 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5640:	b508      	push	{r3, lr}
   d5642:	4b02      	ldr	r3, [pc, #8]	; (d564c <system_delay_ms+0xc>)
   d5644:	681b      	ldr	r3, [r3, #0]
   d5646:	695b      	ldr	r3, [r3, #20]
   d5648:	9301      	str	r3, [sp, #4]
   d564a:	bd08      	pop	{r3, pc}
   d564c:	00030220 	.word	0x00030220

000d5650 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5650:	b508      	push	{r3, lr}
   d5652:	4b02      	ldr	r3, [pc, #8]	; (d565c <system_thread_get_state+0xc>)
   d5654:	681b      	ldr	r3, [r3, #0]
   d5656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5658:	9301      	str	r3, [sp, #4]
   d565a:	bd08      	pop	{r3, pc}
   d565c:	00030220 	.word	0x00030220

000d5660 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5660:	b508      	push	{r3, lr}
   d5662:	4b03      	ldr	r3, [pc, #12]	; (d5670 <system_ctrl_set_app_request_handler+0x10>)
   d5664:	681b      	ldr	r3, [r3, #0]
   d5666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d566a:	9301      	str	r3, [sp, #4]
   d566c:	bd08      	pop	{r3, pc}
   d566e:	0000      	.short	0x0000
   d5670:	00030220 	.word	0x00030220

000d5674 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b03      	ldr	r3, [pc, #12]	; (d5684 <system_ctrl_set_result+0x10>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d567e:	9301      	str	r3, [sp, #4]
   d5680:	bd08      	pop	{r3, pc}
   d5682:	0000      	.short	0x0000
   d5684:	00030220 	.word	0x00030220

000d5688 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <spark_process+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	689b      	ldr	r3, [r3, #8]
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	00030244 	.word	0x00030244

000d5698 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <spark_cloud_flag_connected+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	695b      	ldr	r3, [r3, #20]
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	00030244 	.word	0x00030244

000d56a8 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <spark_sync_time_pending+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	00030244 	.word	0x00030244

000d56b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	00030244 	.word	0x00030244

000d56c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <network_connect+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	685b      	ldr	r3, [r3, #4]
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	00030240 	.word	0x00030240

000d56d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <network_connecting+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	689b      	ldr	r3, [r3, #8]
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	00030240 	.word	0x00030240

000d56e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <network_disconnect+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	68db      	ldr	r3, [r3, #12]
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	00030240 	.word	0x00030240

000d56f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <network_ready+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	691b      	ldr	r3, [r3, #16]
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	00030240 	.word	0x00030240

000d5708 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <network_on+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	695b      	ldr	r3, [r3, #20]
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	00030240 	.word	0x00030240

000d5718 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <network_off+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	699b      	ldr	r3, [r3, #24]
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	00030240 	.word	0x00030240

000d5728 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <network_listen+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	69db      	ldr	r3, [r3, #28]
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	00030240 	.word	0x00030240

000d5738 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5738:	b508      	push	{r3, lr}
   d573a:	4b02      	ldr	r3, [pc, #8]	; (d5744 <network_listening+0xc>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	6a1b      	ldr	r3, [r3, #32]
   d5740:	9301      	str	r3, [sp, #4]
   d5742:	bd08      	pop	{r3, pc}
   d5744:	00030240 	.word	0x00030240

000d5748 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <network_set_listen_timeout+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	00030240 	.word	0x00030240

000d5758 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b02      	ldr	r3, [pc, #8]	; (d5764 <network_get_listen_timeout+0xc>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	bd08      	pop	{r3, pc}
   d5764:	00030240 	.word	0x00030240

000d5768 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5768:	b508      	push	{r3, lr}
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <network_is_on+0xc>)
   d576c:	681b      	ldr	r3, [r3, #0]
   d576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5770:	9301      	str	r3, [sp, #4]
   d5772:	bd08      	pop	{r3, pc}
   d5774:	00030240 	.word	0x00030240

000d5778 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <network_is_off+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	00030240 	.word	0x00030240

000d5788 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <malloc+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	681b      	ldr	r3, [r3, #0]
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	0003021c 	.word	0x0003021c

000d5798 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <free+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	685b      	ldr	r3, [r3, #4]
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	0003021c 	.word	0x0003021c

000d57a8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <vsnprintf+0xc>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d57b0:	9301      	str	r3, [sp, #4]
   d57b2:	bd08      	pop	{r3, pc}
   d57b4:	0003021c 	.word	0x0003021c

000d57b8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d57b8:	b508      	push	{r3, lr}
   d57ba:	4b02      	ldr	r3, [pc, #8]	; (d57c4 <newlib_impure_ptr_callback+0xc>)
   d57bc:	681b      	ldr	r3, [r3, #0]
   d57be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57c0:	9301      	str	r3, [sp, #4]
   d57c2:	bd08      	pop	{r3, pc}
   d57c4:	0003021c 	.word	0x0003021c

000d57c8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d57c8:	2100      	movs	r1, #0
   d57ca:	f7ff bf39 	b.w	d5640 <system_delay_ms>
	...

000d57d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d57d0:	4802      	ldr	r0, [pc, #8]	; (d57dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d57d2:	2300      	movs	r3, #0
   d57d4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d57d6:	f7ff bda3 	b.w	d5320 <os_mutex_recursive_create>
   d57da:	bf00      	nop
   d57dc:	2003e5b4 	.word	0x2003e5b4

000d57e0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d57e0:	2200      	movs	r2, #0
   d57e2:	6840      	ldr	r0, [r0, #4]
   d57e4:	4611      	mov	r1, r2
   d57e6:	f7ff bfa7 	b.w	d5738 <network_listening>

000d57ea <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d57ea:	2200      	movs	r2, #0
   d57ec:	6840      	ldr	r0, [r0, #4]
   d57ee:	4611      	mov	r1, r2
   d57f0:	f7ff bfb2 	b.w	d5758 <network_get_listen_timeout>

000d57f4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d57f4:	6840      	ldr	r0, [r0, #4]
   d57f6:	2200      	movs	r2, #0
   d57f8:	f7ff bfa6 	b.w	d5748 <network_set_listen_timeout>

000d57fc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d57fc:	6840      	ldr	r0, [r0, #4]
   d57fe:	2200      	movs	r2, #0
   d5800:	f081 0101 	eor.w	r1, r1, #1
   d5804:	f7ff bf90 	b.w	d5728 <network_listen>

000d5808 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5808:	2300      	movs	r3, #0
   d580a:	6840      	ldr	r0, [r0, #4]
   d580c:	461a      	mov	r2, r3
   d580e:	4619      	mov	r1, r3
   d5810:	f7ff bf82 	b.w	d5718 <network_off>

000d5814 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5814:	2300      	movs	r3, #0
   d5816:	6840      	ldr	r0, [r0, #4]
   d5818:	461a      	mov	r2, r3
   d581a:	4619      	mov	r1, r3
   d581c:	f7ff bf74 	b.w	d5708 <network_on>

000d5820 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5820:	2200      	movs	r2, #0
   d5822:	6840      	ldr	r0, [r0, #4]
   d5824:	4611      	mov	r1, r2
   d5826:	f7ff bf67 	b.w	d56f8 <network_ready>

000d582a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d582a:	2200      	movs	r2, #0
   d582c:	6840      	ldr	r0, [r0, #4]
   d582e:	4611      	mov	r1, r2
   d5830:	f7ff bf52 	b.w	d56d8 <network_connecting>

000d5834 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5834:	6840      	ldr	r0, [r0, #4]
   d5836:	2200      	movs	r2, #0
   d5838:	2102      	movs	r1, #2
   d583a:	f7ff bf55 	b.w	d56e8 <network_disconnect>

000d583e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d583e:	2300      	movs	r3, #0
   d5840:	6840      	ldr	r0, [r0, #4]
   d5842:	461a      	mov	r2, r3
   d5844:	f7ff bf40 	b.w	d56c8 <network_connect>

000d5848 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5848:	4b02      	ldr	r3, [pc, #8]	; (d5854 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d584a:	2203      	movs	r2, #3
   d584c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d584e:	4a02      	ldr	r2, [pc, #8]	; (d5858 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5850:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5852:	4770      	bx	lr
   d5854:	2003e5b8 	.word	0x2003e5b8
   d5858:	000d7000 	.word	0x000d7000

000d585c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d585c:	4770      	bx	lr

000d585e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d585e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5860:	4606      	mov	r6, r0
   d5862:	4615      	mov	r5, r2
   d5864:	460c      	mov	r4, r1
   d5866:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5868:	42bc      	cmp	r4, r7
   d586a:	d006      	beq.n	d587a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d586c:	6833      	ldr	r3, [r6, #0]
   d586e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5872:	689b      	ldr	r3, [r3, #8]
   d5874:	4630      	mov	r0, r6
   d5876:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5878:	e7f6      	b.n	d5868 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d587a:	4628      	mov	r0, r5
   d587c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d587e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d587e:	7c00      	ldrb	r0, [r0, #16]
   d5880:	2200      	movs	r2, #0
   d5882:	f7ff bdbd 	b.w	d5400 <hal_i2c_write>

000d5886 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5886:	7c00      	ldrb	r0, [r0, #16]
   d5888:	2100      	movs	r1, #0
   d588a:	f7ff bdc1 	b.w	d5410 <hal_i2c_available>

000d588e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d588e:	7c00      	ldrb	r0, [r0, #16]
   d5890:	2100      	movs	r1, #0
   d5892:	f7ff bdc5 	b.w	d5420 <hal_i2c_read>

000d5896 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5896:	7c00      	ldrb	r0, [r0, #16]
   d5898:	2100      	movs	r1, #0
   d589a:	f7ff bdc9 	b.w	d5430 <hal_i2c_peek>

000d589e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d589e:	7c00      	ldrb	r0, [r0, #16]
   d58a0:	2100      	movs	r1, #0
   d58a2:	f7ff bdcd 	b.w	d5440 <hal_i2c_flush>

000d58a6 <_ZN7TwoWireD0Ev>:
   d58a6:	b510      	push	{r4, lr}
   d58a8:	2114      	movs	r1, #20
   d58aa:	4604      	mov	r4, r0
   d58ac:	f000 fd7a 	bl	d63a4 <_ZdlPvj>
   d58b0:	4620      	mov	r0, r4
   d58b2:	bd10      	pop	{r4, pc}

000d58b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d58b4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d58b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d58ba:	4604      	mov	r4, r0
   d58bc:	4608      	mov	r0, r1
   d58be:	2100      	movs	r1, #0
   d58c0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d58c4:	4b03      	ldr	r3, [pc, #12]	; (d58d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d58c6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d58c8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d58ca:	4611      	mov	r1, r2
   d58cc:	f7ff fdc8 	bl	d5460 <hal_i2c_init>
}
   d58d0:	4620      	mov	r0, r4
   d58d2:	bd10      	pop	{r4, pc}
   d58d4:	000d703c 	.word	0x000d703c

000d58d8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d58d8:	7c00      	ldrb	r0, [r0, #16]
   d58da:	2200      	movs	r2, #0
   d58dc:	f7ff bd70 	b.w	d53c0 <hal_i2c_set_speed>

000d58e0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d58e0:	2300      	movs	r3, #0
   d58e2:	7c00      	ldrb	r0, [r0, #16]
   d58e4:	461a      	mov	r2, r3
   d58e6:	4619      	mov	r1, r3
   d58e8:	f7ff bd72 	b.w	d53d0 <hal_i2c_begin>

000d58ec <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d58ec:	7c00      	ldrb	r0, [r0, #16]
   d58ee:	2200      	movs	r2, #0
   d58f0:	f7ff bd76 	b.w	d53e0 <hal_i2c_begin_transmission>

000d58f4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d58f4:	b2c9      	uxtb	r1, r1
   d58f6:	f7ff bff9 	b.w	d58ec <_ZN7TwoWire17beginTransmissionEh>

000d58fa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d58fa:	7c00      	ldrb	r0, [r0, #16]
   d58fc:	2200      	movs	r2, #0
   d58fe:	f7ff bd77 	b.w	d53f0 <hal_i2c_end_transmission>

000d5902 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5902:	2101      	movs	r1, #1
   d5904:	f7ff bff9 	b.w	d58fa <_ZN7TwoWire15endTransmissionEh>

000d5908 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5908:	4770      	bx	lr

000d590a <_ZN9IPAddressD0Ev>:
   d590a:	b510      	push	{r4, lr}
   d590c:	2118      	movs	r1, #24
   d590e:	4604      	mov	r4, r0
   d5910:	f000 fd48 	bl	d63a4 <_ZdlPvj>
   d5914:	4620      	mov	r0, r4
   d5916:	bd10      	pop	{r4, pc}

000d5918 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5918:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d591a:	7d03      	ldrb	r3, [r0, #20]
   d591c:	2b06      	cmp	r3, #6
{
   d591e:	b08d      	sub	sp, #52	; 0x34
   d5920:	460e      	mov	r6, r1
   d5922:	f100 0704 	add.w	r7, r0, #4
   d5926:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d592a:	d012      	beq.n	d5952 <_ZNK9IPAddress7printToER5Print+0x3a>
   d592c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5930:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5934:	220a      	movs	r2, #10
   d5936:	4630      	mov	r0, r6
   d5938:	f000 f94b 	bl	d5bd2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d593c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d593e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5940:	d019      	beq.n	d5976 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5942:	2c00      	cmp	r4, #0
   d5944:	d0f4      	beq.n	d5930 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5946:	212e      	movs	r1, #46	; 0x2e
   d5948:	4630      	mov	r0, r6
   d594a:	f000 f933 	bl	d5bb4 <_ZN5Print5printEc>
   d594e:	4404      	add	r4, r0
   d5950:	e7ee      	b.n	d5930 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5952:	232f      	movs	r3, #47	; 0x2f
   d5954:	466a      	mov	r2, sp
   d5956:	4639      	mov	r1, r7
   d5958:	200a      	movs	r0, #10
		buf[0] = 0;
   d595a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d595e:	f7ff fd87 	bl	d5470 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5962:	4668      	mov	r0, sp
   d5964:	f000 fd62 	bl	d642c <strlen>
   d5968:	6833      	ldr	r3, [r6, #0]
   d596a:	4602      	mov	r2, r0
   d596c:	68db      	ldr	r3, [r3, #12]
   d596e:	4669      	mov	r1, sp
   d5970:	4630      	mov	r0, r6
   d5972:	4798      	blx	r3
   d5974:	4604      	mov	r4, r0
    }
    return n;
}
   d5976:	4620      	mov	r0, r4
   d5978:	b00d      	add	sp, #52	; 0x34
   d597a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d597c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d597c:	b510      	push	{r4, lr}
   d597e:	4b05      	ldr	r3, [pc, #20]	; (d5994 <_ZN9IPAddressC1Ev+0x18>)
   d5980:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5982:	2211      	movs	r2, #17
   d5984:	f840 3b04 	str.w	r3, [r0], #4
   d5988:	2100      	movs	r1, #0
   d598a:	f000 fd23 	bl	d63d4 <memset>
}
   d598e:	4620      	mov	r0, r4
   d5990:	bd10      	pop	{r4, pc}
   d5992:	bf00      	nop
   d5994:	000d7064 	.word	0x000d7064

000d5998 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5998:	4603      	mov	r3, r0
   d599a:	4a07      	ldr	r2, [pc, #28]	; (d59b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d599c:	b510      	push	{r4, lr}
   d599e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d59a2:	f101 0210 	add.w	r2, r1, #16
   d59a6:	f851 4b04 	ldr.w	r4, [r1], #4
   d59aa:	f843 4b04 	str.w	r4, [r3], #4
   d59ae:	4291      	cmp	r1, r2
   d59b0:	d1f9      	bne.n	d59a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d59b2:	780a      	ldrb	r2, [r1, #0]
   d59b4:	701a      	strb	r2, [r3, #0]
}
   d59b6:	bd10      	pop	{r4, pc}
   d59b8:	000d7064 	.word	0x000d7064

000d59bc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d59bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d59be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d59c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d59c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d59ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d59ce:	2304      	movs	r3, #4
   d59d0:	6041      	str	r1, [r0, #4]
   d59d2:	7503      	strb	r3, [r0, #20]
}
   d59d4:	bd10      	pop	{r4, pc}

000d59d6 <_ZN9IPAddressaSEPKh>:
{
   d59d6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d59d8:	78cb      	ldrb	r3, [r1, #3]
   d59da:	9300      	str	r3, [sp, #0]
   d59dc:	788b      	ldrb	r3, [r1, #2]
   d59de:	784a      	ldrb	r2, [r1, #1]
   d59e0:	7809      	ldrb	r1, [r1, #0]
   d59e2:	f7ff ffeb 	bl	d59bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d59e6:	b002      	add	sp, #8
   d59e8:	bd10      	pop	{r4, pc}
	...

000d59ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d59ec:	4b01      	ldr	r3, [pc, #4]	; (d59f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d59ee:	4a02      	ldr	r2, [pc, #8]	; (d59f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d59f0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d59f2:	4770      	bx	lr
   d59f4:	2003e5c0 	.word	0x2003e5c0
   d59f8:	000d7070 	.word	0x000d7070

000d59fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d59fc:	2300      	movs	r3, #0
   d59fe:	6840      	ldr	r0, [r0, #4]
   d5a00:	461a      	mov	r2, r3
   d5a02:	f7ff be61 	b.w	d56c8 <network_connect>

000d5a06 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5a06:	6840      	ldr	r0, [r0, #4]
   d5a08:	2200      	movs	r2, #0
   d5a0a:	2102      	movs	r1, #2
   d5a0c:	f7ff be6c 	b.w	d56e8 <network_disconnect>

000d5a10 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5a10:	2200      	movs	r2, #0
   d5a12:	6840      	ldr	r0, [r0, #4]
   d5a14:	4611      	mov	r1, r2
   d5a16:	f7ff be5f 	b.w	d56d8 <network_connecting>

000d5a1a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5a1a:	2200      	movs	r2, #0
   d5a1c:	6840      	ldr	r0, [r0, #4]
   d5a1e:	4611      	mov	r1, r2
   d5a20:	f7ff be6a 	b.w	d56f8 <network_ready>

000d5a24 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5a24:	2300      	movs	r3, #0
   d5a26:	6840      	ldr	r0, [r0, #4]
   d5a28:	461a      	mov	r2, r3
   d5a2a:	4619      	mov	r1, r3
   d5a2c:	f7ff be6c 	b.w	d5708 <network_on>

000d5a30 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5a30:	2300      	movs	r3, #0
   d5a32:	6840      	ldr	r0, [r0, #4]
   d5a34:	461a      	mov	r2, r3
   d5a36:	4619      	mov	r1, r3
   d5a38:	f7ff be6e 	b.w	d5718 <network_off>

000d5a3c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5a3c:	6840      	ldr	r0, [r0, #4]
   d5a3e:	2100      	movs	r1, #0
   d5a40:	f7ff be92 	b.w	d5768 <network_is_on>

000d5a44 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5a44:	6840      	ldr	r0, [r0, #4]
   d5a46:	2100      	movs	r1, #0
   d5a48:	f7ff be96 	b.w	d5778 <network_is_off>

000d5a4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5a4c:	6840      	ldr	r0, [r0, #4]
   d5a4e:	2200      	movs	r2, #0
   d5a50:	f081 0101 	eor.w	r1, r1, #1
   d5a54:	f7ff be68 	b.w	d5728 <network_listen>

000d5a58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5a58:	6840      	ldr	r0, [r0, #4]
   d5a5a:	2200      	movs	r2, #0
   d5a5c:	f7ff be74 	b.w	d5748 <network_set_listen_timeout>

000d5a60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5a60:	2200      	movs	r2, #0
   d5a62:	6840      	ldr	r0, [r0, #4]
   d5a64:	4611      	mov	r1, r2
   d5a66:	f7ff be77 	b.w	d5758 <network_get_listen_timeout>

000d5a6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5a6a:	2200      	movs	r2, #0
   d5a6c:	6840      	ldr	r0, [r0, #4]
   d5a6e:	4611      	mov	r1, r2
   d5a70:	f7ff be62 	b.w	d5738 <network_listening>

000d5a74 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a78:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5a7a:	b095      	sub	sp, #84	; 0x54
   d5a7c:	4616      	mov	r6, r2
   d5a7e:	460d      	mov	r5, r1
   d5a80:	4607      	mov	r7, r0
    IPAddress addr;
   d5a82:	f7ff ff7b 	bl	d597c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5a86:	4621      	mov	r1, r4
   d5a88:	2218      	movs	r2, #24
   d5a8a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5a8c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5a8e:	f000 fca1 	bl	d63d4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5a92:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5a94:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5a98:	4621      	mov	r1, r4
   d5a9a:	466b      	mov	r3, sp
   d5a9c:	aa0c      	add	r2, sp, #48	; 0x30
   d5a9e:	4630      	mov	r0, r6
   d5aa0:	f7ff fcf6 	bl	d5490 <netdb_getaddrinfo>
    if (!r) {
   d5aa4:	4604      	mov	r4, r0
   d5aa6:	2800      	cmp	r0, #0
   d5aa8:	d146      	bne.n	d5b38 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5aaa:	4602      	mov	r2, r0
   d5aac:	2101      	movs	r1, #1
   d5aae:	6868      	ldr	r0, [r5, #4]
   d5ab0:	f7ff fe22 	bl	d56f8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ab4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5ab6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ab8:	4622      	mov	r2, r4
   d5aba:	6868      	ldr	r0, [r5, #4]
   d5abc:	f7ff fe1c 	bl	d56f8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ac0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ac2:	4681      	mov	r9, r0
        bool ok = false;
   d5ac4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ac6:	2e00      	cmp	r6, #0
   d5ac8:	d036      	beq.n	d5b38 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5aca:	2900      	cmp	r1, #0
   d5acc:	d134      	bne.n	d5b38 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5ace:	6873      	ldr	r3, [r6, #4]
   d5ad0:	2b02      	cmp	r3, #2
   d5ad2:	d003      	beq.n	d5adc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5ad4:	2b0a      	cmp	r3, #10
   d5ad6:	d00b      	beq.n	d5af0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ad8:	69f6      	ldr	r6, [r6, #28]
   d5ada:	e7f4      	b.n	d5ac6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5adc:	f1b8 0f00 	cmp.w	r8, #0
   d5ae0:	d004      	beq.n	d5aec <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5ae2:	6971      	ldr	r1, [r6, #20]
   d5ae4:	4638      	mov	r0, r7
   d5ae6:	3104      	adds	r1, #4
   d5ae8:	f7ff ff75 	bl	d59d6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5aec:	4641      	mov	r1, r8
   d5aee:	e7f3      	b.n	d5ad8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5af0:	f1b9 0f00 	cmp.w	r9, #0
   d5af4:	d101      	bne.n	d5afa <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5af6:	4649      	mov	r1, r9
   d5af8:	e7ee      	b.n	d5ad8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5afa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5afc:	2210      	movs	r2, #16
   d5afe:	a801      	add	r0, sp, #4
   d5b00:	f000 fc68 	bl	d63d4 <memset>
                    a.v = 6;
   d5b04:	2306      	movs	r3, #6
   d5b06:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5b0a:	ad01      	add	r5, sp, #4
   d5b0c:	f104 0308 	add.w	r3, r4, #8
   d5b10:	3418      	adds	r4, #24
   d5b12:	6818      	ldr	r0, [r3, #0]
   d5b14:	6859      	ldr	r1, [r3, #4]
   d5b16:	462a      	mov	r2, r5
   d5b18:	c203      	stmia	r2!, {r0, r1}
   d5b1a:	3308      	adds	r3, #8
   d5b1c:	42a3      	cmp	r3, r4
   d5b1e:	4615      	mov	r5, r2
   d5b20:	d1f7      	bne.n	d5b12 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5b22:	a901      	add	r1, sp, #4
   d5b24:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5b26:	ad07      	add	r5, sp, #28
   d5b28:	f7ff ff36 	bl	d5998 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b2e:	1d3c      	adds	r4, r7, #4
   d5b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b32:	682b      	ldr	r3, [r5, #0]
   d5b34:	7023      	strb	r3, [r4, #0]
   d5b36:	e7de      	b.n	d5af6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5b38:	9800      	ldr	r0, [sp, #0]
   d5b3a:	f7ff fca1 	bl	d5480 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5b3e:	4638      	mov	r0, r7
   d5b40:	b015      	add	sp, #84	; 0x54
   d5b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5b48 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5b48:	4b02      	ldr	r3, [pc, #8]	; (d5b54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5b4a:	4a03      	ldr	r2, [pc, #12]	; (d5b58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5b4c:	601a      	str	r2, [r3, #0]
   d5b4e:	2200      	movs	r2, #0
   d5b50:	605a      	str	r2, [r3, #4]

} // spark
   d5b52:	4770      	bx	lr
   d5b54:	2003e5c4 	.word	0x2003e5c4
   d5b58:	000d707c 	.word	0x000d707c

000d5b5c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b5e:	4606      	mov	r6, r0
   d5b60:	460d      	mov	r5, r1
  size_t n = 0;
   d5b62:	188f      	adds	r7, r1, r2
   d5b64:	2400      	movs	r4, #0
  while (size--) {
   d5b66:	42bd      	cmp	r5, r7
   d5b68:	d00c      	beq.n	d5b84 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5b6a:	6833      	ldr	r3, [r6, #0]
   d5b6c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5b70:	689b      	ldr	r3, [r3, #8]
   d5b72:	4630      	mov	r0, r6
   d5b74:	4798      	blx	r3
     if (chunk>=0)
   d5b76:	1e03      	subs	r3, r0, #0
   d5b78:	db01      	blt.n	d5b7e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5b7a:	441c      	add	r4, r3
  while (size--) {
   d5b7c:	e7f3      	b.n	d5b66 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5b7e:	2c00      	cmp	r4, #0
   d5b80:	bf08      	it	eq
   d5b82:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5b84:	4620      	mov	r0, r4
   d5b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b88 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5b88:	b513      	push	{r0, r1, r4, lr}
   d5b8a:	4604      	mov	r4, r0
    }
   d5b8c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5b8e:	b159      	cbz	r1, d5ba8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5b90:	9101      	str	r1, [sp, #4]
   d5b92:	f000 fc4b 	bl	d642c <strlen>
   d5b96:	6823      	ldr	r3, [r4, #0]
   d5b98:	9901      	ldr	r1, [sp, #4]
   d5b9a:	68db      	ldr	r3, [r3, #12]
   d5b9c:	4602      	mov	r2, r0
   d5b9e:	4620      	mov	r0, r4
    }
   d5ba0:	b002      	add	sp, #8
   d5ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5ba6:	4718      	bx	r3
    }
   d5ba8:	b002      	add	sp, #8
   d5baa:	bd10      	pop	{r4, pc}

000d5bac <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5bac:	b508      	push	{r3, lr}
  return write(str);
   d5bae:	f7ff ffeb 	bl	d5b88 <_ZN5Print5writeEPKc>
}
   d5bb2:	bd08      	pop	{r3, pc}

000d5bb4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5bb4:	6803      	ldr	r3, [r0, #0]
   d5bb6:	689b      	ldr	r3, [r3, #8]
   d5bb8:	4718      	bx	r3

000d5bba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5bba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5bbc:	210d      	movs	r1, #13
{
   d5bbe:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5bc0:	f7ff fff8 	bl	d5bb4 <_ZN5Print5printEc>
  n += print('\n');
   d5bc4:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5bc6:	4604      	mov	r4, r0
  n += print('\n');
   d5bc8:	4628      	mov	r0, r5
   d5bca:	f7ff fff3 	bl	d5bb4 <_ZN5Print5printEc>
  return n;
}
   d5bce:	4420      	add	r0, r4
   d5bd0:	bd38      	pop	{r3, r4, r5, pc}

000d5bd2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5bd2:	b530      	push	{r4, r5, lr}
   d5bd4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5bd6:	2300      	movs	r3, #0
   d5bd8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5bdc:	2a01      	cmp	r2, #1
   d5bde:	bf98      	it	ls
   d5be0:	220a      	movls	r2, #10
   d5be2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5be4:	460d      	mov	r5, r1
   d5be6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5bea:	fb01 5312 	mls	r3, r1, r2, r5
   d5bee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5bf2:	2b09      	cmp	r3, #9
   d5bf4:	bf94      	ite	ls
   d5bf6:	3330      	addls	r3, #48	; 0x30
   d5bf8:	3337      	addhi	r3, #55	; 0x37
   d5bfa:	b2db      	uxtb	r3, r3
  } while(n);
   d5bfc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5bfe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5c02:	d9ef      	bls.n	d5be4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5c04:	4621      	mov	r1, r4
   d5c06:	f7ff ffbf 	bl	d5b88 <_ZN5Print5writeEPKc>
}
   d5c0a:	b00b      	add	sp, #44	; 0x2c
   d5c0c:	bd30      	pop	{r4, r5, pc}

000d5c0e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c12:	b086      	sub	sp, #24
   d5c14:	af00      	add	r7, sp, #0
   d5c16:	4605      	mov	r5, r0
   d5c18:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5c1a:	1d38      	adds	r0, r7, #4
   d5c1c:	2114      	movs	r1, #20
{
   d5c1e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5c20:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5c22:	f7ff fdc1 	bl	d57a8 <vsnprintf>

    if (n<bufsize)
   d5c26:	2813      	cmp	r0, #19
   d5c28:	d80e      	bhi.n	d5c48 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5c2a:	1d39      	adds	r1, r7, #4
   d5c2c:	4628      	mov	r0, r5
   d5c2e:	f7ff ffab 	bl	d5b88 <_ZN5Print5writeEPKc>
   d5c32:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5c34:	b11e      	cbz	r6, d5c3e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5c36:	4628      	mov	r0, r5
   d5c38:	f7ff ffbf 	bl	d5bba <_ZN5Print7printlnEv>
   d5c3c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5c3e:	4620      	mov	r0, r4
   d5c40:	3718      	adds	r7, #24
   d5c42:	46bd      	mov	sp, r7
   d5c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5c48:	f100 0308 	add.w	r3, r0, #8
   d5c4c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5c50:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5c52:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5c56:	4622      	mov	r2, r4
   d5c58:	1c41      	adds	r1, r0, #1
   d5c5a:	683b      	ldr	r3, [r7, #0]
   d5c5c:	4668      	mov	r0, sp
   d5c5e:	f7ff fda3 	bl	d57a8 <vsnprintf>
  return write(str);
   d5c62:	4669      	mov	r1, sp
   d5c64:	4628      	mov	r0, r5
   d5c66:	f7ff ff8f 	bl	d5b88 <_ZN5Print5writeEPKc>
   d5c6a:	4604      	mov	r4, r0
   d5c6c:	46c5      	mov	sp, r8
   d5c6e:	e7e1      	b.n	d5c34 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5c70 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c70:	4b01      	ldr	r3, [pc, #4]	; (d5c78 <_GLOBAL__sub_I_RGB+0x8>)
   d5c72:	2200      	movs	r2, #0
   d5c74:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d5c76:	4770      	bx	lr
   d5c78:	2003e5cc 	.word	0x2003e5cc

000d5c7c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5c7c:	2100      	movs	r1, #0
   d5c7e:	f7ff bc3f 	b.w	d5500 <hal_spi_acquire>

000d5c82 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5c82:	2100      	movs	r1, #0
   d5c84:	f7ff bc44 	b.w	d5510 <hal_spi_release>

000d5c88 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5c88:	b510      	push	{r4, lr}
   d5c8a:	4604      	mov	r4, r0
   d5c8c:	4608      	mov	r0, r1
{
    _spi = spi;
   d5c8e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5c90:	f7ff fc16 	bl	d54c0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5c94:	2300      	movs	r3, #0
   d5c96:	6063      	str	r3, [r4, #4]
}
   d5c98:	4620      	mov	r0, r4
   d5c9a:	bd10      	pop	{r4, pc}

000d5c9c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5c9c:	b510      	push	{r4, lr}
   d5c9e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5ca0:	7800      	ldrb	r0, [r0, #0]
   d5ca2:	f7ff ffeb 	bl	d5c7c <_ZN8SPIClass4lockEv.isra.0>
   d5ca6:	b948      	cbnz	r0, d5cbc <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5ca8:	7820      	ldrb	r0, [r4, #0]
   d5caa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5cae:	f7ff fbf7 	bl	d54a0 <hal_spi_begin>
        unlock();
   d5cb2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5cb8:	f7ff bfe3 	b.w	d5c82 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5cbc:	bd10      	pop	{r4, pc}

000d5cbe <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5cbe:	7800      	ldrb	r0, [r0, #0]
   d5cc0:	f7ff bfdf 	b.w	d5c82 <_ZN8SPIClass6unlockEv.isra.0>

000d5cc4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5cc4:	0840      	lsrs	r0, r0, #1
{
   d5cc6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5cc8:	6018      	str	r0, [r3, #0]
   d5cca:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5ccc:	6818      	ldr	r0, [r3, #0]
   d5cce:	4288      	cmp	r0, r1
   d5cd0:	b2e5      	uxtb	r5, r4
   d5cd2:	d906      	bls.n	d5ce2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5cd4:	3401      	adds	r4, #1
   d5cd6:	2c08      	cmp	r4, #8
   d5cd8:	d002      	beq.n	d5ce0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5cda:	0840      	lsrs	r0, r0, #1
   d5cdc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5cde:	e7f5      	b.n	d5ccc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5ce0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5ce4:	5d5b      	ldrb	r3, [r3, r5]
   d5ce6:	7013      	strb	r3, [r2, #0]
}
   d5ce8:	bd30      	pop	{r4, r5, pc}
   d5cea:	bf00      	nop
   d5cec:	000d70b0 	.word	0x000d70b0

000d5cf0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5cf4:	4606      	mov	r6, r0
   d5cf6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5cf8:	7800      	ldrb	r0, [r0, #0]
{
   d5cfa:	460c      	mov	r4, r1
    CHECK(lock());
   d5cfc:	f7ff ffbe 	bl	d5c7c <_ZN8SPIClass4lockEv.isra.0>
   d5d00:	2800      	cmp	r0, #0
   d5d02:	db1b      	blt.n	d5d3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5d04:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5d06:	2214      	movs	r2, #20
   d5d08:	2100      	movs	r1, #0
   d5d0a:	a809      	add	r0, sp, #36	; 0x24
   d5d0c:	f000 fb62 	bl	d63d4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5d10:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5d12:	2200      	movs	r2, #0
   d5d14:	a909      	add	r1, sp, #36	; 0x24
   d5d16:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5d18:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5d1c:	f7ff fbe0 	bl	d54e0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5d20:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5d24:	b113      	cbz	r3, d5d2c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5d26:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5d2a:	b155      	cbz	r5, d5d42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5d2c:	2700      	movs	r7, #0
   d5d2e:	46b9      	mov	r9, r7
   d5d30:	46b8      	mov	r8, r7
   d5d32:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5d34:	7923      	ldrb	r3, [r4, #4]
   d5d36:	b15d      	cbz	r5, d5d50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5d38:	b1c3      	cbz	r3, d5d6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5d3a:	2000      	movs	r0, #0
}
   d5d3c:	b00f      	add	sp, #60	; 0x3c
   d5d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5d42:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5d46:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5d4a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5d4e:	e7f1      	b.n	d5d34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5d50:	2b00      	cmp	r3, #0
   d5d52:	d135      	bne.n	d5dc0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5d54:	68a3      	ldr	r3, [r4, #8]
   d5d56:	4543      	cmp	r3, r8
   d5d58:	d108      	bne.n	d5d6c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5d5a:	f88d 9020 	strb.w	r9, [sp, #32]
   d5d5e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5d62:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5d66:	89a3      	ldrh	r3, [r4, #12]
   d5d68:	429a      	cmp	r2, r3
   d5d6a:	d0e6      	beq.n	d5d3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5d6c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5d6e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5d70:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5d74:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5d76:	ab04      	add	r3, sp, #16
   d5d78:	f10d 020f 	add.w	r2, sp, #15
   d5d7c:	f7ff ffa2 	bl	d5cc4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5d80:	7921      	ldrb	r1, [r4, #4]
   d5d82:	b985      	cbnz	r5, d5da6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5d84:	b989      	cbnz	r1, d5daa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5d86:	68a3      	ldr	r3, [r4, #8]
   d5d88:	4543      	cmp	r3, r8
   d5d8a:	d30e      	bcc.n	d5daa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5d8c:	f88d 9020 	strb.w	r9, [sp, #32]
   d5d90:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5d94:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5d98:	89a3      	ldrh	r3, [r4, #12]
   d5d9a:	429a      	cmp	r2, r3
   d5d9c:	d105      	bne.n	d5daa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5d9e:	9b04      	ldr	r3, [sp, #16]
   d5da0:	4543      	cmp	r3, r8
   d5da2:	d102      	bne.n	d5daa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5da4:	e7c9      	b.n	d5d3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5da6:	2900      	cmp	r1, #0
   d5da8:	d1f9      	bne.n	d5d9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5daa:	2300      	movs	r3, #0
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	7b63      	ldrb	r3, [r4, #13]
   d5db0:	9300      	str	r3, [sp, #0]
   d5db2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5db6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5db8:	7830      	ldrb	r0, [r6, #0]
   d5dba:	f7ff fb99 	bl	d54f0 <hal_spi_set_settings>
   d5dbe:	e7bc      	b.n	d5d3a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5dc0:	e9cd 5500 	strd	r5, r5, [sp]
   d5dc4:	462b      	mov	r3, r5
   d5dc6:	462a      	mov	r2, r5
   d5dc8:	2101      	movs	r1, #1
   d5dca:	e7f5      	b.n	d5db8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5dcc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5dcc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5dce:	7800      	ldrb	r0, [r0, #0]
   d5dd0:	f7ff fb6e 	bl	d54b0 <hal_spi_transfer>
}
   d5dd4:	b2c0      	uxtb	r0, r0
   d5dd6:	bd08      	pop	{r3, pc}

000d5dd8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5dd8:	4b05      	ldr	r3, [pc, #20]	; (d5df0 <_GLOBAL__sub_I_System+0x18>)
   d5dda:	2202      	movs	r2, #2
   d5ddc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5dde:	4b05      	ldr	r3, [pc, #20]	; (d5df4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d5de0:	4a05      	ldr	r2, [pc, #20]	; (d5df8 <_GLOBAL__sub_I_System+0x20>)
   d5de2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5de4:	2000      	movs	r0, #0
   d5de6:	6018      	str	r0, [r3, #0]
   d5de8:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d5dea:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5dec:	f7ff bc20 	b.w	d5630 <set_system_mode>
   d5df0:	2003e5e8 	.word	0x2003e5e8
   d5df4:	2003e5dc 	.word	0x2003e5dc
   d5df8:	ffff0000 	.word	0xffff0000

000d5dfc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d5dfc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5dfe:	2000      	movs	r0, #0
   d5e00:	f7ff fc52 	bl	d56a8 <spark_sync_time_pending>
   d5e04:	b128      	cbz	r0, d5e12 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5e06:	f7ff fc47 	bl	d5698 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5e0a:	f080 0001 	eor.w	r0, r0, #1
   d5e0e:	b2c0      	uxtb	r0, r0
    }
   d5e10:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d5e12:	2001      	movs	r0, #1
   d5e14:	e7fc      	b.n	d5e10 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d5e16 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5e16:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d5e18:	2000      	movs	r0, #0
   d5e1a:	f7ff faa1 	bl	d5360 <hal_rtc_time_is_valid>
    if (rtcstate)
   d5e1e:	4604      	mov	r4, r0
   d5e20:	b9a0      	cbnz	r0, d5e4c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5e22:	f7ff fbfd 	bl	d5620 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5e26:	2801      	cmp	r0, #1
   d5e28:	d110      	bne.n	d5e4c <_ZN9TimeClass7isValidEv+0x36>
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	f7ff fc10 	bl	d5650 <system_thread_get_state>
   d5e30:	b960      	cbnz	r0, d5e4c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d5e32:	f7ff ffe3 	bl	d5dfc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5e36:	b910      	cbnz	r0, d5e3e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d5e38:	f7ff fc26 	bl	d5688 <spark_process>
        while (_while() && !_condition()) {
   d5e3c:	e7f9      	b.n	d5e32 <_ZN9TimeClass7isValidEv+0x1c>
   d5e3e:	f7ff ffdd 	bl	d5dfc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d5e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d5e46:	2000      	movs	r0, #0
   d5e48:	f7ff ba8a 	b.w	d5360 <hal_rtc_time_is_valid>
}
   d5e4c:	4620      	mov	r0, r4
   d5e4e:	bd10      	pop	{r4, pc}

000d5e50 <_ZN9TimeClass3nowEv>:
{
   d5e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d5e52:	f7ff ffe0 	bl	d5e16 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d5e56:	2210      	movs	r2, #16
   d5e58:	2100      	movs	r1, #0
   d5e5a:	4668      	mov	r0, sp
   d5e5c:	f000 faba 	bl	d63d4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d5e60:	2100      	movs	r1, #0
   d5e62:	4668      	mov	r0, sp
   d5e64:	f7ff fa84 	bl	d5370 <hal_rtc_get_time>
}
   d5e68:	9800      	ldr	r0, [sp, #0]
   d5e6a:	b005      	add	sp, #20
   d5e6c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5e70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5e70:	4b02      	ldr	r3, [pc, #8]	; (d5e7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5e72:	681a      	ldr	r2, [r3, #0]
   d5e74:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5e76:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5e78:	4770      	bx	lr
   d5e7a:	bf00      	nop
   d5e7c:	2003e4e4 	.word	0x2003e4e4
   d5e80:	2003e5ec 	.word	0x2003e5ec

000d5e84 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5e84:	4770      	bx	lr

000d5e86 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5e86:	7441      	strb	r1, [r0, #17]
}
   d5e88:	4770      	bx	lr

000d5e8a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5e8a:	4770      	bx	lr

000d5e8c <_ZN11USARTSerial17availableForWriteEv>:
{
   d5e8c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5e8e:	7c00      	ldrb	r0, [r0, #16]
   d5e90:	f7ff fb7e 	bl	d5590 <hal_usart_available_data_for_write>
}
   d5e94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e98:	bd08      	pop	{r3, pc}

000d5e9a <_ZN11USARTSerial9availableEv>:
{
   d5e9a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5e9c:	7c00      	ldrb	r0, [r0, #16]
   d5e9e:	f7ff fb4f 	bl	d5540 <hal_usart_available>
}
   d5ea2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ea6:	bd08      	pop	{r3, pc}

000d5ea8 <_ZN11USARTSerial4peekEv>:
{
   d5ea8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5eaa:	7c00      	ldrb	r0, [r0, #16]
   d5eac:	f7ff fb58 	bl	d5560 <hal_usart_peek>
}
   d5eb0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5eb4:	bd08      	pop	{r3, pc}

000d5eb6 <_ZN11USARTSerial4readEv>:
{
   d5eb6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5eb8:	7c00      	ldrb	r0, [r0, #16]
   d5eba:	f7ff fb49 	bl	d5550 <hal_usart_read>
}
   d5ebe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5ec2:	bd08      	pop	{r3, pc}

000d5ec4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d5ec4:	7c00      	ldrb	r0, [r0, #16]
   d5ec6:	f7ff bb53 	b.w	d5570 <hal_usart_flush>

000d5eca <_ZN11USARTSerial5writeEh>:
{
   d5eca:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5ecc:	7c45      	ldrb	r5, [r0, #17]
{
   d5ece:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5ed0:	b12d      	cbz	r5, d5ede <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d5ed2:	7c20      	ldrb	r0, [r4, #16]
}
   d5ed4:	b003      	add	sp, #12
   d5ed6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5eda:	f7ff bb29 	b.w	d5530 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5ede:	7c00      	ldrb	r0, [r0, #16]
   d5ee0:	9101      	str	r1, [sp, #4]
   d5ee2:	f7ff fb55 	bl	d5590 <hal_usart_available_data_for_write>
   d5ee6:	2800      	cmp	r0, #0
   d5ee8:	9901      	ldr	r1, [sp, #4]
   d5eea:	dcf2      	bgt.n	d5ed2 <_ZN11USARTSerial5writeEh+0x8>
}
   d5eec:	4628      	mov	r0, r5
   d5eee:	b003      	add	sp, #12
   d5ef0:	bd30      	pop	{r4, r5, pc}

000d5ef2 <_ZN11USARTSerialD0Ev>:
   d5ef2:	b510      	push	{r4, lr}
   d5ef4:	2114      	movs	r1, #20
   d5ef6:	4604      	mov	r4, r0
   d5ef8:	f000 fa54 	bl	d63a4 <_ZdlPvj>
   d5efc:	4620      	mov	r0, r4
   d5efe:	bd10      	pop	{r4, pc}

000d5f00 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5f00:	b510      	push	{r4, lr}
   d5f02:	f04f 0c00 	mov.w	ip, #0
   d5f06:	4604      	mov	r4, r0
   d5f08:	4608      	mov	r0, r1
   d5f0a:	4611      	mov	r1, r2
   d5f0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5f10:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5f14:	4a04      	ldr	r2, [pc, #16]	; (d5f28 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5f16:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5f18:	2201      	movs	r2, #1
  _serial = serial;
   d5f1a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5f1c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5f1e:	461a      	mov	r2, r3
   d5f20:	f7ff fafe 	bl	d5520 <hal_usart_init>
}
   d5f24:	4620      	mov	r0, r4
   d5f26:	bd10      	pop	{r4, pc}
   d5f28:	000d70dc 	.word	0x000d70dc

000d5f2c <_Z22__fetch_global_Serial1v>:
{
   d5f2c:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5f2e:	4c0d      	ldr	r4, [pc, #52]	; (d5f64 <_Z22__fetch_global_Serial1v+0x38>)
   d5f30:	7821      	ldrb	r1, [r4, #0]
   d5f32:	f3bf 8f5b 	dmb	ish
   d5f36:	f011 0101 	ands.w	r1, r1, #1
   d5f3a:	d110      	bne.n	d5f5e <_Z22__fetch_global_Serial1v+0x32>
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	9101      	str	r1, [sp, #4]
   d5f40:	f7fe f8b6 	bl	d40b0 <__cxa_guard_acquire>
   d5f44:	9901      	ldr	r1, [sp, #4]
   d5f46:	b150      	cbz	r0, d5f5e <_Z22__fetch_global_Serial1v+0x32>
   d5f48:	4b07      	ldr	r3, [pc, #28]	; (d5f68 <_Z22__fetch_global_Serial1v+0x3c>)
   d5f4a:	4a08      	ldr	r2, [pc, #32]	; (d5f6c <_Z22__fetch_global_Serial1v+0x40>)
   d5f4c:	4808      	ldr	r0, [pc, #32]	; (d5f70 <_Z22__fetch_global_Serial1v+0x44>)
   d5f4e:	f7ff ffd7 	bl	d5f00 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5f52:	4620      	mov	r0, r4
   d5f54:	f7fe f8b1 	bl	d40ba <__cxa_guard_release>
   d5f58:	4806      	ldr	r0, [pc, #24]	; (d5f74 <_Z22__fetch_global_Serial1v+0x48>)
   d5f5a:	f000 fa27 	bl	d63ac <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5f5e:	4804      	ldr	r0, [pc, #16]	; (d5f70 <_Z22__fetch_global_Serial1v+0x44>)
   d5f60:	b002      	add	sp, #8
   d5f62:	bd10      	pop	{r4, pc}
   d5f64:	2003e5f0 	.word	0x2003e5f0
   d5f68:	2003e678 	.word	0x2003e678
   d5f6c:	2003e5f4 	.word	0x2003e5f4
   d5f70:	2003e6fc 	.word	0x2003e6fc
   d5f74:	000d5e8b 	.word	0x000d5e8b

000d5f78 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f78:	7441      	strb	r1, [r0, #17]
}
   d5f7a:	4770      	bx	lr

000d5f7c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f7c:	4770      	bx	lr

000d5f7e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5f7e:	4770      	bx	lr

000d5f80 <_ZN9USBSerial4readEv>:
{
   d5f80:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5f82:	2100      	movs	r1, #0
   d5f84:	7c00      	ldrb	r0, [r0, #16]
   d5f86:	f7ff fb2b 	bl	d55e0 <HAL_USB_USART_Receive_Data>
}
   d5f8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5f8e:	bd08      	pop	{r3, pc}

000d5f90 <_ZN9USBSerial4peekEv>:
{
   d5f90:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5f92:	2101      	movs	r1, #1
   d5f94:	7c00      	ldrb	r0, [r0, #16]
   d5f96:	f7ff fb23 	bl	d55e0 <HAL_USB_USART_Receive_Data>
}
   d5f9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5f9e:	bd08      	pop	{r3, pc}

000d5fa0 <_ZN9USBSerial17availableForWriteEv>:
{
   d5fa0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5fa2:	7c00      	ldrb	r0, [r0, #16]
   d5fa4:	f7ff fb14 	bl	d55d0 <HAL_USB_USART_Available_Data_For_Write>
}
   d5fa8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fac:	bd08      	pop	{r3, pc}

000d5fae <_ZN9USBSerial9availableEv>:
{
   d5fae:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5fb0:	7c00      	ldrb	r0, [r0, #16]
   d5fb2:	f7ff fb05 	bl	d55c0 <HAL_USB_USART_Available_Data>
}
   d5fb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fba:	bd08      	pop	{r3, pc}

000d5fbc <_ZN9USBSerial5writeEh>:
{
   d5fbc:	b513      	push	{r0, r1, r4, lr}
   d5fbe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5fc0:	7c00      	ldrb	r0, [r0, #16]
{
   d5fc2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5fc4:	f7ff fb04 	bl	d55d0 <HAL_USB_USART_Available_Data_For_Write>
   d5fc8:	2800      	cmp	r0, #0
   d5fca:	9901      	ldr	r1, [sp, #4]
   d5fcc:	dc01      	bgt.n	d5fd2 <_ZN9USBSerial5writeEh+0x16>
   d5fce:	7c60      	ldrb	r0, [r4, #17]
   d5fd0:	b120      	cbz	r0, d5fdc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5fd2:	7c20      	ldrb	r0, [r4, #16]
   d5fd4:	f7ff fb0c 	bl	d55f0 <HAL_USB_USART_Send_Data>
   d5fd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5fdc:	b002      	add	sp, #8
   d5fde:	bd10      	pop	{r4, pc}

000d5fe0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5fe0:	7c00      	ldrb	r0, [r0, #16]
   d5fe2:	f7ff bb0d 	b.w	d5600 <HAL_USB_USART_Flush_Data>

000d5fe6 <_ZN9USBSerialD0Ev>:
   d5fe6:	b510      	push	{r4, lr}
   d5fe8:	2114      	movs	r1, #20
   d5fea:	4604      	mov	r4, r0
   d5fec:	f000 f9da 	bl	d63a4 <_ZdlPvj>
   d5ff0:	4620      	mov	r0, r4
   d5ff2:	bd10      	pop	{r4, pc}

000d5ff4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5ff4:	b510      	push	{r4, lr}
   d5ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ffa:	4604      	mov	r4, r0
   d5ffc:	4608      	mov	r0, r1
   d5ffe:	2100      	movs	r1, #0
   d6000:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6004:	4b04      	ldr	r3, [pc, #16]	; (d6018 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6006:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6008:	2301      	movs	r3, #1
  _serial = serial;
   d600a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d600c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d600e:	4611      	mov	r1, r2
   d6010:	f7ff fac6 	bl	d55a0 <HAL_USB_USART_Init>
}
   d6014:	4620      	mov	r0, r4
   d6016:	bd10      	pop	{r4, pc}
   d6018:	000d710c 	.word	0x000d710c

000d601c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d601c:	7c00      	ldrb	r0, [r0, #16]
   d601e:	2200      	movs	r2, #0
   d6020:	f7ff bac6 	b.w	d55b0 <HAL_USB_USART_Begin>

000d6024 <_Z19acquireSerialBufferv>:
{
   d6024:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6026:	2214      	movs	r2, #20
{
   d6028:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d602a:	2100      	movs	r1, #0
   d602c:	f000 f9d2 	bl	d63d4 <memset>
}
   d6030:	4620      	mov	r0, r4
   d6032:	bd10      	pop	{r4, pc}

000d6034 <_Z16_fetch_usbserialv>:
{
   d6034:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6036:	4c0f      	ldr	r4, [pc, #60]	; (d6074 <_Z16_fetch_usbserialv+0x40>)
{
   d6038:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d603a:	a803      	add	r0, sp, #12
   d603c:	f7ff fff2 	bl	d6024 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6040:	7821      	ldrb	r1, [r4, #0]
   d6042:	f3bf 8f5b 	dmb	ish
   d6046:	f011 0101 	ands.w	r1, r1, #1
   d604a:	d10f      	bne.n	d606c <_Z16_fetch_usbserialv+0x38>
   d604c:	4620      	mov	r0, r4
   d604e:	9101      	str	r1, [sp, #4]
   d6050:	f7fe f82e 	bl	d40b0 <__cxa_guard_acquire>
   d6054:	9901      	ldr	r1, [sp, #4]
   d6056:	b148      	cbz	r0, d606c <_Z16_fetch_usbserialv+0x38>
   d6058:	aa03      	add	r2, sp, #12
   d605a:	4807      	ldr	r0, [pc, #28]	; (d6078 <_Z16_fetch_usbserialv+0x44>)
   d605c:	f7ff ffca 	bl	d5ff4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6060:	4620      	mov	r0, r4
   d6062:	f7fe f82a 	bl	d40ba <__cxa_guard_release>
   d6066:	4805      	ldr	r0, [pc, #20]	; (d607c <_Z16_fetch_usbserialv+0x48>)
   d6068:	f000 f9a0 	bl	d63ac <atexit>
	return _usbserial;
}
   d606c:	4802      	ldr	r0, [pc, #8]	; (d6078 <_Z16_fetch_usbserialv+0x44>)
   d606e:	b008      	add	sp, #32
   d6070:	bd10      	pop	{r4, pc}
   d6072:	bf00      	nop
   d6074:	2003e710 	.word	0x2003e710
   d6078:	2003e714 	.word	0x2003e714
   d607c:	000d5f7d 	.word	0x000d5f7d

000d6080 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6080:	2200      	movs	r2, #0
   d6082:	6840      	ldr	r0, [r0, #4]
   d6084:	4611      	mov	r1, r2
   d6086:	f7ff bb37 	b.w	d56f8 <network_ready>

000d608a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d608a:	2200      	movs	r2, #0
   d608c:	6840      	ldr	r0, [r0, #4]
   d608e:	4611      	mov	r1, r2
   d6090:	f7ff bb52 	b.w	d5738 <network_listening>

000d6094 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6094:	2200      	movs	r2, #0
   d6096:	6840      	ldr	r0, [r0, #4]
   d6098:	4611      	mov	r1, r2
   d609a:	f7ff bb5d 	b.w	d5758 <network_get_listen_timeout>

000d609e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d609e:	6840      	ldr	r0, [r0, #4]
   d60a0:	2200      	movs	r2, #0
   d60a2:	f7ff bb51 	b.w	d5748 <network_set_listen_timeout>

000d60a6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d60a6:	6840      	ldr	r0, [r0, #4]
   d60a8:	2200      	movs	r2, #0
   d60aa:	f081 0101 	eor.w	r1, r1, #1
   d60ae:	f7ff bb3b 	b.w	d5728 <network_listen>

000d60b2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d60b2:	2300      	movs	r3, #0
   d60b4:	6840      	ldr	r0, [r0, #4]
   d60b6:	461a      	mov	r2, r3
   d60b8:	4619      	mov	r1, r3
   d60ba:	f7ff bb2d 	b.w	d5718 <network_off>

000d60be <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d60be:	2300      	movs	r3, #0
   d60c0:	6840      	ldr	r0, [r0, #4]
   d60c2:	461a      	mov	r2, r3
   d60c4:	4619      	mov	r1, r3
   d60c6:	f7ff bb1f 	b.w	d5708 <network_on>

000d60ca <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d60ca:	2200      	movs	r2, #0
   d60cc:	6840      	ldr	r0, [r0, #4]
   d60ce:	4611      	mov	r1, r2
   d60d0:	f7ff bb02 	b.w	d56d8 <network_connecting>

000d60d4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d60d4:	6840      	ldr	r0, [r0, #4]
   d60d6:	2200      	movs	r2, #0
   d60d8:	2102      	movs	r1, #2
   d60da:	f7ff bb05 	b.w	d56e8 <network_disconnect>

000d60de <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d60de:	2300      	movs	r3, #0
   d60e0:	6840      	ldr	r0, [r0, #4]
   d60e2:	461a      	mov	r2, r3
   d60e4:	f7ff baf0 	b.w	d56c8 <network_connect>

000d60e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d60e8:	4b02      	ldr	r3, [pc, #8]	; (d60f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d60ea:	2204      	movs	r2, #4
   d60ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d60ee:	4a02      	ldr	r2, [pc, #8]	; (d60f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d60f0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d60f2:	4770      	bx	lr
   d60f4:	2003e728 	.word	0x2003e728
   d60f8:	000d713c 	.word	0x000d713c

000d60fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d60fc:	4b01      	ldr	r3, [pc, #4]	; (d6104 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d60fe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6100:	4770      	bx	lr
   d6102:	bf00      	nop
   d6104:	2003e4e8 	.word	0x2003e4e8

000d6108 <serialEventRun>:
{
   d6108:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d610a:	4b0b      	ldr	r3, [pc, #44]	; (d6138 <serialEventRun+0x30>)
   d610c:	b143      	cbz	r3, d6120 <serialEventRun+0x18>
   d610e:	f7ff ff91 	bl	d6034 <_Z16_fetch_usbserialv>
   d6112:	6803      	ldr	r3, [r0, #0]
   d6114:	691b      	ldr	r3, [r3, #16]
   d6116:	4798      	blx	r3
   d6118:	2800      	cmp	r0, #0
   d611a:	dd01      	ble.n	d6120 <serialEventRun+0x18>
        serialEvent();
   d611c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6120:	4b06      	ldr	r3, [pc, #24]	; (d613c <serialEventRun+0x34>)
   d6122:	b143      	cbz	r3, d6136 <serialEventRun+0x2e>
   d6124:	f7ff ff02 	bl	d5f2c <_Z22__fetch_global_Serial1v>
   d6128:	6803      	ldr	r3, [r0, #0]
   d612a:	691b      	ldr	r3, [r3, #16]
   d612c:	4798      	blx	r3
   d612e:	2800      	cmp	r0, #0
   d6130:	dd01      	ble.n	d6136 <serialEventRun+0x2e>
        serialEvent1();
   d6132:	f3af 8000 	nop.w
}
   d6136:	bd08      	pop	{r3, pc}
	...

000d6140 <_post_loop>:
{
   d6140:	b508      	push	{r3, lr}
	serialEventRun();
   d6142:	f7ff ffe1 	bl	d6108 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6146:	f7ff f903 	bl	d5350 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d614a:	4b01      	ldr	r3, [pc, #4]	; (d6150 <_post_loop+0x10>)
   d614c:	6018      	str	r0, [r3, #0]
}
   d614e:	bd08      	pop	{r3, pc}
   d6150:	2003e738 	.word	0x2003e738

000d6154 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6154:	4805      	ldr	r0, [pc, #20]	; (d616c <_Z33system_initialize_user_backup_ramv+0x18>)
   d6156:	4a06      	ldr	r2, [pc, #24]	; (d6170 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d6158:	4906      	ldr	r1, [pc, #24]	; (d6174 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d615a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d615c:	1a12      	subs	r2, r2, r0
   d615e:	f000 f92b 	bl	d63b8 <memcpy>
    __backup_sram_signature = signature;
   d6162:	4b05      	ldr	r3, [pc, #20]	; (d6178 <_Z33system_initialize_user_backup_ramv+0x24>)
   d6164:	4a05      	ldr	r2, [pc, #20]	; (d617c <_Z33system_initialize_user_backup_ramv+0x28>)
   d6166:	601a      	str	r2, [r3, #0]
}
   d6168:	bd08      	pop	{r3, pc}
   d616a:	bf00      	nop
   d616c:	2003f400 	.word	0x2003f400
   d6170:	2003f404 	.word	0x2003f404
   d6174:	000d71a0 	.word	0x000d71a0
   d6178:	2003f400 	.word	0x2003f400
   d617c:	9a271c1e 	.word	0x9a271c1e

000d6180 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6180:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6182:	2300      	movs	r3, #0
   d6184:	9300      	str	r3, [sp, #0]
   d6186:	461a      	mov	r2, r3
   d6188:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d618c:	f7ff fa72 	bl	d5674 <system_ctrl_set_result>
}
   d6190:	b003      	add	sp, #12
   d6192:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6198 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6198:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d619a:	8843      	ldrh	r3, [r0, #2]
   d619c:	2b0a      	cmp	r3, #10
   d619e:	d008      	beq.n	d61b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d61a0:	2b50      	cmp	r3, #80	; 0x50
   d61a2:	d10b      	bne.n	d61bc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d61a4:	4b09      	ldr	r3, [pc, #36]	; (d61cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d61a6:	681b      	ldr	r3, [r3, #0]
   d61a8:	b14b      	cbz	r3, d61be <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d61aa:	b003      	add	sp, #12
   d61ac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d61b0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d61b2:	f7ff ffe5 	bl	d6180 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d61b6:	b003      	add	sp, #12
   d61b8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d61bc:	2300      	movs	r3, #0
   d61be:	9300      	str	r3, [sp, #0]
   d61c0:	461a      	mov	r2, r3
   d61c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d61c6:	f7ff fa55 	bl	d5674 <system_ctrl_set_result>
}
   d61ca:	e7f4      	b.n	d61b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d61cc:	2003e734 	.word	0x2003e734

000d61d0 <module_user_init_hook>:
{
   d61d0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d61d2:	4812      	ldr	r0, [pc, #72]	; (d621c <module_user_init_hook+0x4c>)
   d61d4:	2100      	movs	r1, #0
   d61d6:	f7ff faef 	bl	d57b8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d61da:	4b11      	ldr	r3, [pc, #68]	; (d6220 <module_user_init_hook+0x50>)
   d61dc:	681a      	ldr	r2, [r3, #0]
   d61de:	4b11      	ldr	r3, [pc, #68]	; (d6224 <module_user_init_hook+0x54>)
   d61e0:	429a      	cmp	r2, r3
   d61e2:	4b11      	ldr	r3, [pc, #68]	; (d6228 <module_user_init_hook+0x58>)
   d61e4:	bf0c      	ite	eq
   d61e6:	2201      	moveq	r2, #1
   d61e8:	2200      	movne	r2, #0
   d61ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d61ec:	d001      	beq.n	d61f2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d61ee:	f7ff ffb1 	bl	d6154 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d61f2:	f7ff f89d 	bl	d5330 <HAL_RNG_GetRandomNumber>
   d61f6:	4604      	mov	r4, r0
    srand(seed);
   d61f8:	f000 f8f4 	bl	d63e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d61fc:	4b0b      	ldr	r3, [pc, #44]	; (d622c <module_user_init_hook+0x5c>)
   d61fe:	b113      	cbz	r3, d6206 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d6200:	4620      	mov	r0, r4
   d6202:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6206:	2100      	movs	r1, #0
   d6208:	4808      	ldr	r0, [pc, #32]	; (d622c <module_user_init_hook+0x5c>)
   d620a:	f7ff fa55 	bl	d56b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d620e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6212:	4807      	ldr	r0, [pc, #28]	; (d6230 <module_user_init_hook+0x60>)
   d6214:	2100      	movs	r1, #0
   d6216:	f7ff ba23 	b.w	d5660 <system_ctrl_set_app_request_handler>
   d621a:	bf00      	nop
   d621c:	000d60fd 	.word	0x000d60fd
   d6220:	2003f400 	.word	0x2003f400
   d6224:	9a271c1e 	.word	0x9a271c1e
   d6228:	2003e730 	.word	0x2003e730
   d622c:	00000000 	.word	0x00000000
   d6230:	000d6199 	.word	0x000d6199

000d6234 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6234:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6236:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6238:	d902      	bls.n	d6240 <pinAvailable+0xc>
    return false;
   d623a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d623c:	b002      	add	sp, #8
   d623e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6240:	f1a0 030b 	sub.w	r3, r0, #11
   d6244:	2b02      	cmp	r3, #2
   d6246:	d81a      	bhi.n	d627e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6248:	4c17      	ldr	r4, [pc, #92]	; (d62a8 <pinAvailable+0x74>)
   d624a:	7821      	ldrb	r1, [r4, #0]
   d624c:	f3bf 8f5b 	dmb	ish
   d6250:	f011 0101 	ands.w	r1, r1, #1
   d6254:	d10b      	bne.n	d626e <pinAvailable+0x3a>
   d6256:	4620      	mov	r0, r4
   d6258:	9101      	str	r1, [sp, #4]
   d625a:	f7fd ff29 	bl	d40b0 <__cxa_guard_acquire>
   d625e:	9901      	ldr	r1, [sp, #4]
   d6260:	b128      	cbz	r0, d626e <pinAvailable+0x3a>
   d6262:	4812      	ldr	r0, [pc, #72]	; (d62ac <pinAvailable+0x78>)
   d6264:	f7ff fd10 	bl	d5c88 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6268:	4620      	mov	r0, r4
   d626a:	f7fd ff26 	bl	d40ba <__cxa_guard_release>
   d626e:	4b0f      	ldr	r3, [pc, #60]	; (d62ac <pinAvailable+0x78>)
   d6270:	7818      	ldrb	r0, [r3, #0]
   d6272:	f7ff f92d 	bl	d54d0 <hal_spi_is_enabled>
   d6276:	2800      	cmp	r0, #0
   d6278:	d1df      	bne.n	d623a <pinAvailable+0x6>
  return true; // 'pin' is available
   d627a:	2001      	movs	r0, #1
   d627c:	e7de      	b.n	d623c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d627e:	2801      	cmp	r0, #1
   d6280:	d809      	bhi.n	d6296 <pinAvailable+0x62>
   d6282:	f000 f86b 	bl	d635c <_Z19__fetch_global_Wirev>
   d6286:	2100      	movs	r1, #0
   d6288:	7c00      	ldrb	r0, [r0, #16]
   d628a:	f7ff f8e1 	bl	d5450 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d628e:	f080 0001 	eor.w	r0, r0, #1
   d6292:	b2c0      	uxtb	r0, r0
   d6294:	e7d2      	b.n	d623c <pinAvailable+0x8>
   d6296:	3809      	subs	r0, #9
   d6298:	2801      	cmp	r0, #1
   d629a:	d8ee      	bhi.n	d627a <pinAvailable+0x46>
   d629c:	f7ff fe46 	bl	d5f2c <_Z22__fetch_global_Serial1v>
   d62a0:	7c00      	ldrb	r0, [r0, #16]
   d62a2:	f7ff f96d 	bl	d5580 <hal_usart_is_enabled>
   d62a6:	e7f2      	b.n	d628e <pinAvailable+0x5a>
   d62a8:	2003e5a8 	.word	0x2003e5a8
   d62ac:	2003e5ac 	.word	0x2003e5ac

000d62b0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62b0:	2823      	cmp	r0, #35	; 0x23
{
   d62b2:	b538      	push	{r3, r4, r5, lr}
   d62b4:	4604      	mov	r4, r0
   d62b6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62b8:	d80a      	bhi.n	d62d0 <pinMode+0x20>
   d62ba:	29ff      	cmp	r1, #255	; 0xff
   d62bc:	d008      	beq.n	d62d0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d62be:	f7ff ffb9 	bl	d6234 <pinAvailable>
   d62c2:	b128      	cbz	r0, d62d0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d62c4:	4629      	mov	r1, r5
   d62c6:	4620      	mov	r0, r4
}
   d62c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d62cc:	f7ff b858 	b.w	d5380 <HAL_Pin_Mode>
}
   d62d0:	bd38      	pop	{r3, r4, r5, pc}

000d62d2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d62d2:	b538      	push	{r3, r4, r5, lr}
   d62d4:	4604      	mov	r4, r0
   d62d6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d62d8:	f7ff f85a 	bl	d5390 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d62dc:	28ff      	cmp	r0, #255	; 0xff
   d62de:	d010      	beq.n	d6302 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d62e0:	2806      	cmp	r0, #6
   d62e2:	d804      	bhi.n	d62ee <digitalWrite+0x1c>
   d62e4:	234d      	movs	r3, #77	; 0x4d
   d62e6:	fa23 f000 	lsr.w	r0, r3, r0
   d62ea:	07c3      	lsls	r3, r0, #31
   d62ec:	d409      	bmi.n	d6302 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d62ee:	4620      	mov	r0, r4
   d62f0:	f7ff ffa0 	bl	d6234 <pinAvailable>
   d62f4:	b128      	cbz	r0, d6302 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d62f6:	4629      	mov	r1, r5
   d62f8:	4620      	mov	r0, r4
}
   d62fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d62fe:	f7ff b84f 	b.w	d53a0 <HAL_GPIO_Write>
}
   d6302:	bd38      	pop	{r3, r4, r5, pc}

000d6304 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6304:	b510      	push	{r4, lr}
   d6306:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6308:	f7ff f842 	bl	d5390 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d630c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d630e:	b2db      	uxtb	r3, r3
   d6310:	2b01      	cmp	r3, #1
   d6312:	d908      	bls.n	d6326 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6314:	4620      	mov	r0, r4
   d6316:	f7ff ff8d 	bl	d6234 <pinAvailable>
   d631a:	b120      	cbz	r0, d6326 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d631c:	4620      	mov	r0, r4
}
   d631e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6322:	f7ff b845 	b.w	d53b0 <HAL_GPIO_Read>
}
   d6326:	2000      	movs	r0, #0
   d6328:	bd10      	pop	{r4, pc}

000d632a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d632a:	4770      	bx	lr

000d632c <_Z17acquireWireBufferv>:
{
   d632c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d632e:	2300      	movs	r3, #0
   d6330:	2520      	movs	r5, #32
   d6332:	8043      	strh	r3, [r0, #2]
   d6334:	2314      	movs	r3, #20
{
   d6336:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6338:	8003      	strh	r3, [r0, #0]
   d633a:	6085      	str	r5, [r0, #8]
   d633c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d633e:	4906      	ldr	r1, [pc, #24]	; (d6358 <_Z17acquireWireBufferv+0x2c>)
   d6340:	4628      	mov	r0, r5
   d6342:	f000 f831 	bl	d63a8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6346:	4904      	ldr	r1, [pc, #16]	; (d6358 <_Z17acquireWireBufferv+0x2c>)
	};
   d6348:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d634a:	4628      	mov	r0, r5
   d634c:	f000 f82c 	bl	d63a8 <_ZnajRKSt9nothrow_t>
	};
   d6350:	60e0      	str	r0, [r4, #12]
}
   d6352:	4620      	mov	r0, r4
   d6354:	bd38      	pop	{r3, r4, r5, pc}
   d6356:	bf00      	nop
   d6358:	000d7170 	.word	0x000d7170

000d635c <_Z19__fetch_global_Wirev>:
{
   d635c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d635e:	4d0e      	ldr	r5, [pc, #56]	; (d6398 <_Z19__fetch_global_Wirev+0x3c>)
   d6360:	7829      	ldrb	r1, [r5, #0]
   d6362:	f3bf 8f5b 	dmb	ish
   d6366:	f011 0401 	ands.w	r4, r1, #1
{
   d636a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d636c:	d111      	bne.n	d6392 <_Z19__fetch_global_Wirev+0x36>
   d636e:	4628      	mov	r0, r5
   d6370:	f7fd fe9e 	bl	d40b0 <__cxa_guard_acquire>
   d6374:	b168      	cbz	r0, d6392 <_Z19__fetch_global_Wirev+0x36>
   d6376:	a801      	add	r0, sp, #4
   d6378:	f7ff ffd8 	bl	d632c <_Z17acquireWireBufferv>
   d637c:	aa01      	add	r2, sp, #4
   d637e:	4621      	mov	r1, r4
   d6380:	4806      	ldr	r0, [pc, #24]	; (d639c <_Z19__fetch_global_Wirev+0x40>)
   d6382:	f7ff fa97 	bl	d58b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6386:	4628      	mov	r0, r5
   d6388:	f7fd fe97 	bl	d40ba <__cxa_guard_release>
   d638c:	4804      	ldr	r0, [pc, #16]	; (d63a0 <_Z19__fetch_global_Wirev+0x44>)
   d638e:	f000 f80d 	bl	d63ac <atexit>
	return wire;
}
   d6392:	4802      	ldr	r0, [pc, #8]	; (d639c <_Z19__fetch_global_Wirev+0x40>)
   d6394:	b007      	add	sp, #28
   d6396:	bd30      	pop	{r4, r5, pc}
   d6398:	2003e73c 	.word	0x2003e73c
   d639c:	2003e740 	.word	0x2003e740
   d63a0:	000d632b 	.word	0x000d632b

000d63a4 <_ZdlPvj>:
   d63a4:	f7fd be77 	b.w	d4096 <_ZdlPv>

000d63a8 <_ZnajRKSt9nothrow_t>:
   d63a8:	f7fd be73 	b.w	d4092 <_Znaj>

000d63ac <atexit>:
   d63ac:	2300      	movs	r3, #0
   d63ae:	4601      	mov	r1, r0
   d63b0:	461a      	mov	r2, r3
   d63b2:	4618      	mov	r0, r3
   d63b4:	f000 b842 	b.w	d643c <__register_exitproc>

000d63b8 <memcpy>:
   d63b8:	440a      	add	r2, r1
   d63ba:	4291      	cmp	r1, r2
   d63bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d63c0:	d100      	bne.n	d63c4 <memcpy+0xc>
   d63c2:	4770      	bx	lr
   d63c4:	b510      	push	{r4, lr}
   d63c6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d63ca:	f803 4f01 	strb.w	r4, [r3, #1]!
   d63ce:	4291      	cmp	r1, r2
   d63d0:	d1f9      	bne.n	d63c6 <memcpy+0xe>
   d63d2:	bd10      	pop	{r4, pc}

000d63d4 <memset>:
   d63d4:	4402      	add	r2, r0
   d63d6:	4603      	mov	r3, r0
   d63d8:	4293      	cmp	r3, r2
   d63da:	d100      	bne.n	d63de <memset+0xa>
   d63dc:	4770      	bx	lr
   d63de:	f803 1b01 	strb.w	r1, [r3], #1
   d63e2:	e7f9      	b.n	d63d8 <memset+0x4>

000d63e4 <srand>:
   d63e4:	b538      	push	{r3, r4, r5, lr}
   d63e6:	4b0d      	ldr	r3, [pc, #52]	; (d641c <srand+0x38>)
   d63e8:	681d      	ldr	r5, [r3, #0]
   d63ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d63ec:	4604      	mov	r4, r0
   d63ee:	b97b      	cbnz	r3, d6410 <srand+0x2c>
   d63f0:	2018      	movs	r0, #24
   d63f2:	f7ff f9c9 	bl	d5788 <malloc>
   d63f6:	4a0a      	ldr	r2, [pc, #40]	; (d6420 <srand+0x3c>)
   d63f8:	4b0a      	ldr	r3, [pc, #40]	; (d6424 <srand+0x40>)
   d63fa:	63a8      	str	r0, [r5, #56]	; 0x38
   d63fc:	e9c0 2300 	strd	r2, r3, [r0]
   d6400:	4b09      	ldr	r3, [pc, #36]	; (d6428 <srand+0x44>)
   d6402:	6083      	str	r3, [r0, #8]
   d6404:	230b      	movs	r3, #11
   d6406:	8183      	strh	r3, [r0, #12]
   d6408:	2201      	movs	r2, #1
   d640a:	2300      	movs	r3, #0
   d640c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6410:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6412:	2200      	movs	r2, #0
   d6414:	611c      	str	r4, [r3, #16]
   d6416:	615a      	str	r2, [r3, #20]
   d6418:	bd38      	pop	{r3, r4, r5, pc}
   d641a:	bf00      	nop
   d641c:	2003e4e8 	.word	0x2003e4e8
   d6420:	abcd330e 	.word	0xabcd330e
   d6424:	e66d1234 	.word	0xe66d1234
   d6428:	0005deec 	.word	0x0005deec

000d642c <strlen>:
   d642c:	4603      	mov	r3, r0
   d642e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6432:	2a00      	cmp	r2, #0
   d6434:	d1fb      	bne.n	d642e <strlen+0x2>
   d6436:	1a18      	subs	r0, r3, r0
   d6438:	3801      	subs	r0, #1
   d643a:	4770      	bx	lr

000d643c <__register_exitproc>:
   d643c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6440:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d64fc <__register_exitproc+0xc0>
   d6444:	4606      	mov	r6, r0
   d6446:	f8d8 0000 	ldr.w	r0, [r8]
   d644a:	461f      	mov	r7, r3
   d644c:	460d      	mov	r5, r1
   d644e:	4691      	mov	r9, r2
   d6450:	f000 f856 	bl	d6500 <__retarget_lock_acquire_recursive>
   d6454:	4b25      	ldr	r3, [pc, #148]	; (d64ec <__register_exitproc+0xb0>)
   d6456:	681c      	ldr	r4, [r3, #0]
   d6458:	b934      	cbnz	r4, d6468 <__register_exitproc+0x2c>
   d645a:	4c25      	ldr	r4, [pc, #148]	; (d64f0 <__register_exitproc+0xb4>)
   d645c:	601c      	str	r4, [r3, #0]
   d645e:	4b25      	ldr	r3, [pc, #148]	; (d64f4 <__register_exitproc+0xb8>)
   d6460:	b113      	cbz	r3, d6468 <__register_exitproc+0x2c>
   d6462:	681b      	ldr	r3, [r3, #0]
   d6464:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d6468:	6863      	ldr	r3, [r4, #4]
   d646a:	2b1f      	cmp	r3, #31
   d646c:	dd07      	ble.n	d647e <__register_exitproc+0x42>
   d646e:	f8d8 0000 	ldr.w	r0, [r8]
   d6472:	f000 f847 	bl	d6504 <__retarget_lock_release_recursive>
   d6476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d647a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d647e:	b34e      	cbz	r6, d64d4 <__register_exitproc+0x98>
   d6480:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d6484:	b988      	cbnz	r0, d64aa <__register_exitproc+0x6e>
   d6486:	4b1c      	ldr	r3, [pc, #112]	; (d64f8 <__register_exitproc+0xbc>)
   d6488:	b923      	cbnz	r3, d6494 <__register_exitproc+0x58>
   d648a:	f8d8 0000 	ldr.w	r0, [r8]
   d648e:	f000 f838 	bl	d6502 <__retarget_lock_release>
   d6492:	e7f0      	b.n	d6476 <__register_exitproc+0x3a>
   d6494:	f44f 7084 	mov.w	r0, #264	; 0x108
   d6498:	f7ff f976 	bl	d5788 <malloc>
   d649c:	2800      	cmp	r0, #0
   d649e:	d0f4      	beq.n	d648a <__register_exitproc+0x4e>
   d64a0:	2300      	movs	r3, #0
   d64a2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d64a6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d64aa:	6863      	ldr	r3, [r4, #4]
   d64ac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d64b0:	2201      	movs	r2, #1
   d64b2:	409a      	lsls	r2, r3
   d64b4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d64b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d64bc:	4313      	orrs	r3, r2
   d64be:	2e02      	cmp	r6, #2
   d64c0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d64c4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d64c8:	bf02      	ittt	eq
   d64ca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d64ce:	431a      	orreq	r2, r3
   d64d0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d64d4:	6863      	ldr	r3, [r4, #4]
   d64d6:	f8d8 0000 	ldr.w	r0, [r8]
   d64da:	1c5a      	adds	r2, r3, #1
   d64dc:	3302      	adds	r3, #2
   d64de:	6062      	str	r2, [r4, #4]
   d64e0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d64e4:	f000 f80e 	bl	d6504 <__retarget_lock_release_recursive>
   d64e8:	2000      	movs	r0, #0
   d64ea:	e7c6      	b.n	d647a <__register_exitproc+0x3e>
   d64ec:	2003e7e0 	.word	0x2003e7e0
   d64f0:	2003e754 	.word	0x2003e754
   d64f4:	00000000 	.word	0x00000000
   d64f8:	000d5789 	.word	0x000d5789
   d64fc:	2003e54c 	.word	0x2003e54c

000d6500 <__retarget_lock_acquire_recursive>:
   d6500:	4770      	bx	lr

000d6502 <__retarget_lock_release>:
   d6502:	4770      	bx	lr

000d6504 <__retarget_lock_release_recursive>:
   d6504:	4770      	bx	lr

000d6506 <link_code_end>:
	...

000d6508 <dynalib_user>:
   d6508:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6518:	0000 0000                                   ....

000d651c <_ZL4font>:
   d651c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d652c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d653c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d654c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d655c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d656c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d657c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d658c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d659c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d65ac:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d65bc:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d65cc:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d65dc:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d65ec:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d65fc:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d660c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d661c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d662c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d663c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d664c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d665c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d666c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d667c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d668c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d669c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d66ac:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d66bc:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d66cc:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d66dc:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d66ec:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d66fc:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d670c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d671c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d672c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d673c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d674c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d675c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d676c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d677c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d678c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d679c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d67ac:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d67bc:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d67cc:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d67dc:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d67ec:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d67fc:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d680c:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d681c:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d682c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d683c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d684c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d685c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d686c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d687c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d688c:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d689c:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d68ac:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d68bc:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d68cc:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d68dc:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d68ec:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d68fc:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d690c:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d691c:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d692c:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d693c:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d694c:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d695c:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d696c:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d697c:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d698c:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d699c:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d69ac:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d69bc:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d69cc:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d69dc:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d69ec:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d69fc:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d6a0c:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000d6a1c <_ZTV12Adafruit_GFX>:
	...
   d6a2c:	48a1 000d 5b5d 000d 409d 000d 42a9 000d     .H..][...@...B..
   d6a3c:	42ab 000d 42dd 000d 42b9 000d 42cb 000d     .B...B...B...B..
   d6a4c:	41ed 000d 42a9 000d 44d5 000d 444f 000d     .A...B...D..OD..
   d6a5c:	42f5 000d 4333 000d 436d 000d 43b3 000d     .B..3C..mC...C..
   d6a6c:	4451 000d 43cf 000d 6564 6166 6c75 2074     QD...C..default 
   d6a7c:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   d6a8c:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   d6a9c:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   d6aac:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000d6ab8 <_ZTVN8particle11SPISettingsE>:
	...
   d6ac0:	49d1 000d 49a3 000d 49a5 000d               .I...I...I..

000d6acc <_ZL12splash1_data>:
   d6acc:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d6adc:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d6aec:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d6afc:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d6b0c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d6b1c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d6b34:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d6b44:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d6b54:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d6b64:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d6b74:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d6b84:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d6b94:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d6ba4:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d6bb4:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d6bc4:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d6bd4:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d6be4:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d6bf4:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d6c04:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d6c14:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d6c24:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d6c34:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d6c44:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d6c5c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d6c74:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d6c84:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d6c94:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d6ca4:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d6cb4:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d6cc4:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d6cd4:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d6ce4:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d6cf4:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d6d04:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d6d14:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d6d24:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d6d34:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d6d44:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d6d54:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d6d64:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d6d74:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d6d84:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d6d8c <_ZL12splash2_data>:
   d6d8c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d6d9c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d6dac:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d6dc8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d6dd8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d6de8:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d6df8:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d6e08:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d6e18:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d6e28:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d6e38:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d6e48:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d6e58:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d6e68:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d6e78:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d6e88:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d6e98:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d6ea8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d6eb8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d6ec8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d6ed8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d6ee8:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d6ef8:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d6f08:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d6f20:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d6f30:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d6f40:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d6f50:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d6f60:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d6f6c <_ZTV16Adafruit_SSD1306>:
	...
   d6f74:	4a25 000d 4a3d 000d 48a1 000d 5b5d 000d     %J..=J...H..][..
   d6f84:	4a51 000d 42a9 000d 42ab 000d 42dd 000d     QJ...B...B...B..
   d6f94:	42b9 000d 42cb 000d 41ed 000d 42a9 000d     .B...B...A...B..
   d6fa4:	44d5 000d 4c0b 000d 519f 000d 5151 000d     .D...L...Q..QQ..
   d6fb4:	436d 000d 43b3 000d 4451 000d 43cf 000d     mC...C..QD...C..

000d6fc4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d6fc4:	8000 e0c0 f8f0 fefc                         ........

000d6fcc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d6fcc:	0100 0703 1f0f 7f3f                         ......?.

000d6fd4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d6fd4:	d5ae a880                                   ....

000d6fd8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d6fd8:	00d3 8d40                                   ..@.

000d6fdc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d6fdc:	0020 c8a1                                    ...

000d6fe0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d6fe0:	40db a6a4 af2e                              .@....

000d6fe6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d6fe6:	02da 8f81                                   ....

000d6fea <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d6fea:	12da                                         ...

000d6fed <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d6fed:	02da                                         ...

000d6ff0 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d6ff0:	0022 21ff 0000 0000                         "..!....

000d6ff8 <_ZTVN5spark13EthernetClassE>:
	...
   d7000:	583f 000d 5835 000d 582b 000d 5821 000d     ?X..5X..+X..!X..
   d7010:	5815 000d 5809 000d 5a3d 000d 5a45 000d     .X...X..=Z..EZ..
   d7020:	57fd 000d 57f5 000d 57eb 000d 57e1 000d     .W...W...W...W..
   d7030:	5a75 000d                                   uZ..

000d7034 <_ZTV7TwoWire>:
	...
   d703c:	585d 000d 58a7 000d 587f 000d 585f 000d     ]X...X...X.._X..
   d704c:	5887 000d 588f 000d 5897 000d 589f 000d     .X...X...X...X..

000d705c <_ZTV9IPAddress>:
	...
   d7064:	5919 000d 5909 000d 590b 000d 7061 0070     .Y...Y...Y..app.

000d7074 <_ZTVN5spark12NetworkClassE>:
	...
   d707c:	59fd 000d 5a07 000d 5a11 000d 5a1b 000d     .Y...Z...Z...Z..
   d708c:	5a25 000d 5a31 000d 5a3d 000d 5a45 000d     %Z..1Z..=Z..EZ..
   d709c:	5a4d 000d 5a59 000d 5a61 000d 5a6b 000d     MZ..YZ..aZ..kZ..
   d70ac:	5a75 000d                                   uZ..

000d70b0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d70b0:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   d70c0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d70d0:	6d69 0065                                   ime.

000d70d4 <_ZTV11USARTSerial>:
	...
   d70dc:	5e85 000d 5ef3 000d 5ecb 000d 5b5d 000d     .^...^...^..][..
   d70ec:	5e9b 000d 5eb7 000d 5ea9 000d 5ec5 000d     .^...^...^...^..
   d70fc:	5e87 000d 5e8d 000d                         .^...^..

000d7104 <_ZTV9USBSerial>:
	...
   d710c:	5f7f 000d 5fe7 000d 5fbd 000d 5b5d 000d     ._..._..._..][..
   d711c:	5faf 000d 5f81 000d 5f91 000d 5fe1 000d     ._..._..._..._..
   d712c:	5fa1 000d 5f79 000d                         ._..y_..

000d7134 <_ZTVN5spark9WiFiClassE>:
	...
   d713c:	60df 000d 60d5 000d 60cb 000d 6081 000d     .`...`...`...`..
   d714c:	60bf 000d 60b3 000d 5a3d 000d 5a45 000d     .`...`..=Z..EZ..
   d715c:	60a7 000d 609f 000d 6095 000d 608b 000d     .`...`...`...`..
   d716c:	5a75 000d                                   uZ..

000d7170 <_ZSt7nothrow>:
	...

000d7171 <link_const_variable_data_end>:
   d7171:	00          	.byte	0x00
	...

000d7174 <link_constructors_location>:
   d7174:	000d41b9 	.word	0x000d41b9
   d7178:	000d57d1 	.word	0x000d57d1
   d717c:	000d5849 	.word	0x000d5849
   d7180:	000d59ed 	.word	0x000d59ed
   d7184:	000d5b49 	.word	0x000d5b49
   d7188:	000d5c71 	.word	0x000d5c71
   d718c:	000d5dd9 	.word	0x000d5dd9
   d7190:	000d5e71 	.word	0x000d5e71
   d7194:	000d60e9 	.word	0x000d60e9

000d7198 <link_constructors_end>:
	...
